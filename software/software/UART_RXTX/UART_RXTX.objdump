
UART_RXTX.elf:     file format elf32-littlenios2
UART_RXTX.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020230

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00010dd0 memsz 0x00010dd0 flags r-x
    LOAD off    0x00011df0 vaddr 0x00030df0 paddr 0x00032a64 align 2**12
         filesz 0x00001c74 memsz 0x00001c74 flags rw-
    LOAD off    0x000146d8 vaddr 0x000346d8 paddr 0x000346d8 align 2**12
         filesz 0x00000000 memsz 0x00001170 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010868  00020230  00020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000358  00030a98  00030a98  00011a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c74  00030df0  00032a64  00011df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00001170  000346d8  000346d8  000146d8  2**2
                  ALLOC, SMALL_DATA
  6 .OCRAM        00000000  00035848  00035848  00013a64  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00013a64  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000f78  00000000  00000000  00013a88  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00024579  00000000  00000000  00014a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000095f3  00000000  00000000  00038f79  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000bb51  00000000  00000000  0004256c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000245c  00000000  00000000  0004e0c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003bcb  00000000  00000000  0005051c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001786c  00000000  00000000  000540e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0006b954  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018d0  00000000  00000000  0006b998  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007076e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00070771  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00070776  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00070777  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00070778  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00070781  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0007078a  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  00070793  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001c  00000000  00000000  00070797  2**0
                  CONTENTS, READONLY
 26 .jdi          00004917  00000000  00000000  000707b3  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000403d5  00000000  00000000  000750ca  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020230 l    d  .text	00000000 .text
00030a98 l    d  .rodata	00000000 .rodata
00030df0 l    d  .rwdata	00000000 .rwdata
000346d8 l    d  .bss	00000000 .bss
00035848 l    d  .OCRAM	00000000 .OCRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../UART_RXTX_bsp//obj/HAL/src/crt0.o
00020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 UART.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00030b26 l     O .rodata	00000010 zeroes.4404
000230a8 l     F .text	000000bc __sbprintf
00030b36 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000232b8 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00024e10 l     F .text	00000008 __fp_unlock
00024e24 l     F .text	0000019c __sinit.part.1
00024fc0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00030df0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00031234 l     O .rwdata	00000020 lc_ctype_charset
00031214 l     O .rwdata	00000020 lc_message_charset
00031254 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00030b68 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00028494 l     F .text	000000fc __sprint_r.part.0
00030c8c l     O .rodata	00000010 zeroes.4349
00029ad0 l     F .text	000000bc __sbprintf
00030c9c l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0002d964 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0002da78 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0002daa4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0002de38 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0002df20 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0002e00c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0002e1e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00032a58 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0002e48c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0002e5c8 l     F .text	00000034 alt_dev_reg
0003183c l     O .rwdata	00001060 JTAG_UART
0003289c l     O .rwdata	000000c4 UART_0
00032960 l     O .rwdata	000000c4 UART_1
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0002e8e0 l     F .text	0000020c altera_avalon_jtag_uart_irq
0002eaec l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0002f2e0 l     F .text	0000009c altera_avalon_uart_irq
0002f37c l     F .text	000000e4 altera_avalon_uart_rxirq
0002f460 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0002f5fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0002f814 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0002fca0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0002fefc l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0003005c l     F .text	0000003c alt_get_errno
00030098 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00034714 g     O .bss	00000004 alt_instruction_exception_handler
00027ad8 g     F .text	00000074 _mprec_log10
00027bc4 g     F .text	0000008c __any_on
0002a084 g     F .text	00000054 _isatty_r
00030b74 g     O .rodata	00000028 __mprec_tinytens
0002e124 g     F .text	0000007c alt_main
00020c44 g     F .text	000000c0 _puts_r
00035748 g     O .bss	00000100 alt_irq
0002a0d8 g     F .text	00000060 _lseek_r
000346e0 g     O .bss	00000002 TxHead_2
00032a64 g       *ABS*	00000000 __flash_rwdata_start
0002c33c g     F .text	00000088 .hidden __eqdf2
00035848 g       *ABS*	00000000 __alt_heap_start
00020c08 g     F .text	0000003c printf
0002a2f0 g     F .text	0000009c _wcrtomb_r
00028354 g     F .text	0000005c __sseek
00025170 g     F .text	00000010 __sinit
0002a198 g     F .text	00000140 __swbuf_r
00025c44 g     F .text	0000007c _setlocale_r
00024fc8 g     F .text	00000078 __sfmoreglue
000346de g     O .bss	00000002 RxTail_1
0002e1c4 g     F .text	00000024 __malloc_unlock
00026914 g     F .text	0000015c memmove
00025158 g     F .text	00000018 _cleanup
00026b98 g     F .text	000000a8 _Balloc
0002c3c4 g     F .text	000000dc .hidden __gtdf2
00030484 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
0002a028 g     F .text	0000005c _fstat_r
00034700 g     O .bss	00000004 errno
000282d0 g     F .text	00000008 __seofread
0003470c g     O .bss	00000004 alt_argv
0003aa24 g       *ABS*	00000000 _gp
0002e45c g     F .text	00000030 usleep
000316bc g     O .rwdata	00000180 alt_fd_list
000304a8 g     F .text	00000090 alt_find_dev
000267cc g     F .text	00000148 memcpy
00024e18 g     F .text	0000000c _cleanup_r
0002d77c g     F .text	000000dc .hidden __floatsidf
0002ffe0 g     F .text	0000007c alt_io_redirect
0002c4a0 g     F .text	000000f4 .hidden __ltdf2
00030a98 g       *ABS*	00000000 __DTOR_END__
00020d04 g     F .text	00000014 puts
0002fe60 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000281b4 g     F .text	00000074 __fpclassifyd
00027a34 g     F .text	000000a4 __ratio
00029ab4 g     F .text	0000001c __vfiprintf_internal
0002ece4 g     F .text	0000021c altera_avalon_jtag_uart_read
00020bd8 g     F .text	00000030 _printf_r
00020b1c g     F .text	00000064 .hidden __udivsi3
0002de74 g     F .text	000000ac isatty
00030bc4 g     O .rodata	000000c8 __mprec_tens
00025cc0 g     F .text	0000000c __locale_charset
000346fc g     O .bss	00000004 __malloc_top_pad
00032a2c g     O .rwdata	00000004 __mb_cur_max
00025cf0 g     F .text	0000000c _localeconv_r
00026fcc g     F .text	0000003c __i2b
000255f4 g     F .text	000004c8 __sfvwrite_r
00028228 g     F .text	00000054 _sbrk_r
0002a138 g     F .text	00000060 _read_r
00032a4c g     O .rwdata	00000004 alt_max_fd
00029d1c g     F .text	000000f0 _fclose_r
00024de0 g     F .text	00000030 fflush
000346f8 g     O .bss	00000004 __malloc_max_sbrked_mem
0002b0c0 g     F .text	000008ac .hidden __adddf3
00034748 g     O .bss	00000400 rx_buffer_2
00020334 g     F .text	00000118 IsrUart1
000277dc g     F .text	0000010c __b2d
0002aad4 g     F .text	000005c4 .hidden __umoddi3
0002e048 g     F .text	000000dc lseek
000207b0 g     F .text	0000011c PutUart2
00032a24 g     O .rwdata	00000004 _global_impure_ptr
00027c50 g     F .text	00000564 _realloc_r
00035848 g       *ABS*	00000000 __bss_end
0002dd48 g     F .text	000000f0 alt_iic_isr_register
0003037c g     F .text	00000108 alt_tick
0002a4d8 g     F .text	000005fc .hidden __udivdi3
00029f84 g     F .text	00000024 _fputwc_r
00030b9c g     O .rodata	00000028 __mprec_bigtens
00026db0 g     F .text	00000104 __s2b
0002d858 g     F .text	000000a8 .hidden __floatunsidf
0002751c g     F .text	00000060 __mcmp
0002f234 g     F .text	000000ac altera_avalon_uart_init
00025190 g     F .text	00000018 __fp_lock_all
0002dcfc g     F .text	0000004c alt_ic_irq_enabled
000302e0 g     F .text	0000009c alt_alarm_stop
00034704 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d4 alt_irq_handler
00031694 g     O .rwdata	00000028 alt_dev_null
0002fc80 g     F .text	00000020 alt_dcache_flush_all
00026eb4 g     F .text	00000068 __hi0bits
0002d6fc g     F .text	00000080 .hidden __fixdfsi
000205dc g     F .text	0000005c GetUart1
00032a64 g       *ABS*	00000000 __ram_rwdata_end
00032a44 g     O .rwdata	00000008 alt_dev_list
0002e4c8 g     F .text	00000100 write
00030df0 g       *ABS*	00000000 __ram_rodata_end
0002dae0 g     F .text	000000b8 fstat
0002c4a0 g     F .text	000000f4 .hidden __ledf2
00027294 g     F .text	00000140 __pow5mult
000285a8 g     F .text	0000150c ___vfiprintf_internal_r
000346f0 g     O .bss	00000004 __nlocale_changed
00020b80 g     F .text	00000058 .hidden __umodsi3
00035848 g       *ABS*	00000000 end
0002f850 g     F .text	000001ac altera_avalon_uart_write
0002e820 g     F .text	000000c0 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
000346e2 g     O .bss	00000002 TxTail_2
00030a98 g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
0002f184 g     F .text	00000060 altera_avalon_uart_write_fd
0002d900 g     F .text	00000064 .hidden __clzsi2
0002f1e4 g     F .text	00000050 altera_avalon_uart_close_fd
0002ef00 g     F .text	00000224 altera_avalon_jtag_uart_write
00025180 g     F .text	00000004 __sfp_lock_acquire
000266e8 g     F .text	000000e4 memchr
00020db0 g     F .text	000022dc ___vfprintf_internal_r
000252e4 g     F .text	00000310 _free_r
00025ccc g     F .text	00000010 __locale_mb_cur_max
000308e4 g     F .text	00000180 __call_exitprocs
000346ec g     O .bss	00000004 __mlocale_changed
00032a30 g     O .rwdata	00000004 __malloc_sbrk_base
00020230 g     F .text	0000003c _start
00034718 g     O .bss	00000004 _alt_tick_rate
000273d4 g     F .text	00000148 __lshift
0003471c g     O .bss	00000004 _alt_nticks
0002e224 g     F .text	00000104 read
0002e634 g     F .text	00000088 alt_sys_init
000307cc g     F .text	00000118 __register_exitproc
000346da g     O .bss	00000002 TxTail_1
00027008 g     F .text	0000028c __multiply
0002eb8c g     F .text	00000068 altera_avalon_jtag_uart_close
0002b098 g     F .text	00000028 .hidden __mulsi3
00030df0 g       *ABS*	00000000 __ram_rwdata_start
00030a98 g       *ABS*	00000000 __ram_rodata_start
00034720 g     O .bss	00000028 __malloc_current_mallinfo
000278e8 g     F .text	0000014c __d2b
0002e6bc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00030640 g     F .text	000000c4 alt_get_fd
0002fb28 g     F .text	00000158 alt_busy_sleep
00029bec g     F .text	00000054 _close_r
00030750 g     F .text	0000007c memcmp
0002e77c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00035848 g       *ABS*	00000000 __alt_stack_base
0002e7cc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00023164 g     F .text	00000154 __swsetup_r
0002b96c g     F .text	000009d0 .hidden __divdf3
00025040 g     F .text	00000118 __sfp
00027b4c g     F .text	00000078 __copybits
0003128c g     O .rwdata	00000408 __malloc_av_
0002518c g     F .text	00000004 __sinit_lock_release
0002c594 g     F .text	0000086c .hidden __muldf3
0002827c g     F .text	00000054 __sread
00030538 g     F .text	00000108 alt_find_file
0002fcdc g     F .text	000000a4 alt_dev_llist_insert
0002e1a0 g     F .text	00000024 __malloc_lock
0002e3ac g     F .text	000000b0 sbrk
00024d84 g     F .text	0000005c _fflush_r
00029c40 g     F .text	000000dc _calloc_r
000346d8 g       *ABS*	00000000 __bss_start
00026a70 g     F .text	00000128 memset
00034b48 g     O .bss	00000400 tx_buffer_2
00020960 g     F .text	000000c4 main
00034710 g     O .bss	00000004 alt_envp
000346f4 g     O .bss	00000004 __malloc_max_total_mem
0002e71c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0002a2d8 g     F .text	00000018 __swbuf
00034f48 g     O .bss	00000400 rx_buffer_1
000346d8 g     O .bss	00000002 TxHead_1
000283b0 g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
00029e0c g     F .text	00000014 fclose
000234e0 g     F .text	00001688 _dtoa_r
00025edc g     F .text	0000080c _malloc_r
0002a44c g     F .text	00000030 __ascii_wctomb
000346e4 g     O .bss	00000002 RxHead_2
00032a50 g     O .rwdata	00000004 alt_errno
00025abc g     F .text	000000c4 _fwalk
00020a24 g     F .text	00000084 .hidden __divsi3
000251c0 g     F .text	00000124 _malloc_trim_r
00030a98 g       *ABS*	00000000 __CTOR_END__
000346dc g     O .bss	00000002 RxHead_1
000283b8 g     F .text	000000dc strcmp
00030a98 g       *ABS*	00000000 __flash_rodata_start
00030a98 g       *ABS*	00000000 __DTOR_LIST__
000202d0 g     F .text	00000064 InitUart2
0002c33c g     F .text	00000088 .hidden __nedf2
0002e5fc g     F .text	00000038 alt_irq_init
0002e328 g     F .text	00000084 alt_release_fd
00030cac g     O .rodata	00000100 .hidden __clz_tab
000346e8 g     O .bss	00000004 _PathLocale
00035348 g     O .bss	00000400 tx_buffer_1
00030704 g     F .text	00000014 atexit
00029b8c g     F .text	00000060 _write_r
000346e6 g     O .bss	00000002 RxTail_2
00025cfc g     F .text	00000018 setlocale
00032a28 g     O .rwdata	00000004 _impure_ptr
00034708 g     O .bss	00000004 alt_argc
00024b68 g     F .text	0000021c __sflush_r
0002fde0 g     F .text	00000060 _do_dtors
000208cc g     F .text	00000094 InitUart
00025ce8 g     F .text	00000008 __locale_cjk_lang
00020020 g       .exceptions	00000000 alt_irq_entry
00027778 g     F .text	00000064 __ulp
000251a8 g     F .text	00000018 __fp_unlock_all
00020638 g     F .text	0000005c GetUart2
00032a3c g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00025d14 g     F .text	0000000c localeconv
0002db98 g     F .text	00000050 alt_ic_isr_register
00032a64 g       *ABS*	00000000 _edata
0002f124 g     F .text	00000060 altera_avalon_uart_read_fd
00035848 g       *ABS*	00000000 _end
00029e20 g     F .text	00000164 __fputwc
00020230 g       *ABS*	00000000 __ram_exceptions_end
0002026c g     F .text	00000064 InitUart1
0002ebf4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0002dc70 g     F .text	0000008c alt_ic_irq_disable
000282d8 g     F .text	0000007c __swrite
00032a34 g     O .rwdata	00000004 __malloc_trim_threshold
00025cdc g     F .text	0000000c __locale_msgcharset
00030718 g     F .text	00000038 exit
00025b80 g     F .text	000000c4 _fwalk_reent
0002757c g     F .text	000001fc __mdiff
00020aa8 g     F .text	00000074 .hidden __modsi3
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00025184 g     F .text	00000004 __sfp_lock_release
00020694 g     F .text	0000011c PutUart1
0002f5a8 g     F .text	00000054 altera_avalon_uart_close
00030a64 g     F .text	00000034 _exit
0002f9fc g     F .text	0000012c alt_alarm_start
00025d20 g     F .text	000001bc __smakebuf_r
00020d18 g     F .text	00000098 strlen
00020564 g     F .text	0000003c EmptyUart1
00030184 g     F .text	0000015c open
0002c3c4 g     F .text	000000dc .hidden __gedf2
00032a38 g     O .rwdata	00000004 __wctomb
00028590 g     F .text	00000018 __sprint_r
0002fe40 g     F .text	00000020 alt_icache_flush_all
00032a54 g     O .rwdata	00000004 alt_priority_mask
0002dbe8 g     F .text	00000088 alt_ic_irq_enable
0002308c g     F .text	0000001c __vfprintf_internal
0002f638 g     F .text	000001dc altera_avalon_uart_read
0002a47c g     F .text	0000005c _wctomb_r
0002ce00 g     F .text	000008fc .hidden __subdf3
00026f1c g     F .text	000000b0 __lo0bits
00032a5c g     O .rwdata	00000008 alt_alarm_list
0002fd80 g     F .text	00000060 _do_ctors
0002a38c g     F .text	000000c0 wcrtomb
0002d9a0 g     F .text	000000d8 close
000205a0 g     F .text	0000003c EmptyUart2
0002044c g     F .text	00000118 IsrUart2
0002df88 g     F .text	00000084 alt_load
00020000 g       *ABS*	00000000 __alt_mem_OCRAM
00029fa8 g     F .text	00000080 fputwc
00025188 g     F .text	00000004 __sinit_lock_acquire
00026c68 g     F .text	00000148 __multadd
00026c40 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408c14 	ori	at,at,560
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000f4 	movhi	r2,3
   20140:	1095d204 	addi	r2,r2,22344
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000f4 	movhi	r2,3
   20158:	1095d204 	addi	r2,r2,22344
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201e4:	00bfffc4 	movi	r2,-1
   201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201f0:	d0a73c17 	ldw	r2,-25360(gp)
   201f4:	10000726 	beq	r2,zero,20214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f8:	d0a73c17 	ldw	r2,-25360(gp)
   201fc:	e0fffd17 	ldw	r3,-12(fp)
   20200:	e1bffe17 	ldw	r6,-8(fp)
   20204:	e17fff17 	ldw	r5,-4(fp)
   20208:	1809883a 	mov	r4,r3
   2020c:	103ee83a 	callr	r2
   20210:	00000206 	br	2021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20218:	0005883a 	mov	r2,zero
}
   2021c:	e037883a 	mov	sp,fp
   20220:	dfc00117 	ldw	ra,4(sp)
   20224:	df000017 	ldw	fp,0(sp)
   20228:	dec00204 	addi	sp,sp,8
   2022c:	f800283a 	ret

Disassembly of section .text:

00020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20230:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   20238:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   2023c:	d6aa8914 	ori	gp,gp,43556
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20240:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
   20244:	1091b614 	ori	r2,r2,18136

    movhi r3, %hi(__bss_end)
   20248:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   2024c:	18d61214 	ori	r3,r3,22600

    beq r2, r3, 1f
   20250:	10c00326 	beq	r2,r3,20260 <_start+0x30>

0:
    stw zero, (r2)
   20254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2025c:	10fffd36 	bltu	r2,r3,20254 <__alt_data_end+0xfffe0254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20260:	002df880 	call	2df88 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20264:	002e1240 	call	2e124 <alt_main>

00020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20268:	003fff06 	br	20268 <__alt_data_end+0xfffe0268>

0002026c <InitUart1>:
unsigned char rx_buffer_2[RX_BUFFER_SIZE_2];


// initialize UART 1
void InitUart1(unsigned int BaudRate)
{
   2026c:	defffc04 	addi	sp,sp,-16
   20270:	dfc00315 	stw	ra,12(sp)
   20274:	df000215 	stw	fp,8(sp)
   20278:	df000204 	addi	fp,sp,8
   2027c:	e13fff15 	stw	r4,-4(fp)
unsigned int divisor;

divisor = (ALT_CPU_FREQ/BaudRate) +1;
   20280:	e17fff17 	ldw	r5,-4(fp)
   20284:	0100bef4 	movhi	r4,763
   20288:	213c2004 	addi	r4,r4,-3968
   2028c:	0020b1c0 	call	20b1c <__udivsi3>
   20290:	10800044 	addi	r2,r2,1
   20294:	e0bffe15 	stw	r2,-8(fp)
IOWR_ALTERA_AVALON_UART_DIVISOR(UART_0_BASE, divisor);
   20298:	e0fffe17 	ldw	r3,-8(fp)
   2029c:	00800134 	movhi	r2,4
   202a0:	10840c04 	addi	r2,r2,4144
   202a4:	10c00035 	stwio	r3,0(r2)
IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
   202a8:	00c02004 	movi	r3,128
   202ac:	00800134 	movhi	r2,4
   202b0:	10840b04 	addi	r2,r2,4140
   202b4:	10c00035 	stwio	r3,0(r2)
}
   202b8:	0001883a 	nop
   202bc:	e037883a 	mov	sp,fp
   202c0:	dfc00117 	ldw	ra,4(sp)
   202c4:	df000017 	ldw	fp,0(sp)
   202c8:	dec00204 	addi	sp,sp,8
   202cc:	f800283a 	ret

000202d0 <InitUart2>:

// initialize UART 2
void InitUart2(unsigned int BaudRate)
{
   202d0:	defffc04 	addi	sp,sp,-16
   202d4:	dfc00315 	stw	ra,12(sp)
   202d8:	df000215 	stw	fp,8(sp)
   202dc:	df000204 	addi	fp,sp,8
   202e0:	e13fff15 	stw	r4,-4(fp)
unsigned int divisor;

divisor = (ALT_CPU_FREQ/BaudRate) +1;
   202e4:	e17fff17 	ldw	r5,-4(fp)
   202e8:	0100bef4 	movhi	r4,763
   202ec:	213c2004 	addi	r4,r4,-3968
   202f0:	0020b1c0 	call	20b1c <__udivsi3>
   202f4:	10800044 	addi	r2,r2,1
   202f8:	e0bffe15 	stw	r2,-8(fp)
IOWR_ALTERA_AVALON_UART_DIVISOR(UART_0_BASE, divisor);
   202fc:	e0fffe17 	ldw	r3,-8(fp)
   20300:	00800134 	movhi	r2,4
   20304:	10840c04 	addi	r2,r2,4144
   20308:	10c00035 	stwio	r3,0(r2)
IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
   2030c:	00c02004 	movi	r3,128
   20310:	00800134 	movhi	r2,4
   20314:	10840b04 	addi	r2,r2,4140
   20318:	10c00035 	stwio	r3,0(r2)
}
   2031c:	0001883a 	nop
   20320:	e037883a 	mov	sp,fp
   20324:	dfc00117 	ldw	ra,4(sp)
   20328:	df000017 	ldw	fp,0(sp)
   2032c:	dec00204 	addi	sp,sp,8
   20330:	f800283a 	ret

00020334 <IsrUart1>:



// Interrupt Service Routine for UART 1
void IsrUart1(void* context, unsigned int id)
{
   20334:	defffc04 	addi	sp,sp,-16
   20338:	df000315 	stw	fp,12(sp)
   2033c:	df000304 	addi	fp,sp,12
   20340:	e13ffe15 	stw	r4,-8(fp)
   20344:	e17fff15 	stw	r5,-4(fp)
int sr;

sr = IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE);
   20348:	00800134 	movhi	r2,4
   2034c:	10840a04 	addi	r2,r2,4136
   20350:	10800037 	ldwio	r2,0(r2)
   20354:	e0bffd15 	stw	r2,-12(fp)
if(sr & ALTERA_AVALON_UART_STATUS_RRDY_MSK);
{
rx_buffer_1[RxHead_1] = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
   20358:	d0a72e0b 	ldhu	r2,-25416(gp)
   2035c:	10ffffcc 	andi	r3,r2,65535
   20360:	00800134 	movhi	r2,4
   20364:	10840804 	addi	r2,r2,4128
   20368:	10800037 	ldwio	r2,0(r2)
   2036c:	1009883a 	mov	r4,r2
   20370:	008000f4 	movhi	r2,3
   20374:	1093d204 	addi	r2,r2,20296
   20378:	10c5883a 	add	r2,r2,r3
   2037c:	11000005 	stb	r4,0(r2)
IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE, 0);
   20380:	0007883a 	mov	r3,zero
   20384:	00800134 	movhi	r2,4
   20388:	10840a04 	addi	r2,r2,4136
   2038c:	10c00035 	stwio	r3,0(r2)
if (++RxHead_1 > (RX_BUFFER_SIZE_1-1)) RxHead_1 = 0;
   20390:	d0a72e0b 	ldhu	r2,-25416(gp)
   20394:	10800044 	addi	r2,r2,1
   20398:	d0a72e0d 	sth	r2,-25416(gp)
   2039c:	d0a72e0b 	ldhu	r2,-25416(gp)
   203a0:	10bfffcc 	andi	r2,r2,65535
   203a4:	10810030 	cmpltui	r2,r2,1024
   203a8:	1000011e 	bne	r2,zero,203b0 <IsrUart1+0x7c>
   203ac:	d0272e0d 	sth	zero,-25416(gp)
}
if(sr & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
   203b0:	e0bffd17 	ldw	r2,-12(fp)
   203b4:	1080100c 	andi	r2,r2,64
   203b8:	10001f26 	beq	r2,zero,20438 <IsrUart1+0x104>
{
if(IORD_ALTERA_AVALON_UART_CONTROL(UART_0_BASE) & ALTERA_AVALON_UART_CONTROL_TRDY_MSK);
   203bc:	00800134 	movhi	r2,4
   203c0:	10840b04 	addi	r2,r2,4140
   203c4:	10800037 	ldwio	r2,0(r2)
{
if (TxTail_1 != TxHead_1)
   203c8:	d0e72d8b 	ldhu	r3,-25418(gp)
   203cc:	d0a72d0b 	ldhu	r2,-25420(gp)
   203d0:	18ffffcc 	andi	r3,r3,65535
   203d4:	10bfffcc 	andi	r2,r2,65535
   203d8:	18801326 	beq	r3,r2,20428 <IsrUart1+0xf4>
{
IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, tx_buffer_1[TxTail_1]);
   203dc:	d0a72d8b 	ldhu	r2,-25418(gp)
   203e0:	10ffffcc 	andi	r3,r2,65535
   203e4:	008000f4 	movhi	r2,3
   203e8:	1094d204 	addi	r2,r2,21320
   203ec:	10c5883a 	add	r2,r2,r3
   203f0:	10800003 	ldbu	r2,0(r2)
   203f4:	10c03fcc 	andi	r3,r2,255
   203f8:	00800134 	movhi	r2,4
   203fc:	10840904 	addi	r2,r2,4132
   20400:	10c00035 	stwio	r3,0(r2)
if (++TxTail_1 > (TX_BUFFER_SIZE_1 -1)) TxTail_1 = 0;
   20404:	d0a72d8b 	ldhu	r2,-25418(gp)
   20408:	10800044 	addi	r2,r2,1
   2040c:	d0a72d8d 	sth	r2,-25418(gp)
   20410:	d0a72d8b 	ldhu	r2,-25418(gp)
   20414:	10bfffcc 	andi	r2,r2,65535
   20418:	10810030 	cmpltui	r2,r2,1024
   2041c:	1000061e 	bne	r2,zero,20438 <IsrUart1+0x104>
   20420:	d0272d8d 	sth	zero,-25418(gp)
}
else IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
}
}
}
   20424:	00000406 	br	20438 <IsrUart1+0x104>
if (TxTail_1 != TxHead_1)
{
IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, tx_buffer_1[TxTail_1]);
if (++TxTail_1 > (TX_BUFFER_SIZE_1 -1)) TxTail_1 = 0;
}
else IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
   20428:	00c02004 	movi	r3,128
   2042c:	00800134 	movhi	r2,4
   20430:	10840b04 	addi	r2,r2,4140
   20434:	10c00035 	stwio	r3,0(r2)
}
}
}
   20438:	0001883a 	nop
   2043c:	e037883a 	mov	sp,fp
   20440:	df000017 	ldw	fp,0(sp)
   20444:	dec00104 	addi	sp,sp,4
   20448:	f800283a 	ret

0002044c <IsrUart2>:


// Interrupt Service Routine for UART 2
void IsrUart2(void* context, unsigned int id)
{
   2044c:	defffc04 	addi	sp,sp,-16
   20450:	df000315 	stw	fp,12(sp)
   20454:	df000304 	addi	fp,sp,12
   20458:	e13ffe15 	stw	r4,-8(fp)
   2045c:	e17fff15 	stw	r5,-4(fp)
int sr;

sr = IORD_ALTERA_AVALON_UART_STATUS(UART_1_BASE);
   20460:	00800134 	movhi	r2,4
   20464:	10840204 	addi	r2,r2,4104
   20468:	10800037 	ldwio	r2,0(r2)
   2046c:	e0bffd15 	stw	r2,-12(fp)
if(sr & ALTERA_AVALON_UART_STATUS_RRDY_MSK);
{
rx_buffer_2[RxHead_2] = IORD_ALTERA_AVALON_UART_RXDATA(UART_1_BASE);
   20470:	d0a7300b 	ldhu	r2,-25408(gp)
   20474:	10ffffcc 	andi	r3,r2,65535
   20478:	00800134 	movhi	r2,4
   2047c:	10840004 	addi	r2,r2,4096
   20480:	10800037 	ldwio	r2,0(r2)
   20484:	1009883a 	mov	r4,r2
   20488:	008000f4 	movhi	r2,3
   2048c:	1091d204 	addi	r2,r2,18248
   20490:	10c5883a 	add	r2,r2,r3
   20494:	11000005 	stb	r4,0(r2)
IOWR_ALTERA_AVALON_UART_STATUS(UART_1_BASE, 0);
   20498:	0007883a 	mov	r3,zero
   2049c:	00800134 	movhi	r2,4
   204a0:	10840204 	addi	r2,r2,4104
   204a4:	10c00035 	stwio	r3,0(r2)
if (++RxHead_2 > (RX_BUFFER_SIZE_2-1)) RxHead_2 = 0;
   204a8:	d0a7300b 	ldhu	r2,-25408(gp)
   204ac:	10800044 	addi	r2,r2,1
   204b0:	d0a7300d 	sth	r2,-25408(gp)
   204b4:	d0a7300b 	ldhu	r2,-25408(gp)
   204b8:	10bfffcc 	andi	r2,r2,65535
   204bc:	10810030 	cmpltui	r2,r2,1024
   204c0:	1000011e 	bne	r2,zero,204c8 <IsrUart2+0x7c>
   204c4:	d027300d 	sth	zero,-25408(gp)
}
if(sr & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
   204c8:	e0bffd17 	ldw	r2,-12(fp)
   204cc:	1080100c 	andi	r2,r2,64
   204d0:	10001f26 	beq	r2,zero,20550 <IsrUart2+0x104>
{
if(IORD_ALTERA_AVALON_UART_CONTROL(UART_1_BASE) & ALTERA_AVALON_UART_CONTROL_TRDY_MSK);
   204d4:	00800134 	movhi	r2,4
   204d8:	10840304 	addi	r2,r2,4108
   204dc:	10800037 	ldwio	r2,0(r2)
{
if (TxTail_2 != TxHead_2)
   204e0:	d0e72f8b 	ldhu	r3,-25410(gp)
   204e4:	d0a72f0b 	ldhu	r2,-25412(gp)
   204e8:	18ffffcc 	andi	r3,r3,65535
   204ec:	10bfffcc 	andi	r2,r2,65535
   204f0:	18801326 	beq	r3,r2,20540 <IsrUart2+0xf4>
{
IOWR_ALTERA_AVALON_UART_TXDATA(UART_1_BASE, tx_buffer_2[TxTail_2]);
   204f4:	d0a72f8b 	ldhu	r2,-25410(gp)
   204f8:	10ffffcc 	andi	r3,r2,65535
   204fc:	008000f4 	movhi	r2,3
   20500:	1092d204 	addi	r2,r2,19272
   20504:	10c5883a 	add	r2,r2,r3
   20508:	10800003 	ldbu	r2,0(r2)
   2050c:	10c03fcc 	andi	r3,r2,255
   20510:	00800134 	movhi	r2,4
   20514:	10840104 	addi	r2,r2,4100
   20518:	10c00035 	stwio	r3,0(r2)
if (++TxTail_2 > (TX_BUFFER_SIZE_2 -1)) TxTail_2 = 0;
   2051c:	d0a72f8b 	ldhu	r2,-25410(gp)
   20520:	10800044 	addi	r2,r2,1
   20524:	d0a72f8d 	sth	r2,-25410(gp)
   20528:	d0a72f8b 	ldhu	r2,-25410(gp)
   2052c:	10bfffcc 	andi	r2,r2,65535
   20530:	10810030 	cmpltui	r2,r2,1024
   20534:	1000061e 	bne	r2,zero,20550 <IsrUart2+0x104>
   20538:	d0272f8d 	sth	zero,-25410(gp)
}
else IOWR_ALTERA_AVALON_UART_CONTROL(UART_1_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
}
}
}
   2053c:	00000406 	br	20550 <IsrUart2+0x104>
if (TxTail_2 != TxHead_2)
{
IOWR_ALTERA_AVALON_UART_TXDATA(UART_1_BASE, tx_buffer_2[TxTail_2]);
if (++TxTail_2 > (TX_BUFFER_SIZE_2 -1)) TxTail_2 = 0;
}
else IOWR_ALTERA_AVALON_UART_CONTROL(UART_1_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
   20540:	00c02004 	movi	r3,128
   20544:	00800134 	movhi	r2,4
   20548:	10840304 	addi	r2,r2,4108
   2054c:	10c00035 	stwio	r3,0(r2)
}
}
}
   20550:	0001883a 	nop
   20554:	e037883a 	mov	sp,fp
   20558:	df000017 	ldw	fp,0(sp)
   2055c:	dec00104 	addi	sp,sp,4
   20560:	f800283a 	ret

00020564 <EmptyUart1>:


// Check if UART 1 registers have data
unsigned char EmptyUart1()
{
   20564:	deffff04 	addi	sp,sp,-4
   20568:	df000015 	stw	fp,0(sp)
   2056c:	d839883a 	mov	fp,sp
if(RxHead_1 == RxTail_1) return 1;
   20570:	d0e72e0b 	ldhu	r3,-25416(gp)
   20574:	d0a72e8b 	ldhu	r2,-25414(gp)
   20578:	18ffffcc 	andi	r3,r3,65535
   2057c:	10bfffcc 	andi	r2,r2,65535
   20580:	1880021e 	bne	r3,r2,2058c <EmptyUart1+0x28>
   20584:	00800044 	movi	r2,1
   20588:	00000106 	br	20590 <EmptyUart1+0x2c>
return 0;
   2058c:	0005883a 	mov	r2,zero
}
   20590:	e037883a 	mov	sp,fp
   20594:	df000017 	ldw	fp,0(sp)
   20598:	dec00104 	addi	sp,sp,4
   2059c:	f800283a 	ret

000205a0 <EmptyUart2>:

// Check if UART 2 registers have data
unsigned char EmptyUart2()
{
   205a0:	deffff04 	addi	sp,sp,-4
   205a4:	df000015 	stw	fp,0(sp)
   205a8:	d839883a 	mov	fp,sp
if(RxHead_2 == RxTail_2) return 1;
   205ac:	d0e7300b 	ldhu	r3,-25408(gp)
   205b0:	d0a7308b 	ldhu	r2,-25406(gp)
   205b4:	18ffffcc 	andi	r3,r3,65535
   205b8:	10bfffcc 	andi	r2,r2,65535
   205bc:	1880021e 	bne	r3,r2,205c8 <EmptyUart2+0x28>
   205c0:	00800044 	movi	r2,1
   205c4:	00000106 	br	205cc <EmptyUart2+0x2c>
return 0;
   205c8:	0005883a 	mov	r2,zero
}
   205cc:	e037883a 	mov	sp,fp
   205d0:	df000017 	ldw	fp,0(sp)
   205d4:	dec00104 	addi	sp,sp,4
   205d8:	f800283a 	ret

000205dc <GetUart1>:


// Collect data received by UART 1
unsigned char GetUart1(void)
{
   205dc:	defffe04 	addi	sp,sp,-8
   205e0:	df000115 	stw	fp,4(sp)
   205e4:	df000104 	addi	fp,sp,4
unsigned char rxChar;

/* buffer is empty */

rxChar=rx_buffer_1[RxTail_1];
   205e8:	d0a72e8b 	ldhu	r2,-25414(gp)
   205ec:	10ffffcc 	andi	r3,r2,65535
   205f0:	008000f4 	movhi	r2,3
   205f4:	1093d204 	addi	r2,r2,20296
   205f8:	10c5883a 	add	r2,r2,r3
   205fc:	10800003 	ldbu	r2,0(r2)
   20600:	e0bfff05 	stb	r2,-4(fp)
if (++RxTail_1 > (RX_BUFFER_SIZE_1-1)) RxTail_1=0;
   20604:	d0a72e8b 	ldhu	r2,-25414(gp)
   20608:	10800044 	addi	r2,r2,1
   2060c:	d0a72e8d 	sth	r2,-25414(gp)
   20610:	d0a72e8b 	ldhu	r2,-25414(gp)
   20614:	10bfffcc 	andi	r2,r2,65535
   20618:	10810030 	cmpltui	r2,r2,1024
   2061c:	1000011e 	bne	r2,zero,20624 <GetUart1+0x48>
   20620:	d0272e8d 	sth	zero,-25414(gp)

return rxChar;
   20624:	e0bfff03 	ldbu	r2,-4(fp)
}
   20628:	e037883a 	mov	sp,fp
   2062c:	df000017 	ldw	fp,0(sp)
   20630:	dec00104 	addi	sp,sp,4
   20634:	f800283a 	ret

00020638 <GetUart2>:


// Collect data received by UART 2
unsigned char GetUart2(void)
{
   20638:	defffe04 	addi	sp,sp,-8
   2063c:	df000115 	stw	fp,4(sp)
   20640:	df000104 	addi	fp,sp,4
unsigned char rxChar;

/* buffer is empty */

rxChar=rx_buffer_2[RxTail_2];
   20644:	d0a7308b 	ldhu	r2,-25406(gp)
   20648:	10ffffcc 	andi	r3,r2,65535
   2064c:	008000f4 	movhi	r2,3
   20650:	1091d204 	addi	r2,r2,18248
   20654:	10c5883a 	add	r2,r2,r3
   20658:	10800003 	ldbu	r2,0(r2)
   2065c:	e0bfff05 	stb	r2,-4(fp)
if (++RxTail_2 > (RX_BUFFER_SIZE_2-1)) RxTail_2=0;
   20660:	d0a7308b 	ldhu	r2,-25406(gp)
   20664:	10800044 	addi	r2,r2,1
   20668:	d0a7308d 	sth	r2,-25406(gp)
   2066c:	d0a7308b 	ldhu	r2,-25406(gp)
   20670:	10bfffcc 	andi	r2,r2,65535
   20674:	10810030 	cmpltui	r2,r2,1024
   20678:	1000011e 	bne	r2,zero,20680 <GetUart2+0x48>
   2067c:	d027308d 	sth	zero,-25406(gp)

return rxChar;
   20680:	e0bfff03 	ldbu	r2,-4(fp)
}
   20684:	e037883a 	mov	sp,fp
   20688:	df000017 	ldw	fp,0(sp)
   2068c:	dec00104 	addi	sp,sp,4
   20690:	f800283a 	ret

00020694 <PutUart1>:


//Send data using UART 1
unsigned char PutUart1(unsigned char in_char)
{
   20694:	defffc04 	addi	sp,sp,-16
   20698:	df000315 	stw	fp,12(sp)
   2069c:	df000304 	addi	fp,sp,12
   206a0:	2005883a 	mov	r2,r4
   206a4:	e0bfff05 	stb	r2,-4(fp)
unsigned short size;
unsigned int z;

z = IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK;
   206a8:	00800134 	movhi	r2,4
   206ac:	10840a04 	addi	r2,r2,4136
   206b0:	10800037 	ldwio	r2,0(r2)
   206b4:	1080100c 	andi	r2,r2,64
   206b8:	e0bffe15 	stw	r2,-8(fp)

if ((TxHead_1==TxTail_1) && z) IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, in_char);
   206bc:	d0e72d0b 	ldhu	r3,-25420(gp)
   206c0:	d0a72d8b 	ldhu	r2,-25418(gp)
   206c4:	18ffffcc 	andi	r3,r3,65535
   206c8:	10bfffcc 	andi	r2,r2,65535
   206cc:	1880071e 	bne	r3,r2,206ec <PutUart1+0x58>
   206d0:	e0bffe17 	ldw	r2,-8(fp)
   206d4:	10000526 	beq	r2,zero,206ec <PutUart1+0x58>
   206d8:	e0ffff03 	ldbu	r3,-4(fp)
   206dc:	00800134 	movhi	r2,4
   206e0:	10840904 	addi	r2,r2,4132
   206e4:	10c00035 	stwio	r3,0(r2)
   206e8:	00002c06 	br	2079c <PutUart1+0x108>
else
{
if (TxHead_1 >= TxTail_1) size = TxHead_1 - TxTail_1;
   206ec:	d0e72d0b 	ldhu	r3,-25420(gp)
   206f0:	d0a72d8b 	ldhu	r2,-25418(gp)
   206f4:	18ffffcc 	andi	r3,r3,65535
   206f8:	10bfffcc 	andi	r2,r2,65535
   206fc:	18800536 	bltu	r3,r2,20714 <PutUart1+0x80>
   20700:	d0e72d0b 	ldhu	r3,-25420(gp)
   20704:	d0a72d8b 	ldhu	r2,-25418(gp)
   20708:	1885c83a 	sub	r2,r3,r2
   2070c:	e0bffd0d 	sth	r2,-12(fp)
   20710:	00000506 	br	20728 <PutUart1+0x94>
else size = ((TX_BUFFER_SIZE_1-1) - TxTail_1) + TxHead_1;
   20714:	d0e72d0b 	ldhu	r3,-25420(gp)
   20718:	d0a72d8b 	ldhu	r2,-25418(gp)
   2071c:	1885c83a 	sub	r2,r3,r2
   20720:	1080ffc4 	addi	r2,r2,1023
   20724:	e0bffd0d 	sth	r2,-12(fp)
if (size > (TX_BUFFER_SIZE_1 - 3)) return (-1);
   20728:	e0bffd0b 	ldhu	r2,-12(fp)
   2072c:	1080ffb0 	cmpltui	r2,r2,1022
   20730:	1000021e 	bne	r2,zero,2073c <PutUart1+0xa8>
   20734:	00bfffc4 	movi	r2,-1
   20738:	00001906 	br	207a0 <PutUart1+0x10c>
tx_buffer_1[TxHead_1] = in_char;
   2073c:	d0a72d0b 	ldhu	r2,-25420(gp)
   20740:	10ffffcc 	andi	r3,r2,65535
   20744:	008000f4 	movhi	r2,3
   20748:	1094d204 	addi	r2,r2,21320
   2074c:	10c5883a 	add	r2,r2,r3
   20750:	e0ffff03 	ldbu	r3,-4(fp)
   20754:	10c00005 	stb	r3,0(r2)
if (++TxHead_1 > (TX_BUFFER_SIZE_1-1)) TxHead_1 = 0;
   20758:	d0a72d0b 	ldhu	r2,-25420(gp)
   2075c:	10800044 	addi	r2,r2,1
   20760:	d0a72d0d 	sth	r2,-25420(gp)
   20764:	d0a72d0b 	ldhu	r2,-25420(gp)
   20768:	10bfffcc 	andi	r2,r2,65535
   2076c:	10810030 	cmpltui	r2,r2,1024
   20770:	1000011e 	bne	r2,zero,20778 <PutUart1+0xe4>
   20774:	d0272d0d 	sth	zero,-25420(gp)
z = IORD_ALTERA_AVALON_UART_CONTROL(UART_0_BASE) | ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   20778:	00800134 	movhi	r2,4
   2077c:	10840b04 	addi	r2,r2,4140
   20780:	10800037 	ldwio	r2,0(r2)
   20784:	10801014 	ori	r2,r2,64
   20788:	e0bffe15 	stw	r2,-8(fp)
IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, z);
   2078c:	e0fffe17 	ldw	r3,-8(fp)
   20790:	00800134 	movhi	r2,4
   20794:	10840b04 	addi	r2,r2,4140
   20798:	10c00035 	stwio	r3,0(r2)
}
return(1);
   2079c:	00800044 	movi	r2,1
}
   207a0:	e037883a 	mov	sp,fp
   207a4:	df000017 	ldw	fp,0(sp)
   207a8:	dec00104 	addi	sp,sp,4
   207ac:	f800283a 	ret

000207b0 <PutUart2>:


//Send data using UART 2
unsigned char PutUart2(unsigned char in_char)
{
   207b0:	defffc04 	addi	sp,sp,-16
   207b4:	df000315 	stw	fp,12(sp)
   207b8:	df000304 	addi	fp,sp,12
   207bc:	2005883a 	mov	r2,r4
   207c0:	e0bfff05 	stb	r2,-4(fp)
unsigned short size;
unsigned int z;

z = IORD_ALTERA_AVALON_UART_STATUS(UART_1_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK;
   207c4:	00800134 	movhi	r2,4
   207c8:	10840204 	addi	r2,r2,4104
   207cc:	10800037 	ldwio	r2,0(r2)
   207d0:	1080100c 	andi	r2,r2,64
   207d4:	e0bffe15 	stw	r2,-8(fp)

if ((TxHead_2==TxTail_2) && z) IOWR_ALTERA_AVALON_UART_TXDATA(UART_1_BASE, in_char);
   207d8:	d0e72f0b 	ldhu	r3,-25412(gp)
   207dc:	d0a72f8b 	ldhu	r2,-25410(gp)
   207e0:	18ffffcc 	andi	r3,r3,65535
   207e4:	10bfffcc 	andi	r2,r2,65535
   207e8:	1880071e 	bne	r3,r2,20808 <PutUart2+0x58>
   207ec:	e0bffe17 	ldw	r2,-8(fp)
   207f0:	10000526 	beq	r2,zero,20808 <PutUart2+0x58>
   207f4:	e0ffff03 	ldbu	r3,-4(fp)
   207f8:	00800134 	movhi	r2,4
   207fc:	10840104 	addi	r2,r2,4100
   20800:	10c00035 	stwio	r3,0(r2)
   20804:	00002c06 	br	208b8 <PutUart2+0x108>
else
{
if (TxHead_2 >= TxTail_2) size = TxHead_2 - TxTail_2;
   20808:	d0e72f0b 	ldhu	r3,-25412(gp)
   2080c:	d0a72f8b 	ldhu	r2,-25410(gp)
   20810:	18ffffcc 	andi	r3,r3,65535
   20814:	10bfffcc 	andi	r2,r2,65535
   20818:	18800536 	bltu	r3,r2,20830 <PutUart2+0x80>
   2081c:	d0e72f0b 	ldhu	r3,-25412(gp)
   20820:	d0a72f8b 	ldhu	r2,-25410(gp)
   20824:	1885c83a 	sub	r2,r3,r2
   20828:	e0bffd0d 	sth	r2,-12(fp)
   2082c:	00000506 	br	20844 <PutUart2+0x94>
else size = ((TX_BUFFER_SIZE_2-1) - TxTail_2) + TxHead_2;
   20830:	d0e72f0b 	ldhu	r3,-25412(gp)
   20834:	d0a72f8b 	ldhu	r2,-25410(gp)
   20838:	1885c83a 	sub	r2,r3,r2
   2083c:	1080ffc4 	addi	r2,r2,1023
   20840:	e0bffd0d 	sth	r2,-12(fp)
if (size > (TX_BUFFER_SIZE_2 - 3)) return (-1);
   20844:	e0bffd0b 	ldhu	r2,-12(fp)
   20848:	1080ffb0 	cmpltui	r2,r2,1022
   2084c:	1000021e 	bne	r2,zero,20858 <PutUart2+0xa8>
   20850:	00bfffc4 	movi	r2,-1
   20854:	00001906 	br	208bc <PutUart2+0x10c>
tx_buffer_2[TxHead_2] = in_char;
   20858:	d0a72f0b 	ldhu	r2,-25412(gp)
   2085c:	10ffffcc 	andi	r3,r2,65535
   20860:	008000f4 	movhi	r2,3
   20864:	1092d204 	addi	r2,r2,19272
   20868:	10c5883a 	add	r2,r2,r3
   2086c:	e0ffff03 	ldbu	r3,-4(fp)
   20870:	10c00005 	stb	r3,0(r2)
if (++TxHead_2 > (TX_BUFFER_SIZE_2-1)) TxHead_2 = 0;
   20874:	d0a72f0b 	ldhu	r2,-25412(gp)
   20878:	10800044 	addi	r2,r2,1
   2087c:	d0a72f0d 	sth	r2,-25412(gp)
   20880:	d0a72f0b 	ldhu	r2,-25412(gp)
   20884:	10bfffcc 	andi	r2,r2,65535
   20888:	10810030 	cmpltui	r2,r2,1024
   2088c:	1000011e 	bne	r2,zero,20894 <PutUart2+0xe4>
   20890:	d0272f0d 	sth	zero,-25412(gp)
z = IORD_ALTERA_AVALON_UART_CONTROL(UART_1_BASE) | ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   20894:	00800134 	movhi	r2,4
   20898:	10840304 	addi	r2,r2,4108
   2089c:	10800037 	ldwio	r2,0(r2)
   208a0:	10801014 	ori	r2,r2,64
   208a4:	e0bffe15 	stw	r2,-8(fp)
IOWR_ALTERA_AVALON_UART_CONTROL(UART_1_BASE, z);
   208a8:	e0fffe17 	ldw	r3,-8(fp)
   208ac:	00800134 	movhi	r2,4
   208b0:	10840304 	addi	r2,r2,4108
   208b4:	10c00035 	stwio	r3,0(r2)
}
return(1);
   208b8:	00800044 	movi	r2,1
}
   208bc:	e037883a 	mov	sp,fp
   208c0:	df000017 	ldw	fp,0(sp)
   208c4:	dec00104 	addi	sp,sp,4
   208c8:	f800283a 	ret

000208cc <InitUart>:



////////////////////// This is for IRQ service routines, UART cannot work without IRQ
void InitUart()
{
   208cc:	defffb04 	addi	sp,sp,-20
   208d0:	dfc00415 	stw	ra,16(sp)
   208d4:	df000315 	stw	fp,12(sp)
   208d8:	df000304 	addi	fp,sp,12
int context_uart1,context_uart2;

InitUart1(BAUD_RATE_0);
   208dc:	010000b4 	movhi	r4,2
   208e0:	21308004 	addi	r4,r4,-15872
   208e4:	002026c0 	call	2026c <InitUart1>
InitUart2(BAUD_RATE_1);
   208e8:	010000b4 	movhi	r4,2
   208ec:	21308004 	addi	r4,r4,-15872
   208f0:	00202d00 	call	202d0 <InitUart2>

alt_ic_isr_register(UART_0_IRQ_INTERRUPT_CONTROLLER_ID, UART_0_IRQ,IsrUart1,&context_uart1,0x0 ); // install UART2 ISR
   208f4:	d8000015 	stw	zero,0(sp)
   208f8:	e1fffe04 	addi	r7,fp,-8
   208fc:	018000b4 	movhi	r6,2
   20900:	3180cd04 	addi	r6,r6,820
   20904:	000b883a 	mov	r5,zero
   20908:	0009883a 	mov	r4,zero
   2090c:	002db980 	call	2db98 <alt_ic_isr_register>
alt_ic_isr_register(UART_1_IRQ_INTERRUPT_CONTROLLER_ID, UART_1_IRQ,IsrUart2,&context_uart2,0x0); // install UART2 ISR
   20910:	e0bfff04 	addi	r2,fp,-4
   20914:	d8000015 	stw	zero,0(sp)
   20918:	100f883a 	mov	r7,r2
   2091c:	018000b4 	movhi	r6,2
   20920:	31811304 	addi	r6,r6,1100
   20924:	01400084 	movi	r5,2
   20928:	0009883a 	mov	r4,zero
   2092c:	002db980 	call	2db98 <alt_ic_isr_register>

alt_ic_irq_enable(UART_0_IRQ_INTERRUPT_CONTROLLER_ID, UART_0_IRQ);
   20930:	000b883a 	mov	r5,zero
   20934:	0009883a 	mov	r4,zero
   20938:	002dbe80 	call	2dbe8 <alt_ic_irq_enable>
alt_ic_irq_enable(UART_1_IRQ_INTERRUPT_CONTROLLER_ID, UART_1_IRQ);
   2093c:	01400084 	movi	r5,2
   20940:	0009883a 	mov	r4,zero
   20944:	002dbe80 	call	2dbe8 <alt_ic_irq_enable>
}
   20948:	0001883a 	nop
   2094c:	e037883a 	mov	sp,fp
   20950:	dfc00117 	ldw	ra,4(sp)
   20954:	df000017 	ldw	fp,0(sp)
   20958:	dec00204 	addi	sp,sp,8
   2095c:	f800283a 	ret

00020960 <main>:

int main()
{
   20960:	defffb04 	addi	sp,sp,-20
   20964:	dfc00415 	stw	ra,16(sp)
   20968:	df000315 	stw	fp,12(sp)
   2096c:	df000304 	addi	fp,sp,12

	printf("\n\nSending from UART 0 TX0 to UART 1 RX1!!!!!\n");
   20970:	010000f4 	movhi	r4,3
   20974:	2102a604 	addi	r4,r4,2712
   20978:	0020d040 	call	20d04 <puts>
	InitUart();
   2097c:	00208cc0 	call	208cc <InitUart>

	// Create simple data stream
unsigned char bb;
	unsigned char ch[4]={0}; //initialize
   20980:	e03ffe8d 	sth	zero,-6(fp)
   20984:	e03fff0d 	sth	zero,-4(fp)
	int i = 0;
   20988:	e03ffd15 	stw	zero,-12(fp)
	while(1){
	ch[0]=100;
   2098c:	00801904 	movi	r2,100
   20990:	e0bffe85 	stb	r2,-6(fp)
	ch[1]=25;
   20994:	00800644 	movi	r2,25
   20998:	e0bffec5 	stb	r2,-5(fp)
	ch[2]=5;
   2099c:	00800144 	movi	r2,5
   209a0:	e0bfff05 	stb	r2,-4(fp)
	ch[3]=6;
   209a4:	00800184 	movi	r2,6
   209a8:	e0bfff45 	stb	r2,-3(fp)
	for(i=0;i<4;i++){
   209ac:	e03ffd15 	stw	zero,-12(fp)
   209b0:	00000b06 	br	209e0 <main+0x80>
		bb = ch[i];
   209b4:	e0fffe84 	addi	r3,fp,-6
   209b8:	e0bffd17 	ldw	r2,-12(fp)
   209bc:	1885883a 	add	r2,r3,r2
   209c0:	10800003 	ldbu	r2,0(r2)
   209c4:	e0bffe45 	stb	r2,-7(fp)

		PutUart1(bb); // send data to UART 0
   209c8:	e0bffe43 	ldbu	r2,-7(fp)
   209cc:	1009883a 	mov	r4,r2
   209d0:	00206940 	call	20694 <PutUart1>
	while(1){
	ch[0]=100;
	ch[1]=25;
	ch[2]=5;
	ch[3]=6;
	for(i=0;i<4;i++){
   209d4:	e0bffd17 	ldw	r2,-12(fp)
   209d8:	10800044 	addi	r2,r2,1
   209dc:	e0bffd15 	stw	r2,-12(fp)
   209e0:	e0bffd17 	ldw	r2,-12(fp)
   209e4:	10800110 	cmplti	r2,r2,4
   209e8:	103ff21e 	bne	r2,zero,209b4 <__alt_data_end+0xfffe09b4>

		PutUart1(bb); // send data to UART 0

		}

	if(!EmptyUart2()){ // Check if UART 1 has content
   209ec:	00205a00 	call	205a0 <EmptyUart2>
   209f0:	10803fcc 	andi	r2,r2,255
   209f4:	1000071e 	bne	r2,zero,20a14 <main+0xb4>
	unsigned char cc = GetUart2();  //Collect data from UART 1
   209f8:	00206380 	call	20638 <GetUart2>
   209fc:	e0bffe05 	stb	r2,-8(fp)
	printf("THIS IS FROM UART 0 %d\n", cc); // Print data out
   20a00:	e0bffe03 	ldbu	r2,-8(fp)
   20a04:	100b883a 	mov	r5,r2
   20a08:	010000f4 	movhi	r4,3
   20a0c:	2102b204 	addi	r4,r4,2760
   20a10:	0020c080 	call	20c08 <printf>
	}
usleep(1000000); // for printf
   20a14:	010003f4 	movhi	r4,15
   20a18:	21109004 	addi	r4,r4,16960
   20a1c:	002e45c0 	call	2e45c <usleep>
	}
   20a20:	003fda06 	br	2098c <__alt_data_end+0xfffe098c>

00020a24 <__divsi3>:
   20a24:	20001b16 	blt	r4,zero,20a94 <__divsi3+0x70>
   20a28:	000f883a 	mov	r7,zero
   20a2c:	28001616 	blt	r5,zero,20a88 <__divsi3+0x64>
   20a30:	200d883a 	mov	r6,r4
   20a34:	29001a2e 	bgeu	r5,r4,20aa0 <__divsi3+0x7c>
   20a38:	00800804 	movi	r2,32
   20a3c:	00c00044 	movi	r3,1
   20a40:	00000106 	br	20a48 <__divsi3+0x24>
   20a44:	10000d26 	beq	r2,zero,20a7c <__divsi3+0x58>
   20a48:	294b883a 	add	r5,r5,r5
   20a4c:	10bfffc4 	addi	r2,r2,-1
   20a50:	18c7883a 	add	r3,r3,r3
   20a54:	293ffb36 	bltu	r5,r4,20a44 <__alt_data_end+0xfffe0a44>
   20a58:	0005883a 	mov	r2,zero
   20a5c:	18000726 	beq	r3,zero,20a7c <__divsi3+0x58>
   20a60:	0005883a 	mov	r2,zero
   20a64:	31400236 	bltu	r6,r5,20a70 <__divsi3+0x4c>
   20a68:	314dc83a 	sub	r6,r6,r5
   20a6c:	10c4b03a 	or	r2,r2,r3
   20a70:	1806d07a 	srli	r3,r3,1
   20a74:	280ad07a 	srli	r5,r5,1
   20a78:	183ffa1e 	bne	r3,zero,20a64 <__alt_data_end+0xfffe0a64>
   20a7c:	38000126 	beq	r7,zero,20a84 <__divsi3+0x60>
   20a80:	0085c83a 	sub	r2,zero,r2
   20a84:	f800283a 	ret
   20a88:	014bc83a 	sub	r5,zero,r5
   20a8c:	39c0005c 	xori	r7,r7,1
   20a90:	003fe706 	br	20a30 <__alt_data_end+0xfffe0a30>
   20a94:	0109c83a 	sub	r4,zero,r4
   20a98:	01c00044 	movi	r7,1
   20a9c:	003fe306 	br	20a2c <__alt_data_end+0xfffe0a2c>
   20aa0:	00c00044 	movi	r3,1
   20aa4:	003fee06 	br	20a60 <__alt_data_end+0xfffe0a60>

00020aa8 <__modsi3>:
   20aa8:	20001716 	blt	r4,zero,20b08 <__modsi3+0x60>
   20aac:	000f883a 	mov	r7,zero
   20ab0:	2005883a 	mov	r2,r4
   20ab4:	28001216 	blt	r5,zero,20b00 <__modsi3+0x58>
   20ab8:	2900162e 	bgeu	r5,r4,20b14 <__modsi3+0x6c>
   20abc:	01800804 	movi	r6,32
   20ac0:	00c00044 	movi	r3,1
   20ac4:	00000106 	br	20acc <__modsi3+0x24>
   20ac8:	30000a26 	beq	r6,zero,20af4 <__modsi3+0x4c>
   20acc:	294b883a 	add	r5,r5,r5
   20ad0:	31bfffc4 	addi	r6,r6,-1
   20ad4:	18c7883a 	add	r3,r3,r3
   20ad8:	293ffb36 	bltu	r5,r4,20ac8 <__alt_data_end+0xfffe0ac8>
   20adc:	18000526 	beq	r3,zero,20af4 <__modsi3+0x4c>
   20ae0:	1806d07a 	srli	r3,r3,1
   20ae4:	11400136 	bltu	r2,r5,20aec <__modsi3+0x44>
   20ae8:	1145c83a 	sub	r2,r2,r5
   20aec:	280ad07a 	srli	r5,r5,1
   20af0:	183ffb1e 	bne	r3,zero,20ae0 <__alt_data_end+0xfffe0ae0>
   20af4:	38000126 	beq	r7,zero,20afc <__modsi3+0x54>
   20af8:	0085c83a 	sub	r2,zero,r2
   20afc:	f800283a 	ret
   20b00:	014bc83a 	sub	r5,zero,r5
   20b04:	003fec06 	br	20ab8 <__alt_data_end+0xfffe0ab8>
   20b08:	0109c83a 	sub	r4,zero,r4
   20b0c:	01c00044 	movi	r7,1
   20b10:	003fe706 	br	20ab0 <__alt_data_end+0xfffe0ab0>
   20b14:	00c00044 	movi	r3,1
   20b18:	003ff106 	br	20ae0 <__alt_data_end+0xfffe0ae0>

00020b1c <__udivsi3>:
   20b1c:	200d883a 	mov	r6,r4
   20b20:	2900152e 	bgeu	r5,r4,20b78 <__udivsi3+0x5c>
   20b24:	28001416 	blt	r5,zero,20b78 <__udivsi3+0x5c>
   20b28:	00800804 	movi	r2,32
   20b2c:	00c00044 	movi	r3,1
   20b30:	00000206 	br	20b3c <__udivsi3+0x20>
   20b34:	10000e26 	beq	r2,zero,20b70 <__udivsi3+0x54>
   20b38:	28000516 	blt	r5,zero,20b50 <__udivsi3+0x34>
   20b3c:	294b883a 	add	r5,r5,r5
   20b40:	10bfffc4 	addi	r2,r2,-1
   20b44:	18c7883a 	add	r3,r3,r3
   20b48:	293ffa36 	bltu	r5,r4,20b34 <__alt_data_end+0xfffe0b34>
   20b4c:	18000826 	beq	r3,zero,20b70 <__udivsi3+0x54>
   20b50:	0005883a 	mov	r2,zero
   20b54:	31400236 	bltu	r6,r5,20b60 <__udivsi3+0x44>
   20b58:	314dc83a 	sub	r6,r6,r5
   20b5c:	10c4b03a 	or	r2,r2,r3
   20b60:	1806d07a 	srli	r3,r3,1
   20b64:	280ad07a 	srli	r5,r5,1
   20b68:	183ffa1e 	bne	r3,zero,20b54 <__alt_data_end+0xfffe0b54>
   20b6c:	f800283a 	ret
   20b70:	0005883a 	mov	r2,zero
   20b74:	f800283a 	ret
   20b78:	00c00044 	movi	r3,1
   20b7c:	003ff406 	br	20b50 <__alt_data_end+0xfffe0b50>

00020b80 <__umodsi3>:
   20b80:	2005883a 	mov	r2,r4
   20b84:	2900122e 	bgeu	r5,r4,20bd0 <__umodsi3+0x50>
   20b88:	28001116 	blt	r5,zero,20bd0 <__umodsi3+0x50>
   20b8c:	01800804 	movi	r6,32
   20b90:	00c00044 	movi	r3,1
   20b94:	00000206 	br	20ba0 <__umodsi3+0x20>
   20b98:	30000c26 	beq	r6,zero,20bcc <__umodsi3+0x4c>
   20b9c:	28000516 	blt	r5,zero,20bb4 <__umodsi3+0x34>
   20ba0:	294b883a 	add	r5,r5,r5
   20ba4:	31bfffc4 	addi	r6,r6,-1
   20ba8:	18c7883a 	add	r3,r3,r3
   20bac:	293ffa36 	bltu	r5,r4,20b98 <__alt_data_end+0xfffe0b98>
   20bb0:	18000626 	beq	r3,zero,20bcc <__umodsi3+0x4c>
   20bb4:	1806d07a 	srli	r3,r3,1
   20bb8:	11400136 	bltu	r2,r5,20bc0 <__umodsi3+0x40>
   20bbc:	1145c83a 	sub	r2,r2,r5
   20bc0:	280ad07a 	srli	r5,r5,1
   20bc4:	183ffb1e 	bne	r3,zero,20bb4 <__alt_data_end+0xfffe0bb4>
   20bc8:	f800283a 	ret
   20bcc:	f800283a 	ret
   20bd0:	00c00044 	movi	r3,1
   20bd4:	003ff706 	br	20bb4 <__alt_data_end+0xfffe0bb4>

00020bd8 <_printf_r>:
   20bd8:	defffd04 	addi	sp,sp,-12
   20bdc:	2805883a 	mov	r2,r5
   20be0:	dfc00015 	stw	ra,0(sp)
   20be4:	d9800115 	stw	r6,4(sp)
   20be8:	d9c00215 	stw	r7,8(sp)
   20bec:	21400217 	ldw	r5,8(r4)
   20bf0:	d9c00104 	addi	r7,sp,4
   20bf4:	100d883a 	mov	r6,r2
   20bf8:	0020db00 	call	20db0 <___vfprintf_internal_r>
   20bfc:	dfc00017 	ldw	ra,0(sp)
   20c00:	dec00304 	addi	sp,sp,12
   20c04:	f800283a 	ret

00020c08 <printf>:
   20c08:	defffc04 	addi	sp,sp,-16
   20c0c:	dfc00015 	stw	ra,0(sp)
   20c10:	d9400115 	stw	r5,4(sp)
   20c14:	d9800215 	stw	r6,8(sp)
   20c18:	d9c00315 	stw	r7,12(sp)
   20c1c:	008000f4 	movhi	r2,3
   20c20:	108a8a04 	addi	r2,r2,10792
   20c24:	10800017 	ldw	r2,0(r2)
   20c28:	200b883a 	mov	r5,r4
   20c2c:	d9800104 	addi	r6,sp,4
   20c30:	11000217 	ldw	r4,8(r2)
   20c34:	002308c0 	call	2308c <__vfprintf_internal>
   20c38:	dfc00017 	ldw	ra,0(sp)
   20c3c:	dec00404 	addi	sp,sp,16
   20c40:	f800283a 	ret

00020c44 <_puts_r>:
   20c44:	defff604 	addi	sp,sp,-40
   20c48:	dc000715 	stw	r16,28(sp)
   20c4c:	2021883a 	mov	r16,r4
   20c50:	2809883a 	mov	r4,r5
   20c54:	dc400815 	stw	r17,32(sp)
   20c58:	dfc00915 	stw	ra,36(sp)
   20c5c:	2823883a 	mov	r17,r5
   20c60:	0020d180 	call	20d18 <strlen>
   20c64:	10c00044 	addi	r3,r2,1
   20c68:	d8800115 	stw	r2,4(sp)
   20c6c:	008000f4 	movhi	r2,3
   20c70:	1082b804 	addi	r2,r2,2784
   20c74:	d8800215 	stw	r2,8(sp)
   20c78:	00800044 	movi	r2,1
   20c7c:	d8800315 	stw	r2,12(sp)
   20c80:	00800084 	movi	r2,2
   20c84:	dc400015 	stw	r17,0(sp)
   20c88:	d8c00615 	stw	r3,24(sp)
   20c8c:	dec00415 	stw	sp,16(sp)
   20c90:	d8800515 	stw	r2,20(sp)
   20c94:	80000226 	beq	r16,zero,20ca0 <_puts_r+0x5c>
   20c98:	80800e17 	ldw	r2,56(r16)
   20c9c:	10001426 	beq	r2,zero,20cf0 <_puts_r+0xac>
   20ca0:	81400217 	ldw	r5,8(r16)
   20ca4:	2880030b 	ldhu	r2,12(r5)
   20ca8:	10c8000c 	andi	r3,r2,8192
   20cac:	1800061e 	bne	r3,zero,20cc8 <_puts_r+0x84>
   20cb0:	29001917 	ldw	r4,100(r5)
   20cb4:	00f7ffc4 	movi	r3,-8193
   20cb8:	10880014 	ori	r2,r2,8192
   20cbc:	20c6703a 	and	r3,r4,r3
   20cc0:	2880030d 	sth	r2,12(r5)
   20cc4:	28c01915 	stw	r3,100(r5)
   20cc8:	d9800404 	addi	r6,sp,16
   20ccc:	8009883a 	mov	r4,r16
   20cd0:	00255f40 	call	255f4 <__sfvwrite_r>
   20cd4:	1000091e 	bne	r2,zero,20cfc <_puts_r+0xb8>
   20cd8:	00800284 	movi	r2,10
   20cdc:	dfc00917 	ldw	ra,36(sp)
   20ce0:	dc400817 	ldw	r17,32(sp)
   20ce4:	dc000717 	ldw	r16,28(sp)
   20ce8:	dec00a04 	addi	sp,sp,40
   20cec:	f800283a 	ret
   20cf0:	8009883a 	mov	r4,r16
   20cf4:	00251700 	call	25170 <__sinit>
   20cf8:	003fe906 	br	20ca0 <__alt_data_end+0xfffe0ca0>
   20cfc:	00bfffc4 	movi	r2,-1
   20d00:	003ff606 	br	20cdc <__alt_data_end+0xfffe0cdc>

00020d04 <puts>:
   20d04:	008000f4 	movhi	r2,3
   20d08:	108a8a04 	addi	r2,r2,10792
   20d0c:	200b883a 	mov	r5,r4
   20d10:	11000017 	ldw	r4,0(r2)
   20d14:	0020c441 	jmpi	20c44 <_puts_r>

00020d18 <strlen>:
   20d18:	208000cc 	andi	r2,r4,3
   20d1c:	10002026 	beq	r2,zero,20da0 <strlen+0x88>
   20d20:	20800007 	ldb	r2,0(r4)
   20d24:	10002026 	beq	r2,zero,20da8 <strlen+0x90>
   20d28:	2005883a 	mov	r2,r4
   20d2c:	00000206 	br	20d38 <strlen+0x20>
   20d30:	10c00007 	ldb	r3,0(r2)
   20d34:	18001826 	beq	r3,zero,20d98 <strlen+0x80>
   20d38:	10800044 	addi	r2,r2,1
   20d3c:	10c000cc 	andi	r3,r2,3
   20d40:	183ffb1e 	bne	r3,zero,20d30 <__alt_data_end+0xfffe0d30>
   20d44:	10c00017 	ldw	r3,0(r2)
   20d48:	01ffbff4 	movhi	r7,65279
   20d4c:	39ffbfc4 	addi	r7,r7,-257
   20d50:	00ca303a 	nor	r5,zero,r3
   20d54:	01a02074 	movhi	r6,32897
   20d58:	19c7883a 	add	r3,r3,r7
   20d5c:	31a02004 	addi	r6,r6,-32640
   20d60:	1946703a 	and	r3,r3,r5
   20d64:	1986703a 	and	r3,r3,r6
   20d68:	1800091e 	bne	r3,zero,20d90 <strlen+0x78>
   20d6c:	10800104 	addi	r2,r2,4
   20d70:	10c00017 	ldw	r3,0(r2)
   20d74:	19cb883a 	add	r5,r3,r7
   20d78:	00c6303a 	nor	r3,zero,r3
   20d7c:	28c6703a 	and	r3,r5,r3
   20d80:	1986703a 	and	r3,r3,r6
   20d84:	183ff926 	beq	r3,zero,20d6c <__alt_data_end+0xfffe0d6c>
   20d88:	00000106 	br	20d90 <strlen+0x78>
   20d8c:	10800044 	addi	r2,r2,1
   20d90:	10c00007 	ldb	r3,0(r2)
   20d94:	183ffd1e 	bne	r3,zero,20d8c <__alt_data_end+0xfffe0d8c>
   20d98:	1105c83a 	sub	r2,r2,r4
   20d9c:	f800283a 	ret
   20da0:	2005883a 	mov	r2,r4
   20da4:	003fe706 	br	20d44 <__alt_data_end+0xfffe0d44>
   20da8:	0005883a 	mov	r2,zero
   20dac:	f800283a 	ret

00020db0 <___vfprintf_internal_r>:
   20db0:	deffb804 	addi	sp,sp,-288
   20db4:	dfc04715 	stw	ra,284(sp)
   20db8:	ddc04515 	stw	r23,276(sp)
   20dbc:	dd404315 	stw	r21,268(sp)
   20dc0:	d9002d15 	stw	r4,180(sp)
   20dc4:	282f883a 	mov	r23,r5
   20dc8:	302b883a 	mov	r21,r6
   20dcc:	d9c02e15 	stw	r7,184(sp)
   20dd0:	df004615 	stw	fp,280(sp)
   20dd4:	dd804415 	stw	r22,272(sp)
   20dd8:	dd004215 	stw	r20,264(sp)
   20ddc:	dcc04115 	stw	r19,260(sp)
   20de0:	dc804015 	stw	r18,256(sp)
   20de4:	dc403f15 	stw	r17,252(sp)
   20de8:	dc003e15 	stw	r16,248(sp)
   20dec:	0025cf00 	call	25cf0 <_localeconv_r>
   20df0:	10800017 	ldw	r2,0(r2)
   20df4:	1009883a 	mov	r4,r2
   20df8:	d8803415 	stw	r2,208(sp)
   20dfc:	0020d180 	call	20d18 <strlen>
   20e00:	d8803715 	stw	r2,220(sp)
   20e04:	d8802d17 	ldw	r2,180(sp)
   20e08:	10000226 	beq	r2,zero,20e14 <___vfprintf_internal_r+0x64>
   20e0c:	10800e17 	ldw	r2,56(r2)
   20e10:	1000fb26 	beq	r2,zero,21200 <___vfprintf_internal_r+0x450>
   20e14:	b880030b 	ldhu	r2,12(r23)
   20e18:	10c8000c 	andi	r3,r2,8192
   20e1c:	1800061e 	bne	r3,zero,20e38 <___vfprintf_internal_r+0x88>
   20e20:	b9001917 	ldw	r4,100(r23)
   20e24:	00f7ffc4 	movi	r3,-8193
   20e28:	10880014 	ori	r2,r2,8192
   20e2c:	20c6703a 	and	r3,r4,r3
   20e30:	b880030d 	sth	r2,12(r23)
   20e34:	b8c01915 	stw	r3,100(r23)
   20e38:	10c0020c 	andi	r3,r2,8
   20e3c:	1800c326 	beq	r3,zero,2114c <___vfprintf_internal_r+0x39c>
   20e40:	b8c00417 	ldw	r3,16(r23)
   20e44:	1800c126 	beq	r3,zero,2114c <___vfprintf_internal_r+0x39c>
   20e48:	1080068c 	andi	r2,r2,26
   20e4c:	00c00284 	movi	r3,10
   20e50:	10c0c626 	beq	r2,r3,2116c <___vfprintf_internal_r+0x3bc>
   20e54:	d8c00404 	addi	r3,sp,16
   20e58:	050000f4 	movhi	r20,3
   20e5c:	d9001e04 	addi	r4,sp,120
   20e60:	a502c984 	addi	r20,r20,2854
   20e64:	d8c01e15 	stw	r3,120(sp)
   20e68:	d8002015 	stw	zero,128(sp)
   20e6c:	d8001f15 	stw	zero,124(sp)
   20e70:	d8003315 	stw	zero,204(sp)
   20e74:	d8003615 	stw	zero,216(sp)
   20e78:	d8003815 	stw	zero,224(sp)
   20e7c:	1811883a 	mov	r8,r3
   20e80:	d8003915 	stw	zero,228(sp)
   20e84:	d8003a15 	stw	zero,232(sp)
   20e88:	d8002f15 	stw	zero,188(sp)
   20e8c:	d9002815 	stw	r4,160(sp)
   20e90:	a8800007 	ldb	r2,0(r21)
   20e94:	10028b26 	beq	r2,zero,218c4 <___vfprintf_internal_r+0xb14>
   20e98:	00c00944 	movi	r3,37
   20e9c:	a823883a 	mov	r17,r21
   20ea0:	10c0021e 	bne	r2,r3,20eac <___vfprintf_internal_r+0xfc>
   20ea4:	00001406 	br	20ef8 <___vfprintf_internal_r+0x148>
   20ea8:	10c00326 	beq	r2,r3,20eb8 <___vfprintf_internal_r+0x108>
   20eac:	8c400044 	addi	r17,r17,1
   20eb0:	88800007 	ldb	r2,0(r17)
   20eb4:	103ffc1e 	bne	r2,zero,20ea8 <__alt_data_end+0xfffe0ea8>
   20eb8:	8d61c83a 	sub	r16,r17,r21
   20ebc:	80000e26 	beq	r16,zero,20ef8 <___vfprintf_internal_r+0x148>
   20ec0:	d8c02017 	ldw	r3,128(sp)
   20ec4:	d8801f17 	ldw	r2,124(sp)
   20ec8:	45400015 	stw	r21,0(r8)
   20ecc:	1c07883a 	add	r3,r3,r16
   20ed0:	10800044 	addi	r2,r2,1
   20ed4:	d8c02015 	stw	r3,128(sp)
   20ed8:	44000115 	stw	r16,4(r8)
   20edc:	d8801f15 	stw	r2,124(sp)
   20ee0:	00c001c4 	movi	r3,7
   20ee4:	1880a916 	blt	r3,r2,2118c <___vfprintf_internal_r+0x3dc>
   20ee8:	42000204 	addi	r8,r8,8
   20eec:	d9402f17 	ldw	r5,188(sp)
   20ef0:	2c0b883a 	add	r5,r5,r16
   20ef4:	d9402f15 	stw	r5,188(sp)
   20ef8:	88800007 	ldb	r2,0(r17)
   20efc:	1000aa26 	beq	r2,zero,211a8 <___vfprintf_internal_r+0x3f8>
   20f00:	8d400044 	addi	r21,r17,1
   20f04:	8c400047 	ldb	r17,1(r17)
   20f08:	0021883a 	mov	r16,zero
   20f0c:	00bfffc4 	movi	r2,-1
   20f10:	0025883a 	mov	r18,zero
   20f14:	dc002905 	stb	r16,164(sp)
   20f18:	d8002785 	stb	zero,158(sp)
   20f1c:	d8002b05 	stb	zero,172(sp)
   20f20:	d8802a15 	stw	r2,168(sp)
   20f24:	d8003115 	stw	zero,196(sp)
   20f28:	04c01604 	movi	r19,88
   20f2c:	05800244 	movi	r22,9
   20f30:	9021883a 	mov	r16,r18
   20f34:	4039883a 	mov	fp,r8
   20f38:	ad400044 	addi	r21,r21,1
   20f3c:	88bff804 	addi	r2,r17,-32
   20f40:	98833236 	bltu	r19,r2,21c0c <___vfprintf_internal_r+0xe5c>
   20f44:	100490ba 	slli	r2,r2,2
   20f48:	00c000b4 	movhi	r3,2
   20f4c:	18c3d704 	addi	r3,r3,3932
   20f50:	10c5883a 	add	r2,r2,r3
   20f54:	10800017 	ldw	r2,0(r2)
   20f58:	1000683a 	jmp	r2
   20f5c:	00021b04 	movi	zero,2156
   20f60:	00021c0c 	andi	zero,zero,2160
   20f64:	00021c0c 	andi	zero,zero,2160
   20f68:	00021b24 	muli	zero,zero,2156
   20f6c:	00021c0c 	andi	zero,zero,2160
   20f70:	00021c0c 	andi	zero,zero,2160
   20f74:	00021c0c 	andi	zero,zero,2160
   20f78:	00021c0c 	andi	zero,zero,2160
   20f7c:	00021c0c 	andi	zero,zero,2160
   20f80:	00021c0c 	andi	zero,zero,2160
   20f84:	0002120c 	andi	zero,zero,2120
   20f88:	00021a14 	movui	zero,2152
   20f8c:	00021c0c 	andi	zero,zero,2160
   20f90:	000210d0 	cmplti	zero,zero,2115
   20f94:	00021230 	cmpltui	zero,zero,2120
   20f98:	00021c0c 	andi	zero,zero,2160
   20f9c:	00021280 	call	2128 <__alt_mem_OCRAM-0x1ded8>
   20fa0:	0002128c 	andi	zero,zero,2122
   20fa4:	0002128c 	andi	zero,zero,2122
   20fa8:	0002128c 	andi	zero,zero,2122
   20fac:	0002128c 	andi	zero,zero,2122
   20fb0:	0002128c 	andi	zero,zero,2122
   20fb4:	0002128c 	andi	zero,zero,2122
   20fb8:	0002128c 	andi	zero,zero,2122
   20fbc:	0002128c 	andi	zero,zero,2122
   20fc0:	0002128c 	andi	zero,zero,2122
   20fc4:	00021c0c 	andi	zero,zero,2160
   20fc8:	00021c0c 	andi	zero,zero,2160
   20fcc:	00021c0c 	andi	zero,zero,2160
   20fd0:	00021c0c 	andi	zero,zero,2160
   20fd4:	00021c0c 	andi	zero,zero,2160
   20fd8:	00021c0c 	andi	zero,zero,2160
   20fdc:	00021c0c 	andi	zero,zero,2160
   20fe0:	00021c0c 	andi	zero,zero,2160
   20fe4:	00021c0c 	andi	zero,zero,2160
   20fe8:	00021c0c 	andi	zero,zero,2160
   20fec:	000212c8 	cmpgei	zero,zero,2123
   20ff0:	00021390 	cmplti	zero,zero,2126
   20ff4:	00021c0c 	andi	zero,zero,2160
   20ff8:	00021390 	cmplti	zero,zero,2126
   20ffc:	00021c0c 	andi	zero,zero,2160
   21000:	00021c0c 	andi	zero,zero,2160
   21004:	00021c0c 	andi	zero,zero,2160
   21008:	00021c0c 	andi	zero,zero,2160
   2100c:	0002143c 	xorhi	zero,zero,2128
   21010:	00021c0c 	andi	zero,zero,2160
   21014:	00021c0c 	andi	zero,zero,2160
   21018:	00021448 	cmpgei	zero,zero,2129
   2101c:	00021c0c 	andi	zero,zero,2160
   21020:	00021c0c 	andi	zero,zero,2160
   21024:	00021c0c 	andi	zero,zero,2160
   21028:	00021c0c 	andi	zero,zero,2160
   2102c:	00021c0c 	andi	zero,zero,2160
   21030:	000218cc 	andi	zero,zero,2147
   21034:	00021c0c 	andi	zero,zero,2160
   21038:	00021c0c 	andi	zero,zero,2160
   2103c:	00021938 	rdprs	zero,zero,2148
   21040:	00021c0c 	andi	zero,zero,2160
   21044:	00021c0c 	andi	zero,zero,2160
   21048:	00021c0c 	andi	zero,zero,2160
   2104c:	00021c0c 	andi	zero,zero,2160
   21050:	00021c0c 	andi	zero,zero,2160
   21054:	00021c0c 	andi	zero,zero,2160
   21058:	00021c0c 	andi	zero,zero,2160
   2105c:	00021c0c 	andi	zero,zero,2160
   21060:	00021c0c 	andi	zero,zero,2160
   21064:	00021c0c 	andi	zero,zero,2160
   21068:	00021bb0 	cmpltui	zero,zero,2158
   2106c:	00021b30 	cmpltui	zero,zero,2156
   21070:	00021390 	cmplti	zero,zero,2126
   21074:	00021390 	cmplti	zero,zero,2126
   21078:	00021390 	cmplti	zero,zero,2126
   2107c:	00021b50 	cmplti	zero,zero,2157
   21080:	00021b30 	cmpltui	zero,zero,2156
   21084:	00021c0c 	andi	zero,zero,2160
   21088:	00021c0c 	andi	zero,zero,2160
   2108c:	00021b5c 	xori	zero,zero,2157
   21090:	00021c0c 	andi	zero,zero,2160
   21094:	00021b70 	cmpltui	zero,zero,2157
   21098:	000219f4 	movhi	zero,2151
   2109c:	000210dc 	xori	zero,zero,2115
   210a0:	00021a2c 	andhi	zero,zero,2152
   210a4:	00021c0c 	andi	zero,zero,2160
   210a8:	00021a38 	rdprs	zero,zero,2152
   210ac:	00021c0c 	andi	zero,zero,2160
   210b0:	00021a9c 	xori	zero,zero,2154
   210b4:	00021c0c 	andi	zero,zero,2160
   210b8:	00021c0c 	andi	zero,zero,2160
   210bc:	00021abc 	xorhi	zero,zero,2154
   210c0:	d8c03117 	ldw	r3,196(sp)
   210c4:	d8802e15 	stw	r2,184(sp)
   210c8:	00c7c83a 	sub	r3,zero,r3
   210cc:	d8c03115 	stw	r3,196(sp)
   210d0:	84000114 	ori	r16,r16,4
   210d4:	ac400007 	ldb	r17,0(r21)
   210d8:	003f9706 	br	20f38 <__alt_data_end+0xfffe0f38>
   210dc:	00800c04 	movi	r2,48
   210e0:	d8802705 	stb	r2,156(sp)
   210e4:	00801e04 	movi	r2,120
   210e8:	d8802745 	stb	r2,157(sp)
   210ec:	d9002a17 	ldw	r4,168(sp)
   210f0:	d8802e17 	ldw	r2,184(sp)
   210f4:	d8002785 	stb	zero,158(sp)
   210f8:	e011883a 	mov	r8,fp
   210fc:	10c00104 	addi	r3,r2,4
   21100:	14c00017 	ldw	r19,0(r2)
   21104:	002d883a 	mov	r22,zero
   21108:	80800094 	ori	r2,r16,2
   2110c:	2002ca16 	blt	r4,zero,21c38 <___vfprintf_internal_r+0xe88>
   21110:	00bfdfc4 	movi	r2,-129
   21114:	80a4703a 	and	r18,r16,r2
   21118:	d8c02e15 	stw	r3,184(sp)
   2111c:	94800094 	ori	r18,r18,2
   21120:	9802b41e 	bne	r19,zero,21bf4 <___vfprintf_internal_r+0xe44>
   21124:	014000f4 	movhi	r5,3
   21128:	2942c204 	addi	r5,r5,2824
   2112c:	d9403915 	stw	r5,228(sp)
   21130:	04401e04 	movi	r17,120
   21134:	d8802a17 	ldw	r2,168(sp)
   21138:	0039883a 	mov	fp,zero
   2113c:	1001fa26 	beq	r2,zero,21928 <___vfprintf_internal_r+0xb78>
   21140:	0027883a 	mov	r19,zero
   21144:	002d883a 	mov	r22,zero
   21148:	00021906 	br	219b0 <___vfprintf_internal_r+0xc00>
   2114c:	d9002d17 	ldw	r4,180(sp)
   21150:	b80b883a 	mov	r5,r23
   21154:	00231640 	call	23164 <__swsetup_r>
   21158:	1005dc1e 	bne	r2,zero,228cc <___vfprintf_internal_r+0x1b1c>
   2115c:	b880030b 	ldhu	r2,12(r23)
   21160:	00c00284 	movi	r3,10
   21164:	1080068c 	andi	r2,r2,26
   21168:	10ff3a1e 	bne	r2,r3,20e54 <__alt_data_end+0xfffe0e54>
   2116c:	b880038f 	ldh	r2,14(r23)
   21170:	103f3816 	blt	r2,zero,20e54 <__alt_data_end+0xfffe0e54>
   21174:	d9c02e17 	ldw	r7,184(sp)
   21178:	d9002d17 	ldw	r4,180(sp)
   2117c:	a80d883a 	mov	r6,r21
   21180:	b80b883a 	mov	r5,r23
   21184:	00230a80 	call	230a8 <__sbprintf>
   21188:	00001106 	br	211d0 <___vfprintf_internal_r+0x420>
   2118c:	d9002d17 	ldw	r4,180(sp)
   21190:	d9801e04 	addi	r6,sp,120
   21194:	b80b883a 	mov	r5,r23
   21198:	00285900 	call	28590 <__sprint_r>
   2119c:	1000081e 	bne	r2,zero,211c0 <___vfprintf_internal_r+0x410>
   211a0:	da000404 	addi	r8,sp,16
   211a4:	003f5106 	br	20eec <__alt_data_end+0xfffe0eec>
   211a8:	d8802017 	ldw	r2,128(sp)
   211ac:	10000426 	beq	r2,zero,211c0 <___vfprintf_internal_r+0x410>
   211b0:	d9002d17 	ldw	r4,180(sp)
   211b4:	d9801e04 	addi	r6,sp,120
   211b8:	b80b883a 	mov	r5,r23
   211bc:	00285900 	call	28590 <__sprint_r>
   211c0:	b880030b 	ldhu	r2,12(r23)
   211c4:	1080100c 	andi	r2,r2,64
   211c8:	1005c01e 	bne	r2,zero,228cc <___vfprintf_internal_r+0x1b1c>
   211cc:	d8802f17 	ldw	r2,188(sp)
   211d0:	dfc04717 	ldw	ra,284(sp)
   211d4:	df004617 	ldw	fp,280(sp)
   211d8:	ddc04517 	ldw	r23,276(sp)
   211dc:	dd804417 	ldw	r22,272(sp)
   211e0:	dd404317 	ldw	r21,268(sp)
   211e4:	dd004217 	ldw	r20,264(sp)
   211e8:	dcc04117 	ldw	r19,260(sp)
   211ec:	dc804017 	ldw	r18,256(sp)
   211f0:	dc403f17 	ldw	r17,252(sp)
   211f4:	dc003e17 	ldw	r16,248(sp)
   211f8:	dec04804 	addi	sp,sp,288
   211fc:	f800283a 	ret
   21200:	d9002d17 	ldw	r4,180(sp)
   21204:	00251700 	call	25170 <__sinit>
   21208:	003f0206 	br	20e14 <__alt_data_end+0xfffe0e14>
   2120c:	d9002e17 	ldw	r4,184(sp)
   21210:	d9402e17 	ldw	r5,184(sp)
   21214:	21000017 	ldw	r4,0(r4)
   21218:	28800104 	addi	r2,r5,4
   2121c:	d9003115 	stw	r4,196(sp)
   21220:	203fa716 	blt	r4,zero,210c0 <__alt_data_end+0xfffe10c0>
   21224:	d8802e15 	stw	r2,184(sp)
   21228:	ac400007 	ldb	r17,0(r21)
   2122c:	003f4206 	br	20f38 <__alt_data_end+0xfffe0f38>
   21230:	ac400007 	ldb	r17,0(r21)
   21234:	01000a84 	movi	r4,42
   21238:	a8c00044 	addi	r3,r21,1
   2123c:	89075826 	beq	r17,r4,22fa0 <___vfprintf_internal_r+0x21f0>
   21240:	8cbff404 	addi	r18,r17,-48
   21244:	b486ae36 	bltu	r22,r18,22d00 <___vfprintf_internal_r+0x1f50>
   21248:	0009883a 	mov	r4,zero
   2124c:	1823883a 	mov	r17,r3
   21250:	01400284 	movi	r5,10
   21254:	002b0980 	call	2b098 <__mulsi3>
   21258:	88c00007 	ldb	r3,0(r17)
   2125c:	1489883a 	add	r4,r2,r18
   21260:	8d400044 	addi	r21,r17,1
   21264:	1cbff404 	addi	r18,r3,-48
   21268:	a823883a 	mov	r17,r21
   2126c:	b4bff82e 	bgeu	r22,r18,21250 <__alt_data_end+0xfffe1250>
   21270:	1823883a 	mov	r17,r3
   21274:	2005f616 	blt	r4,zero,22a50 <___vfprintf_internal_r+0x1ca0>
   21278:	d9002a15 	stw	r4,168(sp)
   2127c:	003f2f06 	br	20f3c <__alt_data_end+0xfffe0f3c>
   21280:	84002014 	ori	r16,r16,128
   21284:	ac400007 	ldb	r17,0(r21)
   21288:	003f2b06 	br	20f38 <__alt_data_end+0xfffe0f38>
   2128c:	8cbff404 	addi	r18,r17,-48
   21290:	d8003115 	stw	zero,196(sp)
   21294:	0009883a 	mov	r4,zero
   21298:	a823883a 	mov	r17,r21
   2129c:	01400284 	movi	r5,10
   212a0:	002b0980 	call	2b098 <__mulsi3>
   212a4:	88c00007 	ldb	r3,0(r17)
   212a8:	9089883a 	add	r4,r18,r2
   212ac:	ad400044 	addi	r21,r21,1
   212b0:	1cbff404 	addi	r18,r3,-48
   212b4:	a823883a 	mov	r17,r21
   212b8:	b4bff82e 	bgeu	r22,r18,2129c <__alt_data_end+0xfffe129c>
   212bc:	1823883a 	mov	r17,r3
   212c0:	d9003115 	stw	r4,196(sp)
   212c4:	003f1d06 	br	20f3c <__alt_data_end+0xfffe0f3c>
   212c8:	8025883a 	mov	r18,r16
   212cc:	dc002903 	ldbu	r16,164(sp)
   212d0:	e011883a 	mov	r8,fp
   212d4:	84003fcc 	andi	r16,r16,255
   212d8:	8007531e 	bne	r16,zero,23028 <___vfprintf_internal_r+0x2278>
   212dc:	94800414 	ori	r18,r18,16
   212e0:	9080080c 	andi	r2,r18,32
   212e4:	1003a326 	beq	r2,zero,22174 <___vfprintf_internal_r+0x13c4>
   212e8:	d9002e17 	ldw	r4,184(sp)
   212ec:	20800117 	ldw	r2,4(r4)
   212f0:	24c00017 	ldw	r19,0(r4)
   212f4:	21000204 	addi	r4,r4,8
   212f8:	d9002e15 	stw	r4,184(sp)
   212fc:	102d883a 	mov	r22,r2
   21300:	10047316 	blt	r2,zero,224d0 <___vfprintf_internal_r+0x1720>
   21304:	d9002a17 	ldw	r4,168(sp)
   21308:	df002783 	ldbu	fp,158(sp)
   2130c:	2003e416 	blt	r4,zero,222a0 <___vfprintf_internal_r+0x14f0>
   21310:	00ffdfc4 	movi	r3,-129
   21314:	9d84b03a 	or	r2,r19,r22
   21318:	90e4703a 	and	r18,r18,r3
   2131c:	10018026 	beq	r2,zero,21920 <___vfprintf_internal_r+0xb70>
   21320:	b003ab26 	beq	r22,zero,221d0 <___vfprintf_internal_r+0x1420>
   21324:	dc402915 	stw	r17,164(sp)
   21328:	dc001e04 	addi	r16,sp,120
   2132c:	b023883a 	mov	r17,r22
   21330:	402d883a 	mov	r22,r8
   21334:	9809883a 	mov	r4,r19
   21338:	880b883a 	mov	r5,r17
   2133c:	01800284 	movi	r6,10
   21340:	000f883a 	mov	r7,zero
   21344:	002aad40 	call	2aad4 <__umoddi3>
   21348:	10800c04 	addi	r2,r2,48
   2134c:	843fffc4 	addi	r16,r16,-1
   21350:	9809883a 	mov	r4,r19
   21354:	880b883a 	mov	r5,r17
   21358:	80800005 	stb	r2,0(r16)
   2135c:	01800284 	movi	r6,10
   21360:	000f883a 	mov	r7,zero
   21364:	002a4d80 	call	2a4d8 <__udivdi3>
   21368:	1027883a 	mov	r19,r2
   2136c:	10c4b03a 	or	r2,r2,r3
   21370:	1823883a 	mov	r17,r3
   21374:	103fef1e 	bne	r2,zero,21334 <__alt_data_end+0xfffe1334>
   21378:	d8c02817 	ldw	r3,160(sp)
   2137c:	dc402917 	ldw	r17,164(sp)
   21380:	b011883a 	mov	r8,r22
   21384:	1c07c83a 	sub	r3,r3,r16
   21388:	d8c02b15 	stw	r3,172(sp)
   2138c:	00005f06 	br	2150c <___vfprintf_internal_r+0x75c>
   21390:	8025883a 	mov	r18,r16
   21394:	dc002903 	ldbu	r16,164(sp)
   21398:	e011883a 	mov	r8,fp
   2139c:	84003fcc 	andi	r16,r16,255
   213a0:	80071e1e 	bne	r16,zero,2301c <___vfprintf_internal_r+0x226c>
   213a4:	9080020c 	andi	r2,r18,8
   213a8:	1004af26 	beq	r2,zero,22668 <___vfprintf_internal_r+0x18b8>
   213ac:	d9002e17 	ldw	r4,184(sp)
   213b0:	d9402e17 	ldw	r5,184(sp)
   213b4:	d8802e17 	ldw	r2,184(sp)
   213b8:	21000017 	ldw	r4,0(r4)
   213bc:	29400117 	ldw	r5,4(r5)
   213c0:	10800204 	addi	r2,r2,8
   213c4:	d9003615 	stw	r4,216(sp)
   213c8:	d9403815 	stw	r5,224(sp)
   213cc:	d8802e15 	stw	r2,184(sp)
   213d0:	d9003617 	ldw	r4,216(sp)
   213d4:	d9403817 	ldw	r5,224(sp)
   213d8:	da003d15 	stw	r8,244(sp)
   213dc:	04000044 	movi	r16,1
   213e0:	00281b40 	call	281b4 <__fpclassifyd>
   213e4:	da003d17 	ldw	r8,244(sp)
   213e8:	1404441e 	bne	r2,r16,224fc <___vfprintf_internal_r+0x174c>
   213ec:	d9003617 	ldw	r4,216(sp)
   213f0:	d9403817 	ldw	r5,224(sp)
   213f4:	000d883a 	mov	r6,zero
   213f8:	000f883a 	mov	r7,zero
   213fc:	002c4a00 	call	2c4a0 <__ledf2>
   21400:	da003d17 	ldw	r8,244(sp)
   21404:	1005e316 	blt	r2,zero,22b94 <___vfprintf_internal_r+0x1de4>
   21408:	df002783 	ldbu	fp,158(sp)
   2140c:	008011c4 	movi	r2,71
   21410:	1445580e 	bge	r2,r17,22974 <___vfprintf_internal_r+0x1bc4>
   21414:	040000f4 	movhi	r16,3
   21418:	8402ba04 	addi	r16,r16,2792
   2141c:	00c000c4 	movi	r3,3
   21420:	00bfdfc4 	movi	r2,-129
   21424:	d8c02915 	stw	r3,164(sp)
   21428:	90a4703a 	and	r18,r18,r2
   2142c:	d8c02b15 	stw	r3,172(sp)
   21430:	d8002a15 	stw	zero,168(sp)
   21434:	d8003215 	stw	zero,200(sp)
   21438:	00003a06 	br	21524 <___vfprintf_internal_r+0x774>
   2143c:	84000214 	ori	r16,r16,8
   21440:	ac400007 	ldb	r17,0(r21)
   21444:	003ebc06 	br	20f38 <__alt_data_end+0xfffe0f38>
   21448:	8025883a 	mov	r18,r16
   2144c:	dc002903 	ldbu	r16,164(sp)
   21450:	e011883a 	mov	r8,fp
   21454:	84003fcc 	andi	r16,r16,255
   21458:	8007001e 	bne	r16,zero,2305c <___vfprintf_internal_r+0x22ac>
   2145c:	94800414 	ori	r18,r18,16
   21460:	9080080c 	andi	r2,r18,32
   21464:	1002fa26 	beq	r2,zero,22050 <___vfprintf_internal_r+0x12a0>
   21468:	d9002e17 	ldw	r4,184(sp)
   2146c:	d9402a17 	ldw	r5,168(sp)
   21470:	d8002785 	stb	zero,158(sp)
   21474:	20800204 	addi	r2,r4,8
   21478:	24c00017 	ldw	r19,0(r4)
   2147c:	25800117 	ldw	r22,4(r4)
   21480:	2804b116 	blt	r5,zero,22748 <___vfprintf_internal_r+0x1998>
   21484:	013fdfc4 	movi	r4,-129
   21488:	9d86b03a 	or	r3,r19,r22
   2148c:	d8802e15 	stw	r2,184(sp)
   21490:	9124703a 	and	r18,r18,r4
   21494:	1802fb1e 	bne	r3,zero,22084 <___vfprintf_internal_r+0x12d4>
   21498:	d8c02a17 	ldw	r3,168(sp)
   2149c:	0039883a 	mov	fp,zero
   214a0:	1805e526 	beq	r3,zero,22c38 <___vfprintf_internal_r+0x1e88>
   214a4:	0027883a 	mov	r19,zero
   214a8:	002d883a 	mov	r22,zero
   214ac:	dc001e04 	addi	r16,sp,120
   214b0:	9806d0fa 	srli	r3,r19,3
   214b4:	b008977a 	slli	r4,r22,29
   214b8:	b02cd0fa 	srli	r22,r22,3
   214bc:	9cc001cc 	andi	r19,r19,7
   214c0:	98800c04 	addi	r2,r19,48
   214c4:	843fffc4 	addi	r16,r16,-1
   214c8:	20e6b03a 	or	r19,r4,r3
   214cc:	80800005 	stb	r2,0(r16)
   214d0:	9d86b03a 	or	r3,r19,r22
   214d4:	183ff61e 	bne	r3,zero,214b0 <__alt_data_end+0xfffe14b0>
   214d8:	90c0004c 	andi	r3,r18,1
   214dc:	18014126 	beq	r3,zero,219e4 <___vfprintf_internal_r+0xc34>
   214e0:	10803fcc 	andi	r2,r2,255
   214e4:	1080201c 	xori	r2,r2,128
   214e8:	10bfe004 	addi	r2,r2,-128
   214ec:	00c00c04 	movi	r3,48
   214f0:	10c13c26 	beq	r2,r3,219e4 <___vfprintf_internal_r+0xc34>
   214f4:	80ffffc5 	stb	r3,-1(r16)
   214f8:	d8c02817 	ldw	r3,160(sp)
   214fc:	80bfffc4 	addi	r2,r16,-1
   21500:	1021883a 	mov	r16,r2
   21504:	1887c83a 	sub	r3,r3,r2
   21508:	d8c02b15 	stw	r3,172(sp)
   2150c:	d8802b17 	ldw	r2,172(sp)
   21510:	d9002a17 	ldw	r4,168(sp)
   21514:	1100010e 	bge	r2,r4,2151c <___vfprintf_internal_r+0x76c>
   21518:	2005883a 	mov	r2,r4
   2151c:	d8802915 	stw	r2,164(sp)
   21520:	d8003215 	stw	zero,200(sp)
   21524:	e7003fcc 	andi	fp,fp,255
   21528:	e700201c 	xori	fp,fp,128
   2152c:	e73fe004 	addi	fp,fp,-128
   21530:	e0000326 	beq	fp,zero,21540 <___vfprintf_internal_r+0x790>
   21534:	d8c02917 	ldw	r3,164(sp)
   21538:	18c00044 	addi	r3,r3,1
   2153c:	d8c02915 	stw	r3,164(sp)
   21540:	90c0008c 	andi	r3,r18,2
   21544:	d8c02c15 	stw	r3,176(sp)
   21548:	18000326 	beq	r3,zero,21558 <___vfprintf_internal_r+0x7a8>
   2154c:	d8c02917 	ldw	r3,164(sp)
   21550:	18c00084 	addi	r3,r3,2
   21554:	d8c02915 	stw	r3,164(sp)
   21558:	90c0210c 	andi	r3,r18,132
   2155c:	d8c03015 	stw	r3,192(sp)
   21560:	1801c51e 	bne	r3,zero,21c78 <___vfprintf_internal_r+0xec8>
   21564:	d9003117 	ldw	r4,196(sp)
   21568:	d8c02917 	ldw	r3,164(sp)
   2156c:	20e7c83a 	sub	r19,r4,r3
   21570:	04c1c10e 	bge	zero,r19,21c78 <___vfprintf_internal_r+0xec8>
   21574:	02400404 	movi	r9,16
   21578:	d8c02017 	ldw	r3,128(sp)
   2157c:	d8801f17 	ldw	r2,124(sp)
   21580:	4cc52f0e 	bge	r9,r19,22a40 <___vfprintf_internal_r+0x1c90>
   21584:	014000f4 	movhi	r5,3
   21588:	2942cd84 	addi	r5,r5,2870
   2158c:	dc403b15 	stw	r17,236(sp)
   21590:	d9403515 	stw	r5,212(sp)
   21594:	9823883a 	mov	r17,r19
   21598:	482d883a 	mov	r22,r9
   2159c:	9027883a 	mov	r19,r18
   215a0:	070001c4 	movi	fp,7
   215a4:	8025883a 	mov	r18,r16
   215a8:	dc002d17 	ldw	r16,180(sp)
   215ac:	00000306 	br	215bc <___vfprintf_internal_r+0x80c>
   215b0:	8c7ffc04 	addi	r17,r17,-16
   215b4:	42000204 	addi	r8,r8,8
   215b8:	b440130e 	bge	r22,r17,21608 <___vfprintf_internal_r+0x858>
   215bc:	010000f4 	movhi	r4,3
   215c0:	18c00404 	addi	r3,r3,16
   215c4:	10800044 	addi	r2,r2,1
   215c8:	2102cd84 	addi	r4,r4,2870
   215cc:	41000015 	stw	r4,0(r8)
   215d0:	45800115 	stw	r22,4(r8)
   215d4:	d8c02015 	stw	r3,128(sp)
   215d8:	d8801f15 	stw	r2,124(sp)
   215dc:	e0bff40e 	bge	fp,r2,215b0 <__alt_data_end+0xfffe15b0>
   215e0:	d9801e04 	addi	r6,sp,120
   215e4:	b80b883a 	mov	r5,r23
   215e8:	8009883a 	mov	r4,r16
   215ec:	00285900 	call	28590 <__sprint_r>
   215f0:	103ef31e 	bne	r2,zero,211c0 <__alt_data_end+0xfffe11c0>
   215f4:	8c7ffc04 	addi	r17,r17,-16
   215f8:	d8c02017 	ldw	r3,128(sp)
   215fc:	d8801f17 	ldw	r2,124(sp)
   21600:	da000404 	addi	r8,sp,16
   21604:	b47fed16 	blt	r22,r17,215bc <__alt_data_end+0xfffe15bc>
   21608:	9021883a 	mov	r16,r18
   2160c:	9825883a 	mov	r18,r19
   21610:	8827883a 	mov	r19,r17
   21614:	dc403b17 	ldw	r17,236(sp)
   21618:	d9403517 	ldw	r5,212(sp)
   2161c:	98c7883a 	add	r3,r19,r3
   21620:	10800044 	addi	r2,r2,1
   21624:	41400015 	stw	r5,0(r8)
   21628:	44c00115 	stw	r19,4(r8)
   2162c:	d8c02015 	stw	r3,128(sp)
   21630:	d8801f15 	stw	r2,124(sp)
   21634:	010001c4 	movi	r4,7
   21638:	2082c516 	blt	r4,r2,22150 <___vfprintf_internal_r+0x13a0>
   2163c:	df002787 	ldb	fp,158(sp)
   21640:	42000204 	addi	r8,r8,8
   21644:	e0000c26 	beq	fp,zero,21678 <___vfprintf_internal_r+0x8c8>
   21648:	d8801f17 	ldw	r2,124(sp)
   2164c:	d9002784 	addi	r4,sp,158
   21650:	18c00044 	addi	r3,r3,1
   21654:	10800044 	addi	r2,r2,1
   21658:	41000015 	stw	r4,0(r8)
   2165c:	01000044 	movi	r4,1
   21660:	41000115 	stw	r4,4(r8)
   21664:	d8c02015 	stw	r3,128(sp)
   21668:	d8801f15 	stw	r2,124(sp)
   2166c:	010001c4 	movi	r4,7
   21670:	20825e16 	blt	r4,r2,21fec <___vfprintf_internal_r+0x123c>
   21674:	42000204 	addi	r8,r8,8
   21678:	d8802c17 	ldw	r2,176(sp)
   2167c:	10000c26 	beq	r2,zero,216b0 <___vfprintf_internal_r+0x900>
   21680:	d8801f17 	ldw	r2,124(sp)
   21684:	d9002704 	addi	r4,sp,156
   21688:	18c00084 	addi	r3,r3,2
   2168c:	10800044 	addi	r2,r2,1
   21690:	41000015 	stw	r4,0(r8)
   21694:	01000084 	movi	r4,2
   21698:	41000115 	stw	r4,4(r8)
   2169c:	d8c02015 	stw	r3,128(sp)
   216a0:	d8801f15 	stw	r2,124(sp)
   216a4:	010001c4 	movi	r4,7
   216a8:	20825816 	blt	r4,r2,2200c <___vfprintf_internal_r+0x125c>
   216ac:	42000204 	addi	r8,r8,8
   216b0:	d9003017 	ldw	r4,192(sp)
   216b4:	00802004 	movi	r2,128
   216b8:	2081bb26 	beq	r4,r2,21da8 <___vfprintf_internal_r+0xff8>
   216bc:	d9402a17 	ldw	r5,168(sp)
   216c0:	d8802b17 	ldw	r2,172(sp)
   216c4:	28adc83a 	sub	r22,r5,r2
   216c8:	0580310e 	bge	zero,r22,21790 <___vfprintf_internal_r+0x9e0>
   216cc:	07000404 	movi	fp,16
   216d0:	d8801f17 	ldw	r2,124(sp)
   216d4:	e584360e 	bge	fp,r22,227b0 <___vfprintf_internal_r+0x1a00>
   216d8:	014000f4 	movhi	r5,3
   216dc:	2942c984 	addi	r5,r5,2854
   216e0:	dc402a15 	stw	r17,168(sp)
   216e4:	d9402c15 	stw	r5,176(sp)
   216e8:	b023883a 	mov	r17,r22
   216ec:	04c001c4 	movi	r19,7
   216f0:	a82d883a 	mov	r22,r21
   216f4:	902b883a 	mov	r21,r18
   216f8:	8025883a 	mov	r18,r16
   216fc:	dc002d17 	ldw	r16,180(sp)
   21700:	00000306 	br	21710 <___vfprintf_internal_r+0x960>
   21704:	8c7ffc04 	addi	r17,r17,-16
   21708:	42000204 	addi	r8,r8,8
   2170c:	e440110e 	bge	fp,r17,21754 <___vfprintf_internal_r+0x9a4>
   21710:	18c00404 	addi	r3,r3,16
   21714:	10800044 	addi	r2,r2,1
   21718:	45000015 	stw	r20,0(r8)
   2171c:	47000115 	stw	fp,4(r8)
   21720:	d8c02015 	stw	r3,128(sp)
   21724:	d8801f15 	stw	r2,124(sp)
   21728:	98bff60e 	bge	r19,r2,21704 <__alt_data_end+0xfffe1704>
   2172c:	d9801e04 	addi	r6,sp,120
   21730:	b80b883a 	mov	r5,r23
   21734:	8009883a 	mov	r4,r16
   21738:	00285900 	call	28590 <__sprint_r>
   2173c:	103ea01e 	bne	r2,zero,211c0 <__alt_data_end+0xfffe11c0>
   21740:	8c7ffc04 	addi	r17,r17,-16
   21744:	d8c02017 	ldw	r3,128(sp)
   21748:	d8801f17 	ldw	r2,124(sp)
   2174c:	da000404 	addi	r8,sp,16
   21750:	e47fef16 	blt	fp,r17,21710 <__alt_data_end+0xfffe1710>
   21754:	9021883a 	mov	r16,r18
   21758:	a825883a 	mov	r18,r21
   2175c:	b02b883a 	mov	r21,r22
   21760:	882d883a 	mov	r22,r17
   21764:	dc402a17 	ldw	r17,168(sp)
   21768:	d9002c17 	ldw	r4,176(sp)
   2176c:	1d87883a 	add	r3,r3,r22
   21770:	10800044 	addi	r2,r2,1
   21774:	41000015 	stw	r4,0(r8)
   21778:	45800115 	stw	r22,4(r8)
   2177c:	d8c02015 	stw	r3,128(sp)
   21780:	d8801f15 	stw	r2,124(sp)
   21784:	010001c4 	movi	r4,7
   21788:	20821016 	blt	r4,r2,21fcc <___vfprintf_internal_r+0x121c>
   2178c:	42000204 	addi	r8,r8,8
   21790:	9080400c 	andi	r2,r18,256
   21794:	10013a1e 	bne	r2,zero,21c80 <___vfprintf_internal_r+0xed0>
   21798:	d9402b17 	ldw	r5,172(sp)
   2179c:	d8801f17 	ldw	r2,124(sp)
   217a0:	44000015 	stw	r16,0(r8)
   217a4:	1947883a 	add	r3,r3,r5
   217a8:	10800044 	addi	r2,r2,1
   217ac:	41400115 	stw	r5,4(r8)
   217b0:	d8c02015 	stw	r3,128(sp)
   217b4:	d8801f15 	stw	r2,124(sp)
   217b8:	010001c4 	movi	r4,7
   217bc:	2081f516 	blt	r4,r2,21f94 <___vfprintf_internal_r+0x11e4>
   217c0:	42000204 	addi	r8,r8,8
   217c4:	9480010c 	andi	r18,r18,4
   217c8:	90003226 	beq	r18,zero,21894 <___vfprintf_internal_r+0xae4>
   217cc:	d9403117 	ldw	r5,196(sp)
   217d0:	d8802917 	ldw	r2,164(sp)
   217d4:	28a1c83a 	sub	r16,r5,r2
   217d8:	04002e0e 	bge	zero,r16,21894 <___vfprintf_internal_r+0xae4>
   217dc:	04400404 	movi	r17,16
   217e0:	d8801f17 	ldw	r2,124(sp)
   217e4:	8c04c40e 	bge	r17,r16,22af8 <___vfprintf_internal_r+0x1d48>
   217e8:	014000f4 	movhi	r5,3
   217ec:	2942cd84 	addi	r5,r5,2870
   217f0:	d9403515 	stw	r5,212(sp)
   217f4:	048001c4 	movi	r18,7
   217f8:	dcc02d17 	ldw	r19,180(sp)
   217fc:	00000306 	br	2180c <___vfprintf_internal_r+0xa5c>
   21800:	843ffc04 	addi	r16,r16,-16
   21804:	42000204 	addi	r8,r8,8
   21808:	8c00130e 	bge	r17,r16,21858 <___vfprintf_internal_r+0xaa8>
   2180c:	010000f4 	movhi	r4,3
   21810:	18c00404 	addi	r3,r3,16
   21814:	10800044 	addi	r2,r2,1
   21818:	2102cd84 	addi	r4,r4,2870
   2181c:	41000015 	stw	r4,0(r8)
   21820:	44400115 	stw	r17,4(r8)
   21824:	d8c02015 	stw	r3,128(sp)
   21828:	d8801f15 	stw	r2,124(sp)
   2182c:	90bff40e 	bge	r18,r2,21800 <__alt_data_end+0xfffe1800>
   21830:	d9801e04 	addi	r6,sp,120
   21834:	b80b883a 	mov	r5,r23
   21838:	9809883a 	mov	r4,r19
   2183c:	00285900 	call	28590 <__sprint_r>
   21840:	103e5f1e 	bne	r2,zero,211c0 <__alt_data_end+0xfffe11c0>
   21844:	843ffc04 	addi	r16,r16,-16
   21848:	d8c02017 	ldw	r3,128(sp)
   2184c:	d8801f17 	ldw	r2,124(sp)
   21850:	da000404 	addi	r8,sp,16
   21854:	8c3fed16 	blt	r17,r16,2180c <__alt_data_end+0xfffe180c>
   21858:	d9403517 	ldw	r5,212(sp)
   2185c:	1c07883a 	add	r3,r3,r16
   21860:	10800044 	addi	r2,r2,1
   21864:	41400015 	stw	r5,0(r8)
   21868:	44000115 	stw	r16,4(r8)
   2186c:	d8c02015 	stw	r3,128(sp)
   21870:	d8801f15 	stw	r2,124(sp)
   21874:	010001c4 	movi	r4,7
   21878:	2080060e 	bge	r4,r2,21894 <___vfprintf_internal_r+0xae4>
   2187c:	d9002d17 	ldw	r4,180(sp)
   21880:	d9801e04 	addi	r6,sp,120
   21884:	b80b883a 	mov	r5,r23
   21888:	00285900 	call	28590 <__sprint_r>
   2188c:	103e4c1e 	bne	r2,zero,211c0 <__alt_data_end+0xfffe11c0>
   21890:	d8c02017 	ldw	r3,128(sp)
   21894:	d8803117 	ldw	r2,196(sp)
   21898:	d9002917 	ldw	r4,164(sp)
   2189c:	1100010e 	bge	r2,r4,218a4 <___vfprintf_internal_r+0xaf4>
   218a0:	2005883a 	mov	r2,r4
   218a4:	d9402f17 	ldw	r5,188(sp)
   218a8:	288b883a 	add	r5,r5,r2
   218ac:	d9402f15 	stw	r5,188(sp)
   218b0:	1801c01e 	bne	r3,zero,21fb4 <___vfprintf_internal_r+0x1204>
   218b4:	a8800007 	ldb	r2,0(r21)
   218b8:	d8001f15 	stw	zero,124(sp)
   218bc:	da000404 	addi	r8,sp,16
   218c0:	103d751e 	bne	r2,zero,20e98 <__alt_data_end+0xfffe0e98>
   218c4:	a823883a 	mov	r17,r21
   218c8:	003d8b06 	br	20ef8 <__alt_data_end+0xfffe0ef8>
   218cc:	8025883a 	mov	r18,r16
   218d0:	dc002903 	ldbu	r16,164(sp)
   218d4:	e011883a 	mov	r8,fp
   218d8:	84003fcc 	andi	r16,r16,255
   218dc:	8005e51e 	bne	r16,zero,23074 <___vfprintf_internal_r+0x22c4>
   218e0:	94800414 	ori	r18,r18,16
   218e4:	9080080c 	andi	r2,r18,32
   218e8:	10022b26 	beq	r2,zero,22198 <___vfprintf_internal_r+0x13e8>
   218ec:	d9002e17 	ldw	r4,184(sp)
   218f0:	d9402a17 	ldw	r5,168(sp)
   218f4:	d8002785 	stb	zero,158(sp)
   218f8:	20c00204 	addi	r3,r4,8
   218fc:	24c00017 	ldw	r19,0(r4)
   21900:	25800117 	ldw	r22,4(r4)
   21904:	28042e16 	blt	r5,zero,229c0 <___vfprintf_internal_r+0x1c10>
   21908:	013fdfc4 	movi	r4,-129
   2190c:	9d84b03a 	or	r2,r19,r22
   21910:	d8c02e15 	stw	r3,184(sp)
   21914:	9124703a 	and	r18,r18,r4
   21918:	0039883a 	mov	fp,zero
   2191c:	103e801e 	bne	r2,zero,21320 <__alt_data_end+0xfffe1320>
   21920:	d9002a17 	ldw	r4,168(sp)
   21924:	2002e01e 	bne	r4,zero,224a8 <___vfprintf_internal_r+0x16f8>
   21928:	d8002a15 	stw	zero,168(sp)
   2192c:	d8002b15 	stw	zero,172(sp)
   21930:	dc001e04 	addi	r16,sp,120
   21934:	003ef506 	br	2150c <__alt_data_end+0xfffe150c>
   21938:	8025883a 	mov	r18,r16
   2193c:	dc002903 	ldbu	r16,164(sp)
   21940:	e011883a 	mov	r8,fp
   21944:	84003fcc 	andi	r16,r16,255
   21948:	8005ba1e 	bne	r16,zero,23034 <___vfprintf_internal_r+0x2284>
   2194c:	010000f4 	movhi	r4,3
   21950:	2102bd04 	addi	r4,r4,2804
   21954:	d9003915 	stw	r4,228(sp)
   21958:	9080080c 	andi	r2,r18,32
   2195c:	10006126 	beq	r2,zero,21ae4 <___vfprintf_internal_r+0xd34>
   21960:	d9402e17 	ldw	r5,184(sp)
   21964:	2cc00017 	ldw	r19,0(r5)
   21968:	2d800117 	ldw	r22,4(r5)
   2196c:	29400204 	addi	r5,r5,8
   21970:	d9402e15 	stw	r5,184(sp)
   21974:	9080004c 	andi	r2,r18,1
   21978:	1001ac26 	beq	r2,zero,2202c <___vfprintf_internal_r+0x127c>
   2197c:	9d84b03a 	or	r2,r19,r22
   21980:	10038526 	beq	r2,zero,22798 <___vfprintf_internal_r+0x19e8>
   21984:	d8c02a17 	ldw	r3,168(sp)
   21988:	00800c04 	movi	r2,48
   2198c:	d8802705 	stb	r2,156(sp)
   21990:	dc402745 	stb	r17,157(sp)
   21994:	d8002785 	stb	zero,158(sp)
   21998:	90800094 	ori	r2,r18,2
   2199c:	18047916 	blt	r3,zero,22b84 <___vfprintf_internal_r+0x1dd4>
   219a0:	00bfdfc4 	movi	r2,-129
   219a4:	90a4703a 	and	r18,r18,r2
   219a8:	94800094 	ori	r18,r18,2
   219ac:	0039883a 	mov	fp,zero
   219b0:	d9003917 	ldw	r4,228(sp)
   219b4:	dc001e04 	addi	r16,sp,120
   219b8:	988003cc 	andi	r2,r19,15
   219bc:	b006973a 	slli	r3,r22,28
   219c0:	2085883a 	add	r2,r4,r2
   219c4:	9826d13a 	srli	r19,r19,4
   219c8:	10800003 	ldbu	r2,0(r2)
   219cc:	b02cd13a 	srli	r22,r22,4
   219d0:	843fffc4 	addi	r16,r16,-1
   219d4:	1ce6b03a 	or	r19,r3,r19
   219d8:	80800005 	stb	r2,0(r16)
   219dc:	9d84b03a 	or	r2,r19,r22
   219e0:	103ff51e 	bne	r2,zero,219b8 <__alt_data_end+0xfffe19b8>
   219e4:	d8c02817 	ldw	r3,160(sp)
   219e8:	1c07c83a 	sub	r3,r3,r16
   219ec:	d8c02b15 	stw	r3,172(sp)
   219f0:	003ec606 	br	2150c <__alt_data_end+0xfffe150c>
   219f4:	8025883a 	mov	r18,r16
   219f8:	dc002903 	ldbu	r16,164(sp)
   219fc:	e011883a 	mov	r8,fp
   21a00:	84003fcc 	andi	r16,r16,255
   21a04:	803e9626 	beq	r16,zero,21460 <__alt_data_end+0xfffe1460>
   21a08:	d8c02b03 	ldbu	r3,172(sp)
   21a0c:	d8c02785 	stb	r3,158(sp)
   21a10:	003e9306 	br	21460 <__alt_data_end+0xfffe1460>
   21a14:	00c00044 	movi	r3,1
   21a18:	d8c02905 	stb	r3,164(sp)
   21a1c:	00c00ac4 	movi	r3,43
   21a20:	d8c02b05 	stb	r3,172(sp)
   21a24:	ac400007 	ldb	r17,0(r21)
   21a28:	003d4306 	br	20f38 <__alt_data_end+0xfffe0f38>
   21a2c:	84000814 	ori	r16,r16,32
   21a30:	ac400007 	ldb	r17,0(r21)
   21a34:	003d4006 	br	20f38 <__alt_data_end+0xfffe0f38>
   21a38:	d8802e17 	ldw	r2,184(sp)
   21a3c:	8025883a 	mov	r18,r16
   21a40:	d8002785 	stb	zero,158(sp)
   21a44:	14000017 	ldw	r16,0(r2)
   21a48:	e011883a 	mov	r8,fp
   21a4c:	14c00104 	addi	r19,r2,4
   21a50:	80042d26 	beq	r16,zero,22b08 <___vfprintf_internal_r+0x1d58>
   21a54:	d8c02a17 	ldw	r3,168(sp)
   21a58:	1803e416 	blt	r3,zero,229ec <___vfprintf_internal_r+0x1c3c>
   21a5c:	180d883a 	mov	r6,r3
   21a60:	000b883a 	mov	r5,zero
   21a64:	8009883a 	mov	r4,r16
   21a68:	df003d15 	stw	fp,244(sp)
   21a6c:	00266e80 	call	266e8 <memchr>
   21a70:	da003d17 	ldw	r8,244(sp)
   21a74:	10046826 	beq	r2,zero,22c18 <___vfprintf_internal_r+0x1e68>
   21a78:	1405c83a 	sub	r2,r2,r16
   21a7c:	d8802b15 	stw	r2,172(sp)
   21a80:	1003e016 	blt	r2,zero,22a04 <___vfprintf_internal_r+0x1c54>
   21a84:	df002783 	ldbu	fp,158(sp)
   21a88:	d8802915 	stw	r2,164(sp)
   21a8c:	dcc02e15 	stw	r19,184(sp)
   21a90:	d8002a15 	stw	zero,168(sp)
   21a94:	d8003215 	stw	zero,200(sp)
   21a98:	003ea206 	br	21524 <__alt_data_end+0xfffe1524>
   21a9c:	8025883a 	mov	r18,r16
   21aa0:	dc002903 	ldbu	r16,164(sp)
   21aa4:	e011883a 	mov	r8,fp
   21aa8:	84003fcc 	andi	r16,r16,255
   21aac:	803f8d26 	beq	r16,zero,218e4 <__alt_data_end+0xfffe18e4>
   21ab0:	d8c02b03 	ldbu	r3,172(sp)
   21ab4:	d8c02785 	stb	r3,158(sp)
   21ab8:	003f8a06 	br	218e4 <__alt_data_end+0xfffe18e4>
   21abc:	8025883a 	mov	r18,r16
   21ac0:	dc002903 	ldbu	r16,164(sp)
   21ac4:	e011883a 	mov	r8,fp
   21ac8:	84003fcc 	andi	r16,r16,255
   21acc:	8005661e 	bne	r16,zero,23068 <___vfprintf_internal_r+0x22b8>
   21ad0:	010000f4 	movhi	r4,3
   21ad4:	2102c204 	addi	r4,r4,2824
   21ad8:	d9003915 	stw	r4,228(sp)
   21adc:	9080080c 	andi	r2,r18,32
   21ae0:	103f9f1e 	bne	r2,zero,21960 <__alt_data_end+0xfffe1960>
   21ae4:	9080040c 	andi	r2,r18,16
   21ae8:	1002eb26 	beq	r2,zero,22698 <___vfprintf_internal_r+0x18e8>
   21aec:	d8802e17 	ldw	r2,184(sp)
   21af0:	002d883a 	mov	r22,zero
   21af4:	14c00017 	ldw	r19,0(r2)
   21af8:	10800104 	addi	r2,r2,4
   21afc:	d8802e15 	stw	r2,184(sp)
   21b00:	003f9c06 	br	21974 <__alt_data_end+0xfffe1974>
   21b04:	d8802b07 	ldb	r2,172(sp)
   21b08:	1002e11e 	bne	r2,zero,22690 <___vfprintf_internal_r+0x18e0>
   21b0c:	00c00044 	movi	r3,1
   21b10:	d8c02905 	stb	r3,164(sp)
   21b14:	00c00804 	movi	r3,32
   21b18:	d8c02b05 	stb	r3,172(sp)
   21b1c:	ac400007 	ldb	r17,0(r21)
   21b20:	003d0506 	br	20f38 <__alt_data_end+0xfffe0f38>
   21b24:	84000054 	ori	r16,r16,1
   21b28:	ac400007 	ldb	r17,0(r21)
   21b2c:	003d0206 	br	20f38 <__alt_data_end+0xfffe0f38>
   21b30:	8025883a 	mov	r18,r16
   21b34:	dc002903 	ldbu	r16,164(sp)
   21b38:	e011883a 	mov	r8,fp
   21b3c:	84003fcc 	andi	r16,r16,255
   21b40:	803de726 	beq	r16,zero,212e0 <__alt_data_end+0xfffe12e0>
   21b44:	d8c02b03 	ldbu	r3,172(sp)
   21b48:	d8c02785 	stb	r3,158(sp)
   21b4c:	003de406 	br	212e0 <__alt_data_end+0xfffe12e0>
   21b50:	84001014 	ori	r16,r16,64
   21b54:	ac400007 	ldb	r17,0(r21)
   21b58:	003cf706 	br	20f38 <__alt_data_end+0xfffe0f38>
   21b5c:	ac400007 	ldb	r17,0(r21)
   21b60:	00801b04 	movi	r2,108
   21b64:	88838f26 	beq	r17,r2,229a4 <___vfprintf_internal_r+0x1bf4>
   21b68:	84000414 	ori	r16,r16,16
   21b6c:	003cf206 	br	20f38 <__alt_data_end+0xfffe0f38>
   21b70:	8025883a 	mov	r18,r16
   21b74:	dc002903 	ldbu	r16,164(sp)
   21b78:	e011883a 	mov	r8,fp
   21b7c:	84003fcc 	andi	r16,r16,255
   21b80:	80053f1e 	bne	r16,zero,23080 <___vfprintf_internal_r+0x22d0>
   21b84:	9080080c 	andi	r2,r18,32
   21b88:	1002d226 	beq	r2,zero,226d4 <___vfprintf_internal_r+0x1924>
   21b8c:	d9002e17 	ldw	r4,184(sp)
   21b90:	d9402f17 	ldw	r5,188(sp)
   21b94:	20800017 	ldw	r2,0(r4)
   21b98:	2807d7fa 	srai	r3,r5,31
   21b9c:	21000104 	addi	r4,r4,4
   21ba0:	d9002e15 	stw	r4,184(sp)
   21ba4:	11400015 	stw	r5,0(r2)
   21ba8:	10c00115 	stw	r3,4(r2)
   21bac:	003cb806 	br	20e90 <__alt_data_end+0xfffe0e90>
   21bb0:	d8c02e17 	ldw	r3,184(sp)
   21bb4:	d9002e17 	ldw	r4,184(sp)
   21bb8:	8025883a 	mov	r18,r16
   21bbc:	18800017 	ldw	r2,0(r3)
   21bc0:	21000104 	addi	r4,r4,4
   21bc4:	00c00044 	movi	r3,1
   21bc8:	e011883a 	mov	r8,fp
   21bcc:	d8c02915 	stw	r3,164(sp)
   21bd0:	d8002785 	stb	zero,158(sp)
   21bd4:	d8801405 	stb	r2,80(sp)
   21bd8:	d9002e15 	stw	r4,184(sp)
   21bdc:	d8c02b15 	stw	r3,172(sp)
   21be0:	d8002a15 	stw	zero,168(sp)
   21be4:	d8003215 	stw	zero,200(sp)
   21be8:	dc001404 	addi	r16,sp,80
   21bec:	0039883a 	mov	fp,zero
   21bf0:	003e5306 	br	21540 <__alt_data_end+0xfffe1540>
   21bf4:	010000f4 	movhi	r4,3
   21bf8:	2102c204 	addi	r4,r4,2824
   21bfc:	0039883a 	mov	fp,zero
   21c00:	d9003915 	stw	r4,228(sp)
   21c04:	04401e04 	movi	r17,120
   21c08:	003f6906 	br	219b0 <__alt_data_end+0xfffe19b0>
   21c0c:	8025883a 	mov	r18,r16
   21c10:	dc002903 	ldbu	r16,164(sp)
   21c14:	e011883a 	mov	r8,fp
   21c18:	84003fcc 	andi	r16,r16,255
   21c1c:	8005081e 	bne	r16,zero,23040 <___vfprintf_internal_r+0x2290>
   21c20:	883d6126 	beq	r17,zero,211a8 <__alt_data_end+0xfffe11a8>
   21c24:	00c00044 	movi	r3,1
   21c28:	d8c02915 	stw	r3,164(sp)
   21c2c:	dc401405 	stb	r17,80(sp)
   21c30:	d8002785 	stb	zero,158(sp)
   21c34:	003fe906 	br	21bdc <__alt_data_end+0xfffe1bdc>
   21c38:	014000f4 	movhi	r5,3
   21c3c:	2942c204 	addi	r5,r5,2824
   21c40:	d9403915 	stw	r5,228(sp)
   21c44:	d8c02e15 	stw	r3,184(sp)
   21c48:	1025883a 	mov	r18,r2
   21c4c:	04401e04 	movi	r17,120
   21c50:	9d84b03a 	or	r2,r19,r22
   21c54:	1000fc1e 	bne	r2,zero,22048 <___vfprintf_internal_r+0x1298>
   21c58:	0039883a 	mov	fp,zero
   21c5c:	00800084 	movi	r2,2
   21c60:	10803fcc 	andi	r2,r2,255
   21c64:	00c00044 	movi	r3,1
   21c68:	10c20f26 	beq	r2,r3,224a8 <___vfprintf_internal_r+0x16f8>
   21c6c:	00c00084 	movi	r3,2
   21c70:	10fd3326 	beq	r2,r3,21140 <__alt_data_end+0xfffe1140>
   21c74:	003e0b06 	br	214a4 <__alt_data_end+0xfffe14a4>
   21c78:	d8c02017 	ldw	r3,128(sp)
   21c7c:	003e7106 	br	21644 <__alt_data_end+0xfffe1644>
   21c80:	00801944 	movi	r2,101
   21c84:	14407e0e 	bge	r2,r17,21e80 <___vfprintf_internal_r+0x10d0>
   21c88:	d9003617 	ldw	r4,216(sp)
   21c8c:	d9403817 	ldw	r5,224(sp)
   21c90:	000d883a 	mov	r6,zero
   21c94:	000f883a 	mov	r7,zero
   21c98:	d8c03c15 	stw	r3,240(sp)
   21c9c:	da003d15 	stw	r8,244(sp)
   21ca0:	002c33c0 	call	2c33c <__eqdf2>
   21ca4:	d8c03c17 	ldw	r3,240(sp)
   21ca8:	da003d17 	ldw	r8,244(sp)
   21cac:	1000f71e 	bne	r2,zero,2208c <___vfprintf_internal_r+0x12dc>
   21cb0:	d8801f17 	ldw	r2,124(sp)
   21cb4:	010000f4 	movhi	r4,3
   21cb8:	2102c904 	addi	r4,r4,2852
   21cbc:	18c00044 	addi	r3,r3,1
   21cc0:	10800044 	addi	r2,r2,1
   21cc4:	41000015 	stw	r4,0(r8)
   21cc8:	01000044 	movi	r4,1
   21ccc:	41000115 	stw	r4,4(r8)
   21cd0:	d8c02015 	stw	r3,128(sp)
   21cd4:	d8801f15 	stw	r2,124(sp)
   21cd8:	010001c4 	movi	r4,7
   21cdc:	2082b816 	blt	r4,r2,227c0 <___vfprintf_internal_r+0x1a10>
   21ce0:	42000204 	addi	r8,r8,8
   21ce4:	d8802617 	ldw	r2,152(sp)
   21ce8:	d9403317 	ldw	r5,204(sp)
   21cec:	11400216 	blt	r2,r5,21cf8 <___vfprintf_internal_r+0xf48>
   21cf0:	9080004c 	andi	r2,r18,1
   21cf4:	103eb326 	beq	r2,zero,217c4 <__alt_data_end+0xfffe17c4>
   21cf8:	d8803717 	ldw	r2,220(sp)
   21cfc:	d9003417 	ldw	r4,208(sp)
   21d00:	d9403717 	ldw	r5,220(sp)
   21d04:	1887883a 	add	r3,r3,r2
   21d08:	d8801f17 	ldw	r2,124(sp)
   21d0c:	41000015 	stw	r4,0(r8)
   21d10:	41400115 	stw	r5,4(r8)
   21d14:	10800044 	addi	r2,r2,1
   21d18:	d8c02015 	stw	r3,128(sp)
   21d1c:	d8801f15 	stw	r2,124(sp)
   21d20:	010001c4 	movi	r4,7
   21d24:	20832916 	blt	r4,r2,229cc <___vfprintf_internal_r+0x1c1c>
   21d28:	42000204 	addi	r8,r8,8
   21d2c:	d8803317 	ldw	r2,204(sp)
   21d30:	143fffc4 	addi	r16,r2,-1
   21d34:	043ea30e 	bge	zero,r16,217c4 <__alt_data_end+0xfffe17c4>
   21d38:	04400404 	movi	r17,16
   21d3c:	d8801f17 	ldw	r2,124(sp)
   21d40:	8c00880e 	bge	r17,r16,21f64 <___vfprintf_internal_r+0x11b4>
   21d44:	014000f4 	movhi	r5,3
   21d48:	2942c984 	addi	r5,r5,2854
   21d4c:	d9402c15 	stw	r5,176(sp)
   21d50:	058001c4 	movi	r22,7
   21d54:	dcc02d17 	ldw	r19,180(sp)
   21d58:	00000306 	br	21d68 <___vfprintf_internal_r+0xfb8>
   21d5c:	42000204 	addi	r8,r8,8
   21d60:	843ffc04 	addi	r16,r16,-16
   21d64:	8c00820e 	bge	r17,r16,21f70 <___vfprintf_internal_r+0x11c0>
   21d68:	18c00404 	addi	r3,r3,16
   21d6c:	10800044 	addi	r2,r2,1
   21d70:	45000015 	stw	r20,0(r8)
   21d74:	44400115 	stw	r17,4(r8)
   21d78:	d8c02015 	stw	r3,128(sp)
   21d7c:	d8801f15 	stw	r2,124(sp)
   21d80:	b0bff60e 	bge	r22,r2,21d5c <__alt_data_end+0xfffe1d5c>
   21d84:	d9801e04 	addi	r6,sp,120
   21d88:	b80b883a 	mov	r5,r23
   21d8c:	9809883a 	mov	r4,r19
   21d90:	00285900 	call	28590 <__sprint_r>
   21d94:	103d0a1e 	bne	r2,zero,211c0 <__alt_data_end+0xfffe11c0>
   21d98:	d8c02017 	ldw	r3,128(sp)
   21d9c:	d8801f17 	ldw	r2,124(sp)
   21da0:	da000404 	addi	r8,sp,16
   21da4:	003fee06 	br	21d60 <__alt_data_end+0xfffe1d60>
   21da8:	d9403117 	ldw	r5,196(sp)
   21dac:	d8802917 	ldw	r2,164(sp)
   21db0:	28adc83a 	sub	r22,r5,r2
   21db4:	05be410e 	bge	zero,r22,216bc <__alt_data_end+0xfffe16bc>
   21db8:	07000404 	movi	fp,16
   21dbc:	d8801f17 	ldw	r2,124(sp)
   21dc0:	e5838f0e 	bge	fp,r22,22c00 <___vfprintf_internal_r+0x1e50>
   21dc4:	014000f4 	movhi	r5,3
   21dc8:	2942c984 	addi	r5,r5,2854
   21dcc:	dc403015 	stw	r17,192(sp)
   21dd0:	d9402c15 	stw	r5,176(sp)
   21dd4:	b023883a 	mov	r17,r22
   21dd8:	04c001c4 	movi	r19,7
   21ddc:	a82d883a 	mov	r22,r21
   21de0:	902b883a 	mov	r21,r18
   21de4:	8025883a 	mov	r18,r16
   21de8:	dc002d17 	ldw	r16,180(sp)
   21dec:	00000306 	br	21dfc <___vfprintf_internal_r+0x104c>
   21df0:	8c7ffc04 	addi	r17,r17,-16
   21df4:	42000204 	addi	r8,r8,8
   21df8:	e440110e 	bge	fp,r17,21e40 <___vfprintf_internal_r+0x1090>
   21dfc:	18c00404 	addi	r3,r3,16
   21e00:	10800044 	addi	r2,r2,1
   21e04:	45000015 	stw	r20,0(r8)
   21e08:	47000115 	stw	fp,4(r8)
   21e0c:	d8c02015 	stw	r3,128(sp)
   21e10:	d8801f15 	stw	r2,124(sp)
   21e14:	98bff60e 	bge	r19,r2,21df0 <__alt_data_end+0xfffe1df0>
   21e18:	d9801e04 	addi	r6,sp,120
   21e1c:	b80b883a 	mov	r5,r23
   21e20:	8009883a 	mov	r4,r16
   21e24:	00285900 	call	28590 <__sprint_r>
   21e28:	103ce51e 	bne	r2,zero,211c0 <__alt_data_end+0xfffe11c0>
   21e2c:	8c7ffc04 	addi	r17,r17,-16
   21e30:	d8c02017 	ldw	r3,128(sp)
   21e34:	d8801f17 	ldw	r2,124(sp)
   21e38:	da000404 	addi	r8,sp,16
   21e3c:	e47fef16 	blt	fp,r17,21dfc <__alt_data_end+0xfffe1dfc>
   21e40:	9021883a 	mov	r16,r18
   21e44:	a825883a 	mov	r18,r21
   21e48:	b02b883a 	mov	r21,r22
   21e4c:	882d883a 	mov	r22,r17
   21e50:	dc403017 	ldw	r17,192(sp)
   21e54:	d9002c17 	ldw	r4,176(sp)
   21e58:	1d87883a 	add	r3,r3,r22
   21e5c:	10800044 	addi	r2,r2,1
   21e60:	41000015 	stw	r4,0(r8)
   21e64:	45800115 	stw	r22,4(r8)
   21e68:	d8c02015 	stw	r3,128(sp)
   21e6c:	d8801f15 	stw	r2,124(sp)
   21e70:	010001c4 	movi	r4,7
   21e74:	20818e16 	blt	r4,r2,224b0 <___vfprintf_internal_r+0x1700>
   21e78:	42000204 	addi	r8,r8,8
   21e7c:	003e0f06 	br	216bc <__alt_data_end+0xfffe16bc>
   21e80:	d9403317 	ldw	r5,204(sp)
   21e84:	00800044 	movi	r2,1
   21e88:	18c00044 	addi	r3,r3,1
   21e8c:	1141530e 	bge	r2,r5,223dc <___vfprintf_internal_r+0x162c>
   21e90:	dc401f17 	ldw	r17,124(sp)
   21e94:	00800044 	movi	r2,1
   21e98:	40800115 	stw	r2,4(r8)
   21e9c:	8c400044 	addi	r17,r17,1
   21ea0:	44000015 	stw	r16,0(r8)
   21ea4:	d8c02015 	stw	r3,128(sp)
   21ea8:	dc401f15 	stw	r17,124(sp)
   21eac:	008001c4 	movi	r2,7
   21eb0:	14416b16 	blt	r2,r17,22460 <___vfprintf_internal_r+0x16b0>
   21eb4:	42000204 	addi	r8,r8,8
   21eb8:	d8803717 	ldw	r2,220(sp)
   21ebc:	d9003417 	ldw	r4,208(sp)
   21ec0:	8c400044 	addi	r17,r17,1
   21ec4:	10c7883a 	add	r3,r2,r3
   21ec8:	40800115 	stw	r2,4(r8)
   21ecc:	41000015 	stw	r4,0(r8)
   21ed0:	d8c02015 	stw	r3,128(sp)
   21ed4:	dc401f15 	stw	r17,124(sp)
   21ed8:	008001c4 	movi	r2,7
   21edc:	14416916 	blt	r2,r17,22484 <___vfprintf_internal_r+0x16d4>
   21ee0:	45800204 	addi	r22,r8,8
   21ee4:	d9003617 	ldw	r4,216(sp)
   21ee8:	d9403817 	ldw	r5,224(sp)
   21eec:	000d883a 	mov	r6,zero
   21ef0:	000f883a 	mov	r7,zero
   21ef4:	d8c03c15 	stw	r3,240(sp)
   21ef8:	002c33c0 	call	2c33c <__eqdf2>
   21efc:	d8c03c17 	ldw	r3,240(sp)
   21f00:	1000bc26 	beq	r2,zero,221f4 <___vfprintf_internal_r+0x1444>
   21f04:	d9403317 	ldw	r5,204(sp)
   21f08:	84000044 	addi	r16,r16,1
   21f0c:	8c400044 	addi	r17,r17,1
   21f10:	28bfffc4 	addi	r2,r5,-1
   21f14:	1887883a 	add	r3,r3,r2
   21f18:	b0800115 	stw	r2,4(r22)
   21f1c:	b4000015 	stw	r16,0(r22)
   21f20:	d8c02015 	stw	r3,128(sp)
   21f24:	dc401f15 	stw	r17,124(sp)
   21f28:	008001c4 	movi	r2,7
   21f2c:	14414316 	blt	r2,r17,2243c <___vfprintf_internal_r+0x168c>
   21f30:	b5800204 	addi	r22,r22,8
   21f34:	d9003a17 	ldw	r4,232(sp)
   21f38:	df0022c4 	addi	fp,sp,139
   21f3c:	8c400044 	addi	r17,r17,1
   21f40:	20c7883a 	add	r3,r4,r3
   21f44:	b7000015 	stw	fp,0(r22)
   21f48:	b1000115 	stw	r4,4(r22)
   21f4c:	d8c02015 	stw	r3,128(sp)
   21f50:	dc401f15 	stw	r17,124(sp)
   21f54:	008001c4 	movi	r2,7
   21f58:	14400e16 	blt	r2,r17,21f94 <___vfprintf_internal_r+0x11e4>
   21f5c:	b2000204 	addi	r8,r22,8
   21f60:	003e1806 	br	217c4 <__alt_data_end+0xfffe17c4>
   21f64:	010000f4 	movhi	r4,3
   21f68:	2102c984 	addi	r4,r4,2854
   21f6c:	d9002c15 	stw	r4,176(sp)
   21f70:	d9002c17 	ldw	r4,176(sp)
   21f74:	1c07883a 	add	r3,r3,r16
   21f78:	44000115 	stw	r16,4(r8)
   21f7c:	41000015 	stw	r4,0(r8)
   21f80:	10800044 	addi	r2,r2,1
   21f84:	d8c02015 	stw	r3,128(sp)
   21f88:	d8801f15 	stw	r2,124(sp)
   21f8c:	010001c4 	movi	r4,7
   21f90:	20be0b0e 	bge	r4,r2,217c0 <__alt_data_end+0xfffe17c0>
   21f94:	d9002d17 	ldw	r4,180(sp)
   21f98:	d9801e04 	addi	r6,sp,120
   21f9c:	b80b883a 	mov	r5,r23
   21fa0:	00285900 	call	28590 <__sprint_r>
   21fa4:	103c861e 	bne	r2,zero,211c0 <__alt_data_end+0xfffe11c0>
   21fa8:	d8c02017 	ldw	r3,128(sp)
   21fac:	da000404 	addi	r8,sp,16
   21fb0:	003e0406 	br	217c4 <__alt_data_end+0xfffe17c4>
   21fb4:	d9002d17 	ldw	r4,180(sp)
   21fb8:	d9801e04 	addi	r6,sp,120
   21fbc:	b80b883a 	mov	r5,r23
   21fc0:	00285900 	call	28590 <__sprint_r>
   21fc4:	103e3b26 	beq	r2,zero,218b4 <__alt_data_end+0xfffe18b4>
   21fc8:	003c7d06 	br	211c0 <__alt_data_end+0xfffe11c0>
   21fcc:	d9002d17 	ldw	r4,180(sp)
   21fd0:	d9801e04 	addi	r6,sp,120
   21fd4:	b80b883a 	mov	r5,r23
   21fd8:	00285900 	call	28590 <__sprint_r>
   21fdc:	103c781e 	bne	r2,zero,211c0 <__alt_data_end+0xfffe11c0>
   21fe0:	d8c02017 	ldw	r3,128(sp)
   21fe4:	da000404 	addi	r8,sp,16
   21fe8:	003de906 	br	21790 <__alt_data_end+0xfffe1790>
   21fec:	d9002d17 	ldw	r4,180(sp)
   21ff0:	d9801e04 	addi	r6,sp,120
   21ff4:	b80b883a 	mov	r5,r23
   21ff8:	00285900 	call	28590 <__sprint_r>
   21ffc:	103c701e 	bne	r2,zero,211c0 <__alt_data_end+0xfffe11c0>
   22000:	d8c02017 	ldw	r3,128(sp)
   22004:	da000404 	addi	r8,sp,16
   22008:	003d9b06 	br	21678 <__alt_data_end+0xfffe1678>
   2200c:	d9002d17 	ldw	r4,180(sp)
   22010:	d9801e04 	addi	r6,sp,120
   22014:	b80b883a 	mov	r5,r23
   22018:	00285900 	call	28590 <__sprint_r>
   2201c:	103c681e 	bne	r2,zero,211c0 <__alt_data_end+0xfffe11c0>
   22020:	d8c02017 	ldw	r3,128(sp)
   22024:	da000404 	addi	r8,sp,16
   22028:	003da106 	br	216b0 <__alt_data_end+0xfffe16b0>
   2202c:	d9402a17 	ldw	r5,168(sp)
   22030:	d8002785 	stb	zero,158(sp)
   22034:	283f0616 	blt	r5,zero,21c50 <__alt_data_end+0xfffe1c50>
   22038:	00ffdfc4 	movi	r3,-129
   2203c:	9d84b03a 	or	r2,r19,r22
   22040:	90e4703a 	and	r18,r18,r3
   22044:	103c3b26 	beq	r2,zero,21134 <__alt_data_end+0xfffe1134>
   22048:	0039883a 	mov	fp,zero
   2204c:	003e5806 	br	219b0 <__alt_data_end+0xfffe19b0>
   22050:	9080040c 	andi	r2,r18,16
   22054:	1001b326 	beq	r2,zero,22724 <___vfprintf_internal_r+0x1974>
   22058:	d8c02e17 	ldw	r3,184(sp)
   2205c:	d9002a17 	ldw	r4,168(sp)
   22060:	d8002785 	stb	zero,158(sp)
   22064:	18800104 	addi	r2,r3,4
   22068:	1cc00017 	ldw	r19,0(r3)
   2206c:	002d883a 	mov	r22,zero
   22070:	2001b516 	blt	r4,zero,22748 <___vfprintf_internal_r+0x1998>
   22074:	00ffdfc4 	movi	r3,-129
   22078:	d8802e15 	stw	r2,184(sp)
   2207c:	90e4703a 	and	r18,r18,r3
   22080:	983d0526 	beq	r19,zero,21498 <__alt_data_end+0xfffe1498>
   22084:	0039883a 	mov	fp,zero
   22088:	003d0806 	br	214ac <__alt_data_end+0xfffe14ac>
   2208c:	dc402617 	ldw	r17,152(sp)
   22090:	0441d30e 	bge	zero,r17,227e0 <___vfprintf_internal_r+0x1a30>
   22094:	dc403217 	ldw	r17,200(sp)
   22098:	d8803317 	ldw	r2,204(sp)
   2209c:	1440010e 	bge	r2,r17,220a4 <___vfprintf_internal_r+0x12f4>
   220a0:	1023883a 	mov	r17,r2
   220a4:	04400a0e 	bge	zero,r17,220d0 <___vfprintf_internal_r+0x1320>
   220a8:	d8801f17 	ldw	r2,124(sp)
   220ac:	1c47883a 	add	r3,r3,r17
   220b0:	44000015 	stw	r16,0(r8)
   220b4:	10800044 	addi	r2,r2,1
   220b8:	44400115 	stw	r17,4(r8)
   220bc:	d8c02015 	stw	r3,128(sp)
   220c0:	d8801f15 	stw	r2,124(sp)
   220c4:	010001c4 	movi	r4,7
   220c8:	20826516 	blt	r4,r2,22a60 <___vfprintf_internal_r+0x1cb0>
   220cc:	42000204 	addi	r8,r8,8
   220d0:	88026116 	blt	r17,zero,22a58 <___vfprintf_internal_r+0x1ca8>
   220d4:	d9003217 	ldw	r4,200(sp)
   220d8:	2463c83a 	sub	r17,r4,r17
   220dc:	04407b0e 	bge	zero,r17,222cc <___vfprintf_internal_r+0x151c>
   220e0:	05800404 	movi	r22,16
   220e4:	d8801f17 	ldw	r2,124(sp)
   220e8:	b4419d0e 	bge	r22,r17,22760 <___vfprintf_internal_r+0x19b0>
   220ec:	010000f4 	movhi	r4,3
   220f0:	2102c984 	addi	r4,r4,2854
   220f4:	d9002c15 	stw	r4,176(sp)
   220f8:	070001c4 	movi	fp,7
   220fc:	dcc02d17 	ldw	r19,180(sp)
   22100:	00000306 	br	22110 <___vfprintf_internal_r+0x1360>
   22104:	42000204 	addi	r8,r8,8
   22108:	8c7ffc04 	addi	r17,r17,-16
   2210c:	b441970e 	bge	r22,r17,2276c <___vfprintf_internal_r+0x19bc>
   22110:	18c00404 	addi	r3,r3,16
   22114:	10800044 	addi	r2,r2,1
   22118:	45000015 	stw	r20,0(r8)
   2211c:	45800115 	stw	r22,4(r8)
   22120:	d8c02015 	stw	r3,128(sp)
   22124:	d8801f15 	stw	r2,124(sp)
   22128:	e0bff60e 	bge	fp,r2,22104 <__alt_data_end+0xfffe2104>
   2212c:	d9801e04 	addi	r6,sp,120
   22130:	b80b883a 	mov	r5,r23
   22134:	9809883a 	mov	r4,r19
   22138:	00285900 	call	28590 <__sprint_r>
   2213c:	103c201e 	bne	r2,zero,211c0 <__alt_data_end+0xfffe11c0>
   22140:	d8c02017 	ldw	r3,128(sp)
   22144:	d8801f17 	ldw	r2,124(sp)
   22148:	da000404 	addi	r8,sp,16
   2214c:	003fee06 	br	22108 <__alt_data_end+0xfffe2108>
   22150:	d9002d17 	ldw	r4,180(sp)
   22154:	d9801e04 	addi	r6,sp,120
   22158:	b80b883a 	mov	r5,r23
   2215c:	00285900 	call	28590 <__sprint_r>
   22160:	103c171e 	bne	r2,zero,211c0 <__alt_data_end+0xfffe11c0>
   22164:	d8c02017 	ldw	r3,128(sp)
   22168:	df002787 	ldb	fp,158(sp)
   2216c:	da000404 	addi	r8,sp,16
   22170:	003d3406 	br	21644 <__alt_data_end+0xfffe1644>
   22174:	9080040c 	andi	r2,r18,16
   22178:	10016126 	beq	r2,zero,22700 <___vfprintf_internal_r+0x1950>
   2217c:	d9402e17 	ldw	r5,184(sp)
   22180:	2cc00017 	ldw	r19,0(r5)
   22184:	29400104 	addi	r5,r5,4
   22188:	d9402e15 	stw	r5,184(sp)
   2218c:	982dd7fa 	srai	r22,r19,31
   22190:	b005883a 	mov	r2,r22
   22194:	003c5a06 	br	21300 <__alt_data_end+0xfffe1300>
   22198:	9080040c 	andi	r2,r18,16
   2219c:	10003526 	beq	r2,zero,22274 <___vfprintf_internal_r+0x14c4>
   221a0:	d8c02e17 	ldw	r3,184(sp)
   221a4:	d9002a17 	ldw	r4,168(sp)
   221a8:	d8002785 	stb	zero,158(sp)
   221ac:	18800104 	addi	r2,r3,4
   221b0:	1cc00017 	ldw	r19,0(r3)
   221b4:	002d883a 	mov	r22,zero
   221b8:	20003716 	blt	r4,zero,22298 <___vfprintf_internal_r+0x14e8>
   221bc:	00ffdfc4 	movi	r3,-129
   221c0:	d8802e15 	stw	r2,184(sp)
   221c4:	90e4703a 	and	r18,r18,r3
   221c8:	0039883a 	mov	fp,zero
   221cc:	983dd426 	beq	r19,zero,21920 <__alt_data_end+0xfffe1920>
   221d0:	00800244 	movi	r2,9
   221d4:	14fc5336 	bltu	r2,r19,21324 <__alt_data_end+0xfffe1324>
   221d8:	d8c02817 	ldw	r3,160(sp)
   221dc:	dc001dc4 	addi	r16,sp,119
   221e0:	9cc00c04 	addi	r19,r19,48
   221e4:	1c07c83a 	sub	r3,r3,r16
   221e8:	dcc01dc5 	stb	r19,119(sp)
   221ec:	d8c02b15 	stw	r3,172(sp)
   221f0:	003cc606 	br	2150c <__alt_data_end+0xfffe150c>
   221f4:	d8803317 	ldw	r2,204(sp)
   221f8:	143fffc4 	addi	r16,r2,-1
   221fc:	043f4d0e 	bge	zero,r16,21f34 <__alt_data_end+0xfffe1f34>
   22200:	07000404 	movi	fp,16
   22204:	e400810e 	bge	fp,r16,2240c <___vfprintf_internal_r+0x165c>
   22208:	014000f4 	movhi	r5,3
   2220c:	2942c984 	addi	r5,r5,2854
   22210:	d9402c15 	stw	r5,176(sp)
   22214:	01c001c4 	movi	r7,7
   22218:	dcc02d17 	ldw	r19,180(sp)
   2221c:	00000306 	br	2222c <___vfprintf_internal_r+0x147c>
   22220:	b5800204 	addi	r22,r22,8
   22224:	843ffc04 	addi	r16,r16,-16
   22228:	e4007b0e 	bge	fp,r16,22418 <___vfprintf_internal_r+0x1668>
   2222c:	18c00404 	addi	r3,r3,16
   22230:	8c400044 	addi	r17,r17,1
   22234:	b5000015 	stw	r20,0(r22)
   22238:	b7000115 	stw	fp,4(r22)
   2223c:	d8c02015 	stw	r3,128(sp)
   22240:	dc401f15 	stw	r17,124(sp)
   22244:	3c7ff60e 	bge	r7,r17,22220 <__alt_data_end+0xfffe2220>
   22248:	d9801e04 	addi	r6,sp,120
   2224c:	b80b883a 	mov	r5,r23
   22250:	9809883a 	mov	r4,r19
   22254:	d9c03c15 	stw	r7,240(sp)
   22258:	00285900 	call	28590 <__sprint_r>
   2225c:	d9c03c17 	ldw	r7,240(sp)
   22260:	103bd71e 	bne	r2,zero,211c0 <__alt_data_end+0xfffe11c0>
   22264:	d8c02017 	ldw	r3,128(sp)
   22268:	dc401f17 	ldw	r17,124(sp)
   2226c:	dd800404 	addi	r22,sp,16
   22270:	003fec06 	br	22224 <__alt_data_end+0xfffe2224>
   22274:	9080100c 	andi	r2,r18,64
   22278:	d8002785 	stb	zero,158(sp)
   2227c:	10010e26 	beq	r2,zero,226b8 <___vfprintf_internal_r+0x1908>
   22280:	d9402e17 	ldw	r5,184(sp)
   22284:	d8c02a17 	ldw	r3,168(sp)
   22288:	002d883a 	mov	r22,zero
   2228c:	28800104 	addi	r2,r5,4
   22290:	2cc0000b 	ldhu	r19,0(r5)
   22294:	183fc90e 	bge	r3,zero,221bc <__alt_data_end+0xfffe21bc>
   22298:	d8802e15 	stw	r2,184(sp)
   2229c:	0039883a 	mov	fp,zero
   222a0:	9d84b03a 	or	r2,r19,r22
   222a4:	103c1e1e 	bne	r2,zero,21320 <__alt_data_end+0xfffe1320>
   222a8:	00800044 	movi	r2,1
   222ac:	003e6c06 	br	21c60 <__alt_data_end+0xfffe1c60>
   222b0:	d9002d17 	ldw	r4,180(sp)
   222b4:	d9801e04 	addi	r6,sp,120
   222b8:	b80b883a 	mov	r5,r23
   222bc:	00285900 	call	28590 <__sprint_r>
   222c0:	103bbf1e 	bne	r2,zero,211c0 <__alt_data_end+0xfffe11c0>
   222c4:	d8c02017 	ldw	r3,128(sp)
   222c8:	da000404 	addi	r8,sp,16
   222cc:	d9003217 	ldw	r4,200(sp)
   222d0:	d8802617 	ldw	r2,152(sp)
   222d4:	d9403317 	ldw	r5,204(sp)
   222d8:	8123883a 	add	r17,r16,r4
   222dc:	11400216 	blt	r2,r5,222e8 <___vfprintf_internal_r+0x1538>
   222e0:	9100004c 	andi	r4,r18,1
   222e4:	20000d26 	beq	r4,zero,2231c <___vfprintf_internal_r+0x156c>
   222e8:	d9003717 	ldw	r4,220(sp)
   222ec:	d9403417 	ldw	r5,208(sp)
   222f0:	1907883a 	add	r3,r3,r4
   222f4:	d9001f17 	ldw	r4,124(sp)
   222f8:	41400015 	stw	r5,0(r8)
   222fc:	d9403717 	ldw	r5,220(sp)
   22300:	21000044 	addi	r4,r4,1
   22304:	d8c02015 	stw	r3,128(sp)
   22308:	41400115 	stw	r5,4(r8)
   2230c:	d9001f15 	stw	r4,124(sp)
   22310:	014001c4 	movi	r5,7
   22314:	2901e816 	blt	r5,r4,22ab8 <___vfprintf_internal_r+0x1d08>
   22318:	42000204 	addi	r8,r8,8
   2231c:	d9003317 	ldw	r4,204(sp)
   22320:	8121883a 	add	r16,r16,r4
   22324:	2085c83a 	sub	r2,r4,r2
   22328:	8461c83a 	sub	r16,r16,r17
   2232c:	1400010e 	bge	r2,r16,22334 <___vfprintf_internal_r+0x1584>
   22330:	1021883a 	mov	r16,r2
   22334:	04000a0e 	bge	zero,r16,22360 <___vfprintf_internal_r+0x15b0>
   22338:	d9001f17 	ldw	r4,124(sp)
   2233c:	1c07883a 	add	r3,r3,r16
   22340:	44400015 	stw	r17,0(r8)
   22344:	21000044 	addi	r4,r4,1
   22348:	44000115 	stw	r16,4(r8)
   2234c:	d8c02015 	stw	r3,128(sp)
   22350:	d9001f15 	stw	r4,124(sp)
   22354:	014001c4 	movi	r5,7
   22358:	2901fb16 	blt	r5,r4,22b48 <___vfprintf_internal_r+0x1d98>
   2235c:	42000204 	addi	r8,r8,8
   22360:	8001f716 	blt	r16,zero,22b40 <___vfprintf_internal_r+0x1d90>
   22364:	1421c83a 	sub	r16,r2,r16
   22368:	043d160e 	bge	zero,r16,217c4 <__alt_data_end+0xfffe17c4>
   2236c:	04400404 	movi	r17,16
   22370:	d8801f17 	ldw	r2,124(sp)
   22374:	8c3efb0e 	bge	r17,r16,21f64 <__alt_data_end+0xfffe1f64>
   22378:	014000f4 	movhi	r5,3
   2237c:	2942c984 	addi	r5,r5,2854
   22380:	d9402c15 	stw	r5,176(sp)
   22384:	058001c4 	movi	r22,7
   22388:	dcc02d17 	ldw	r19,180(sp)
   2238c:	00000306 	br	2239c <___vfprintf_internal_r+0x15ec>
   22390:	42000204 	addi	r8,r8,8
   22394:	843ffc04 	addi	r16,r16,-16
   22398:	8c3ef50e 	bge	r17,r16,21f70 <__alt_data_end+0xfffe1f70>
   2239c:	18c00404 	addi	r3,r3,16
   223a0:	10800044 	addi	r2,r2,1
   223a4:	45000015 	stw	r20,0(r8)
   223a8:	44400115 	stw	r17,4(r8)
   223ac:	d8c02015 	stw	r3,128(sp)
   223b0:	d8801f15 	stw	r2,124(sp)
   223b4:	b0bff60e 	bge	r22,r2,22390 <__alt_data_end+0xfffe2390>
   223b8:	d9801e04 	addi	r6,sp,120
   223bc:	b80b883a 	mov	r5,r23
   223c0:	9809883a 	mov	r4,r19
   223c4:	00285900 	call	28590 <__sprint_r>
   223c8:	103b7d1e 	bne	r2,zero,211c0 <__alt_data_end+0xfffe11c0>
   223cc:	d8c02017 	ldw	r3,128(sp)
   223d0:	d8801f17 	ldw	r2,124(sp)
   223d4:	da000404 	addi	r8,sp,16
   223d8:	003fee06 	br	22394 <__alt_data_end+0xfffe2394>
   223dc:	9088703a 	and	r4,r18,r2
   223e0:	203eab1e 	bne	r4,zero,21e90 <__alt_data_end+0xfffe1e90>
   223e4:	dc401f17 	ldw	r17,124(sp)
   223e8:	40800115 	stw	r2,4(r8)
   223ec:	44000015 	stw	r16,0(r8)
   223f0:	8c400044 	addi	r17,r17,1
   223f4:	d8c02015 	stw	r3,128(sp)
   223f8:	dc401f15 	stw	r17,124(sp)
   223fc:	008001c4 	movi	r2,7
   22400:	14400e16 	blt	r2,r17,2243c <___vfprintf_internal_r+0x168c>
   22404:	45800204 	addi	r22,r8,8
   22408:	003eca06 	br	21f34 <__alt_data_end+0xfffe1f34>
   2240c:	010000f4 	movhi	r4,3
   22410:	2102c984 	addi	r4,r4,2854
   22414:	d9002c15 	stw	r4,176(sp)
   22418:	d8802c17 	ldw	r2,176(sp)
   2241c:	1c07883a 	add	r3,r3,r16
   22420:	8c400044 	addi	r17,r17,1
   22424:	b0800015 	stw	r2,0(r22)
   22428:	b4000115 	stw	r16,4(r22)
   2242c:	d8c02015 	stw	r3,128(sp)
   22430:	dc401f15 	stw	r17,124(sp)
   22434:	008001c4 	movi	r2,7
   22438:	147ebd0e 	bge	r2,r17,21f30 <__alt_data_end+0xfffe1f30>
   2243c:	d9002d17 	ldw	r4,180(sp)
   22440:	d9801e04 	addi	r6,sp,120
   22444:	b80b883a 	mov	r5,r23
   22448:	00285900 	call	28590 <__sprint_r>
   2244c:	103b5c1e 	bne	r2,zero,211c0 <__alt_data_end+0xfffe11c0>
   22450:	d8c02017 	ldw	r3,128(sp)
   22454:	dc401f17 	ldw	r17,124(sp)
   22458:	dd800404 	addi	r22,sp,16
   2245c:	003eb506 	br	21f34 <__alt_data_end+0xfffe1f34>
   22460:	d9002d17 	ldw	r4,180(sp)
   22464:	d9801e04 	addi	r6,sp,120
   22468:	b80b883a 	mov	r5,r23
   2246c:	00285900 	call	28590 <__sprint_r>
   22470:	103b531e 	bne	r2,zero,211c0 <__alt_data_end+0xfffe11c0>
   22474:	d8c02017 	ldw	r3,128(sp)
   22478:	dc401f17 	ldw	r17,124(sp)
   2247c:	da000404 	addi	r8,sp,16
   22480:	003e8d06 	br	21eb8 <__alt_data_end+0xfffe1eb8>
   22484:	d9002d17 	ldw	r4,180(sp)
   22488:	d9801e04 	addi	r6,sp,120
   2248c:	b80b883a 	mov	r5,r23
   22490:	00285900 	call	28590 <__sprint_r>
   22494:	103b4a1e 	bne	r2,zero,211c0 <__alt_data_end+0xfffe11c0>
   22498:	d8c02017 	ldw	r3,128(sp)
   2249c:	dc401f17 	ldw	r17,124(sp)
   224a0:	dd800404 	addi	r22,sp,16
   224a4:	003e8f06 	br	21ee4 <__alt_data_end+0xfffe1ee4>
   224a8:	0027883a 	mov	r19,zero
   224ac:	003f4a06 	br	221d8 <__alt_data_end+0xfffe21d8>
   224b0:	d9002d17 	ldw	r4,180(sp)
   224b4:	d9801e04 	addi	r6,sp,120
   224b8:	b80b883a 	mov	r5,r23
   224bc:	00285900 	call	28590 <__sprint_r>
   224c0:	103b3f1e 	bne	r2,zero,211c0 <__alt_data_end+0xfffe11c0>
   224c4:	d8c02017 	ldw	r3,128(sp)
   224c8:	da000404 	addi	r8,sp,16
   224cc:	003c7b06 	br	216bc <__alt_data_end+0xfffe16bc>
   224d0:	d9402a17 	ldw	r5,168(sp)
   224d4:	04e7c83a 	sub	r19,zero,r19
   224d8:	07000b44 	movi	fp,45
   224dc:	9804c03a 	cmpne	r2,r19,zero
   224e0:	05adc83a 	sub	r22,zero,r22
   224e4:	df002785 	stb	fp,158(sp)
   224e8:	b0adc83a 	sub	r22,r22,r2
   224ec:	28017b16 	blt	r5,zero,22adc <___vfprintf_internal_r+0x1d2c>
   224f0:	00bfdfc4 	movi	r2,-129
   224f4:	90a4703a 	and	r18,r18,r2
   224f8:	003b8906 	br	21320 <__alt_data_end+0xfffe1320>
   224fc:	d9003617 	ldw	r4,216(sp)
   22500:	d9403817 	ldw	r5,224(sp)
   22504:	da003d15 	stw	r8,244(sp)
   22508:	00281b40 	call	281b4 <__fpclassifyd>
   2250c:	da003d17 	ldw	r8,244(sp)
   22510:	1000f026 	beq	r2,zero,228d4 <___vfprintf_internal_r+0x1b24>
   22514:	d9002a17 	ldw	r4,168(sp)
   22518:	05bff7c4 	movi	r22,-33
   2251c:	00bfffc4 	movi	r2,-1
   22520:	8dac703a 	and	r22,r17,r22
   22524:	20820026 	beq	r4,r2,22d28 <___vfprintf_internal_r+0x1f78>
   22528:	008011c4 	movi	r2,71
   2252c:	b081f726 	beq	r22,r2,22d0c <___vfprintf_internal_r+0x1f5c>
   22530:	d9003817 	ldw	r4,224(sp)
   22534:	90c04014 	ori	r3,r18,256
   22538:	d8c02c15 	stw	r3,176(sp)
   2253c:	20021516 	blt	r4,zero,22d94 <___vfprintf_internal_r+0x1fe4>
   22540:	dcc03817 	ldw	r19,224(sp)
   22544:	d8002905 	stb	zero,164(sp)
   22548:	00801984 	movi	r2,102
   2254c:	8881f926 	beq	r17,r2,22d34 <___vfprintf_internal_r+0x1f84>
   22550:	00801184 	movi	r2,70
   22554:	88821c26 	beq	r17,r2,22dc8 <___vfprintf_internal_r+0x2018>
   22558:	00801144 	movi	r2,69
   2255c:	b081ef26 	beq	r22,r2,22d1c <___vfprintf_internal_r+0x1f6c>
   22560:	d8c02a17 	ldw	r3,168(sp)
   22564:	d8802104 	addi	r2,sp,132
   22568:	d8800315 	stw	r2,12(sp)
   2256c:	d9403617 	ldw	r5,216(sp)
   22570:	d8802504 	addi	r2,sp,148
   22574:	d9002d17 	ldw	r4,180(sp)
   22578:	d8800215 	stw	r2,8(sp)
   2257c:	d8802604 	addi	r2,sp,152
   22580:	d8c00015 	stw	r3,0(sp)
   22584:	d8800115 	stw	r2,4(sp)
   22588:	01c00084 	movi	r7,2
   2258c:	980d883a 	mov	r6,r19
   22590:	d8c03c15 	stw	r3,240(sp)
   22594:	da003d15 	stw	r8,244(sp)
   22598:	00234e00 	call	234e0 <_dtoa_r>
   2259c:	1021883a 	mov	r16,r2
   225a0:	008019c4 	movi	r2,103
   225a4:	d8c03c17 	ldw	r3,240(sp)
   225a8:	da003d17 	ldw	r8,244(sp)
   225ac:	88817126 	beq	r17,r2,22b74 <___vfprintf_internal_r+0x1dc4>
   225b0:	008011c4 	movi	r2,71
   225b4:	88829126 	beq	r17,r2,22ffc <___vfprintf_internal_r+0x224c>
   225b8:	80f9883a 	add	fp,r16,r3
   225bc:	d9003617 	ldw	r4,216(sp)
   225c0:	000d883a 	mov	r6,zero
   225c4:	000f883a 	mov	r7,zero
   225c8:	980b883a 	mov	r5,r19
   225cc:	da003d15 	stw	r8,244(sp)
   225d0:	002c33c0 	call	2c33c <__eqdf2>
   225d4:	da003d17 	ldw	r8,244(sp)
   225d8:	10018d26 	beq	r2,zero,22c10 <___vfprintf_internal_r+0x1e60>
   225dc:	d8802117 	ldw	r2,132(sp)
   225e0:	1700062e 	bgeu	r2,fp,225fc <___vfprintf_internal_r+0x184c>
   225e4:	01000c04 	movi	r4,48
   225e8:	10c00044 	addi	r3,r2,1
   225ec:	d8c02115 	stw	r3,132(sp)
   225f0:	11000005 	stb	r4,0(r2)
   225f4:	d8802117 	ldw	r2,132(sp)
   225f8:	173ffb36 	bltu	r2,fp,225e8 <__alt_data_end+0xfffe25e8>
   225fc:	1405c83a 	sub	r2,r2,r16
   22600:	d8803315 	stw	r2,204(sp)
   22604:	008011c4 	movi	r2,71
   22608:	b0817626 	beq	r22,r2,22be4 <___vfprintf_internal_r+0x1e34>
   2260c:	00801944 	movi	r2,101
   22610:	1442800e 	bge	r2,r17,23014 <___vfprintf_internal_r+0x2264>
   22614:	d8c02617 	ldw	r3,152(sp)
   22618:	00801984 	movi	r2,102
   2261c:	d8c03215 	stw	r3,200(sp)
   22620:	8881fe26 	beq	r17,r2,22e1c <___vfprintf_internal_r+0x206c>
   22624:	d8c03217 	ldw	r3,200(sp)
   22628:	d9003317 	ldw	r4,204(sp)
   2262c:	1901dd16 	blt	r3,r4,22da4 <___vfprintf_internal_r+0x1ff4>
   22630:	9480004c 	andi	r18,r18,1
   22634:	90022b1e 	bne	r18,zero,22ee4 <___vfprintf_internal_r+0x2134>
   22638:	1805883a 	mov	r2,r3
   2263c:	18028316 	blt	r3,zero,2304c <___vfprintf_internal_r+0x229c>
   22640:	d8c03217 	ldw	r3,200(sp)
   22644:	044019c4 	movi	r17,103
   22648:	d8c02b15 	stw	r3,172(sp)
   2264c:	df002907 	ldb	fp,164(sp)
   22650:	e001531e 	bne	fp,zero,22ba0 <___vfprintf_internal_r+0x1df0>
   22654:	df002783 	ldbu	fp,158(sp)
   22658:	d8802915 	stw	r2,164(sp)
   2265c:	dc802c17 	ldw	r18,176(sp)
   22660:	d8002a15 	stw	zero,168(sp)
   22664:	003baf06 	br	21524 <__alt_data_end+0xfffe1524>
   22668:	d8c02e17 	ldw	r3,184(sp)
   2266c:	d9002e17 	ldw	r4,184(sp)
   22670:	d9402e17 	ldw	r5,184(sp)
   22674:	18c00017 	ldw	r3,0(r3)
   22678:	21000117 	ldw	r4,4(r4)
   2267c:	29400204 	addi	r5,r5,8
   22680:	d8c03615 	stw	r3,216(sp)
   22684:	d9003815 	stw	r4,224(sp)
   22688:	d9402e15 	stw	r5,184(sp)
   2268c:	003b5006 	br	213d0 <__alt_data_end+0xfffe13d0>
   22690:	ac400007 	ldb	r17,0(r21)
   22694:	003a2806 	br	20f38 <__alt_data_end+0xfffe0f38>
   22698:	9080100c 	andi	r2,r18,64
   2269c:	1000a826 	beq	r2,zero,22940 <___vfprintf_internal_r+0x1b90>
   226a0:	d8c02e17 	ldw	r3,184(sp)
   226a4:	002d883a 	mov	r22,zero
   226a8:	1cc0000b 	ldhu	r19,0(r3)
   226ac:	18c00104 	addi	r3,r3,4
   226b0:	d8c02e15 	stw	r3,184(sp)
   226b4:	003caf06 	br	21974 <__alt_data_end+0xfffe1974>
   226b8:	d9002e17 	ldw	r4,184(sp)
   226bc:	d9402a17 	ldw	r5,168(sp)
   226c0:	002d883a 	mov	r22,zero
   226c4:	20800104 	addi	r2,r4,4
   226c8:	24c00017 	ldw	r19,0(r4)
   226cc:	283ebb0e 	bge	r5,zero,221bc <__alt_data_end+0xfffe21bc>
   226d0:	003ef106 	br	22298 <__alt_data_end+0xfffe2298>
   226d4:	9080040c 	andi	r2,r18,16
   226d8:	1000921e 	bne	r2,zero,22924 <___vfprintf_internal_r+0x1b74>
   226dc:	9480100c 	andi	r18,r18,64
   226e0:	90013926 	beq	r18,zero,22bc8 <___vfprintf_internal_r+0x1e18>
   226e4:	d9402e17 	ldw	r5,184(sp)
   226e8:	d8c02f17 	ldw	r3,188(sp)
   226ec:	28800017 	ldw	r2,0(r5)
   226f0:	29400104 	addi	r5,r5,4
   226f4:	d9402e15 	stw	r5,184(sp)
   226f8:	10c0000d 	sth	r3,0(r2)
   226fc:	0039e406 	br	20e90 <__alt_data_end+0xfffe0e90>
   22700:	9080100c 	andi	r2,r18,64
   22704:	10008026 	beq	r2,zero,22908 <___vfprintf_internal_r+0x1b58>
   22708:	d8802e17 	ldw	r2,184(sp)
   2270c:	14c0000f 	ldh	r19,0(r2)
   22710:	10800104 	addi	r2,r2,4
   22714:	d8802e15 	stw	r2,184(sp)
   22718:	982dd7fa 	srai	r22,r19,31
   2271c:	b005883a 	mov	r2,r22
   22720:	003af706 	br	21300 <__alt_data_end+0xfffe1300>
   22724:	9080100c 	andi	r2,r18,64
   22728:	d8002785 	stb	zero,158(sp)
   2272c:	10008a1e 	bne	r2,zero,22958 <___vfprintf_internal_r+0x1ba8>
   22730:	d9002e17 	ldw	r4,184(sp)
   22734:	d9402a17 	ldw	r5,168(sp)
   22738:	002d883a 	mov	r22,zero
   2273c:	20800104 	addi	r2,r4,4
   22740:	24c00017 	ldw	r19,0(r4)
   22744:	283e4b0e 	bge	r5,zero,22074 <__alt_data_end+0xfffe2074>
   22748:	9d86b03a 	or	r3,r19,r22
   2274c:	d8802e15 	stw	r2,184(sp)
   22750:	183e4c1e 	bne	r3,zero,22084 <__alt_data_end+0xfffe2084>
   22754:	0039883a 	mov	fp,zero
   22758:	0005883a 	mov	r2,zero
   2275c:	003d4006 	br	21c60 <__alt_data_end+0xfffe1c60>
   22760:	014000f4 	movhi	r5,3
   22764:	2942c984 	addi	r5,r5,2854
   22768:	d9402c15 	stw	r5,176(sp)
   2276c:	d9402c17 	ldw	r5,176(sp)
   22770:	1c47883a 	add	r3,r3,r17
   22774:	10800044 	addi	r2,r2,1
   22778:	41400015 	stw	r5,0(r8)
   2277c:	44400115 	stw	r17,4(r8)
   22780:	d8c02015 	stw	r3,128(sp)
   22784:	d8801f15 	stw	r2,124(sp)
   22788:	010001c4 	movi	r4,7
   2278c:	20bec816 	blt	r4,r2,222b0 <__alt_data_end+0xfffe22b0>
   22790:	42000204 	addi	r8,r8,8
   22794:	003ecd06 	br	222cc <__alt_data_end+0xfffe22cc>
   22798:	d9002a17 	ldw	r4,168(sp)
   2279c:	d8002785 	stb	zero,158(sp)
   227a0:	203d2d16 	blt	r4,zero,21c58 <__alt_data_end+0xfffe1c58>
   227a4:	00bfdfc4 	movi	r2,-129
   227a8:	90a4703a 	and	r18,r18,r2
   227ac:	003a6106 	br	21134 <__alt_data_end+0xfffe1134>
   227b0:	010000f4 	movhi	r4,3
   227b4:	2102c984 	addi	r4,r4,2854
   227b8:	d9002c15 	stw	r4,176(sp)
   227bc:	003bea06 	br	21768 <__alt_data_end+0xfffe1768>
   227c0:	d9002d17 	ldw	r4,180(sp)
   227c4:	d9801e04 	addi	r6,sp,120
   227c8:	b80b883a 	mov	r5,r23
   227cc:	00285900 	call	28590 <__sprint_r>
   227d0:	103a7b1e 	bne	r2,zero,211c0 <__alt_data_end+0xfffe11c0>
   227d4:	d8c02017 	ldw	r3,128(sp)
   227d8:	da000404 	addi	r8,sp,16
   227dc:	003d4106 	br	21ce4 <__alt_data_end+0xfffe1ce4>
   227e0:	d8801f17 	ldw	r2,124(sp)
   227e4:	014000f4 	movhi	r5,3
   227e8:	01000044 	movi	r4,1
   227ec:	18c00044 	addi	r3,r3,1
   227f0:	10800044 	addi	r2,r2,1
   227f4:	2942c904 	addi	r5,r5,2852
   227f8:	41000115 	stw	r4,4(r8)
   227fc:	41400015 	stw	r5,0(r8)
   22800:	d8c02015 	stw	r3,128(sp)
   22804:	d8801f15 	stw	r2,124(sp)
   22808:	010001c4 	movi	r4,7
   2280c:	20805c16 	blt	r4,r2,22980 <___vfprintf_internal_r+0x1bd0>
   22810:	42000204 	addi	r8,r8,8
   22814:	8800041e 	bne	r17,zero,22828 <___vfprintf_internal_r+0x1a78>
   22818:	d8803317 	ldw	r2,204(sp)
   2281c:	1000021e 	bne	r2,zero,22828 <___vfprintf_internal_r+0x1a78>
   22820:	9080004c 	andi	r2,r18,1
   22824:	103be726 	beq	r2,zero,217c4 <__alt_data_end+0xfffe17c4>
   22828:	d9003717 	ldw	r4,220(sp)
   2282c:	d8801f17 	ldw	r2,124(sp)
   22830:	d9403417 	ldw	r5,208(sp)
   22834:	20c7883a 	add	r3,r4,r3
   22838:	10800044 	addi	r2,r2,1
   2283c:	41000115 	stw	r4,4(r8)
   22840:	41400015 	stw	r5,0(r8)
   22844:	d8c02015 	stw	r3,128(sp)
   22848:	d8801f15 	stw	r2,124(sp)
   2284c:	010001c4 	movi	r4,7
   22850:	20812116 	blt	r4,r2,22cd8 <___vfprintf_internal_r+0x1f28>
   22854:	42000204 	addi	r8,r8,8
   22858:	0463c83a 	sub	r17,zero,r17
   2285c:	0440730e 	bge	zero,r17,22a2c <___vfprintf_internal_r+0x1c7c>
   22860:	05800404 	movi	r22,16
   22864:	b440860e 	bge	r22,r17,22a80 <___vfprintf_internal_r+0x1cd0>
   22868:	014000f4 	movhi	r5,3
   2286c:	2942c984 	addi	r5,r5,2854
   22870:	d9402c15 	stw	r5,176(sp)
   22874:	070001c4 	movi	fp,7
   22878:	dcc02d17 	ldw	r19,180(sp)
   2287c:	00000306 	br	2288c <___vfprintf_internal_r+0x1adc>
   22880:	42000204 	addi	r8,r8,8
   22884:	8c7ffc04 	addi	r17,r17,-16
   22888:	b440800e 	bge	r22,r17,22a8c <___vfprintf_internal_r+0x1cdc>
   2288c:	18c00404 	addi	r3,r3,16
   22890:	10800044 	addi	r2,r2,1
   22894:	45000015 	stw	r20,0(r8)
   22898:	45800115 	stw	r22,4(r8)
   2289c:	d8c02015 	stw	r3,128(sp)
   228a0:	d8801f15 	stw	r2,124(sp)
   228a4:	e0bff60e 	bge	fp,r2,22880 <__alt_data_end+0xfffe2880>
   228a8:	d9801e04 	addi	r6,sp,120
   228ac:	b80b883a 	mov	r5,r23
   228b0:	9809883a 	mov	r4,r19
   228b4:	00285900 	call	28590 <__sprint_r>
   228b8:	103a411e 	bne	r2,zero,211c0 <__alt_data_end+0xfffe11c0>
   228bc:	d8c02017 	ldw	r3,128(sp)
   228c0:	d8801f17 	ldw	r2,124(sp)
   228c4:	da000404 	addi	r8,sp,16
   228c8:	003fee06 	br	22884 <__alt_data_end+0xfffe2884>
   228cc:	00bfffc4 	movi	r2,-1
   228d0:	003a3f06 	br	211d0 <__alt_data_end+0xfffe11d0>
   228d4:	008011c4 	movi	r2,71
   228d8:	1440b816 	blt	r2,r17,22bbc <___vfprintf_internal_r+0x1e0c>
   228dc:	040000f4 	movhi	r16,3
   228e0:	8402bb04 	addi	r16,r16,2796
   228e4:	00c000c4 	movi	r3,3
   228e8:	00bfdfc4 	movi	r2,-129
   228ec:	d8c02915 	stw	r3,164(sp)
   228f0:	90a4703a 	and	r18,r18,r2
   228f4:	df002783 	ldbu	fp,158(sp)
   228f8:	d8c02b15 	stw	r3,172(sp)
   228fc:	d8002a15 	stw	zero,168(sp)
   22900:	d8003215 	stw	zero,200(sp)
   22904:	003b0706 	br	21524 <__alt_data_end+0xfffe1524>
   22908:	d8c02e17 	ldw	r3,184(sp)
   2290c:	1cc00017 	ldw	r19,0(r3)
   22910:	18c00104 	addi	r3,r3,4
   22914:	d8c02e15 	stw	r3,184(sp)
   22918:	982dd7fa 	srai	r22,r19,31
   2291c:	b005883a 	mov	r2,r22
   22920:	003a7706 	br	21300 <__alt_data_end+0xfffe1300>
   22924:	d8c02e17 	ldw	r3,184(sp)
   22928:	d9002f17 	ldw	r4,188(sp)
   2292c:	18800017 	ldw	r2,0(r3)
   22930:	18c00104 	addi	r3,r3,4
   22934:	d8c02e15 	stw	r3,184(sp)
   22938:	11000015 	stw	r4,0(r2)
   2293c:	00395406 	br	20e90 <__alt_data_end+0xfffe0e90>
   22940:	d9002e17 	ldw	r4,184(sp)
   22944:	002d883a 	mov	r22,zero
   22948:	24c00017 	ldw	r19,0(r4)
   2294c:	21000104 	addi	r4,r4,4
   22950:	d9002e15 	stw	r4,184(sp)
   22954:	003c0706 	br	21974 <__alt_data_end+0xfffe1974>
   22958:	d9402e17 	ldw	r5,184(sp)
   2295c:	d8c02a17 	ldw	r3,168(sp)
   22960:	002d883a 	mov	r22,zero
   22964:	28800104 	addi	r2,r5,4
   22968:	2cc0000b 	ldhu	r19,0(r5)
   2296c:	183dc10e 	bge	r3,zero,22074 <__alt_data_end+0xfffe2074>
   22970:	003f7506 	br	22748 <__alt_data_end+0xfffe2748>
   22974:	040000f4 	movhi	r16,3
   22978:	8402b904 	addi	r16,r16,2788
   2297c:	003aa706 	br	2141c <__alt_data_end+0xfffe141c>
   22980:	d9002d17 	ldw	r4,180(sp)
   22984:	d9801e04 	addi	r6,sp,120
   22988:	b80b883a 	mov	r5,r23
   2298c:	00285900 	call	28590 <__sprint_r>
   22990:	103a0b1e 	bne	r2,zero,211c0 <__alt_data_end+0xfffe11c0>
   22994:	dc402617 	ldw	r17,152(sp)
   22998:	d8c02017 	ldw	r3,128(sp)
   2299c:	da000404 	addi	r8,sp,16
   229a0:	003f9c06 	br	22814 <__alt_data_end+0xfffe2814>
   229a4:	ac400043 	ldbu	r17,1(r21)
   229a8:	84000814 	ori	r16,r16,32
   229ac:	ad400044 	addi	r21,r21,1
   229b0:	8c403fcc 	andi	r17,r17,255
   229b4:	8c40201c 	xori	r17,r17,128
   229b8:	8c7fe004 	addi	r17,r17,-128
   229bc:	00395e06 	br	20f38 <__alt_data_end+0xfffe0f38>
   229c0:	d8c02e15 	stw	r3,184(sp)
   229c4:	0039883a 	mov	fp,zero
   229c8:	003e3506 	br	222a0 <__alt_data_end+0xfffe22a0>
   229cc:	d9002d17 	ldw	r4,180(sp)
   229d0:	d9801e04 	addi	r6,sp,120
   229d4:	b80b883a 	mov	r5,r23
   229d8:	00285900 	call	28590 <__sprint_r>
   229dc:	1039f81e 	bne	r2,zero,211c0 <__alt_data_end+0xfffe11c0>
   229e0:	d8c02017 	ldw	r3,128(sp)
   229e4:	da000404 	addi	r8,sp,16
   229e8:	003cd006 	br	21d2c <__alt_data_end+0xfffe1d2c>
   229ec:	8009883a 	mov	r4,r16
   229f0:	df003d15 	stw	fp,244(sp)
   229f4:	0020d180 	call	20d18 <strlen>
   229f8:	d8802b15 	stw	r2,172(sp)
   229fc:	da003d17 	ldw	r8,244(sp)
   22a00:	103c200e 	bge	r2,zero,21a84 <__alt_data_end+0xfffe1a84>
   22a04:	0005883a 	mov	r2,zero
   22a08:	003c1e06 	br	21a84 <__alt_data_end+0xfffe1a84>
   22a0c:	d9002d17 	ldw	r4,180(sp)
   22a10:	d9801e04 	addi	r6,sp,120
   22a14:	b80b883a 	mov	r5,r23
   22a18:	00285900 	call	28590 <__sprint_r>
   22a1c:	1039e81e 	bne	r2,zero,211c0 <__alt_data_end+0xfffe11c0>
   22a20:	d8c02017 	ldw	r3,128(sp)
   22a24:	d8801f17 	ldw	r2,124(sp)
   22a28:	da000404 	addi	r8,sp,16
   22a2c:	d9403317 	ldw	r5,204(sp)
   22a30:	10800044 	addi	r2,r2,1
   22a34:	44000015 	stw	r16,0(r8)
   22a38:	28c7883a 	add	r3,r5,r3
   22a3c:	003b5b06 	br	217ac <__alt_data_end+0xfffe17ac>
   22a40:	010000f4 	movhi	r4,3
   22a44:	2102cd84 	addi	r4,r4,2870
   22a48:	d9003515 	stw	r4,212(sp)
   22a4c:	003af206 	br	21618 <__alt_data_end+0xfffe1618>
   22a50:	013fffc4 	movi	r4,-1
   22a54:	003a0806 	br	21278 <__alt_data_end+0xfffe1278>
   22a58:	0023883a 	mov	r17,zero
   22a5c:	003d9d06 	br	220d4 <__alt_data_end+0xfffe20d4>
   22a60:	d9002d17 	ldw	r4,180(sp)
   22a64:	d9801e04 	addi	r6,sp,120
   22a68:	b80b883a 	mov	r5,r23
   22a6c:	00285900 	call	28590 <__sprint_r>
   22a70:	1039d31e 	bne	r2,zero,211c0 <__alt_data_end+0xfffe11c0>
   22a74:	d8c02017 	ldw	r3,128(sp)
   22a78:	da000404 	addi	r8,sp,16
   22a7c:	003d9406 	br	220d0 <__alt_data_end+0xfffe20d0>
   22a80:	010000f4 	movhi	r4,3
   22a84:	2102c984 	addi	r4,r4,2854
   22a88:	d9002c15 	stw	r4,176(sp)
   22a8c:	d9002c17 	ldw	r4,176(sp)
   22a90:	1c47883a 	add	r3,r3,r17
   22a94:	10800044 	addi	r2,r2,1
   22a98:	41000015 	stw	r4,0(r8)
   22a9c:	44400115 	stw	r17,4(r8)
   22aa0:	d8c02015 	stw	r3,128(sp)
   22aa4:	d8801f15 	stw	r2,124(sp)
   22aa8:	010001c4 	movi	r4,7
   22aac:	20bfd716 	blt	r4,r2,22a0c <__alt_data_end+0xfffe2a0c>
   22ab0:	42000204 	addi	r8,r8,8
   22ab4:	003fdd06 	br	22a2c <__alt_data_end+0xfffe2a2c>
   22ab8:	d9002d17 	ldw	r4,180(sp)
   22abc:	d9801e04 	addi	r6,sp,120
   22ac0:	b80b883a 	mov	r5,r23
   22ac4:	00285900 	call	28590 <__sprint_r>
   22ac8:	1039bd1e 	bne	r2,zero,211c0 <__alt_data_end+0xfffe11c0>
   22acc:	d8802617 	ldw	r2,152(sp)
   22ad0:	d8c02017 	ldw	r3,128(sp)
   22ad4:	da000404 	addi	r8,sp,16
   22ad8:	003e1006 	br	2231c <__alt_data_end+0xfffe231c>
   22adc:	00800044 	movi	r2,1
   22ae0:	10803fcc 	andi	r2,r2,255
   22ae4:	00c00044 	movi	r3,1
   22ae8:	10fa0d26 	beq	r2,r3,21320 <__alt_data_end+0xfffe1320>
   22aec:	00c00084 	movi	r3,2
   22af0:	10fbaf26 	beq	r2,r3,219b0 <__alt_data_end+0xfffe19b0>
   22af4:	003a6d06 	br	214ac <__alt_data_end+0xfffe14ac>
   22af8:	010000f4 	movhi	r4,3
   22afc:	2102cd84 	addi	r4,r4,2870
   22b00:	d9003515 	stw	r4,212(sp)
   22b04:	003b5406 	br	21858 <__alt_data_end+0xfffe1858>
   22b08:	d8802a17 	ldw	r2,168(sp)
   22b0c:	00c00184 	movi	r3,6
   22b10:	1880012e 	bgeu	r3,r2,22b18 <___vfprintf_internal_r+0x1d68>
   22b14:	1805883a 	mov	r2,r3
   22b18:	d8802b15 	stw	r2,172(sp)
   22b1c:	1000ef16 	blt	r2,zero,22edc <___vfprintf_internal_r+0x212c>
   22b20:	040000f4 	movhi	r16,3
   22b24:	d8802915 	stw	r2,164(sp)
   22b28:	dcc02e15 	stw	r19,184(sp)
   22b2c:	d8002a15 	stw	zero,168(sp)
   22b30:	d8003215 	stw	zero,200(sp)
   22b34:	8402c704 	addi	r16,r16,2844
   22b38:	0039883a 	mov	fp,zero
   22b3c:	003a8006 	br	21540 <__alt_data_end+0xfffe1540>
   22b40:	0021883a 	mov	r16,zero
   22b44:	003e0706 	br	22364 <__alt_data_end+0xfffe2364>
   22b48:	d9002d17 	ldw	r4,180(sp)
   22b4c:	d9801e04 	addi	r6,sp,120
   22b50:	b80b883a 	mov	r5,r23
   22b54:	00285900 	call	28590 <__sprint_r>
   22b58:	1039991e 	bne	r2,zero,211c0 <__alt_data_end+0xfffe11c0>
   22b5c:	d8802617 	ldw	r2,152(sp)
   22b60:	d9403317 	ldw	r5,204(sp)
   22b64:	d8c02017 	ldw	r3,128(sp)
   22b68:	da000404 	addi	r8,sp,16
   22b6c:	2885c83a 	sub	r2,r5,r2
   22b70:	003dfb06 	br	22360 <__alt_data_end+0xfffe2360>
   22b74:	9080004c 	andi	r2,r18,1
   22b78:	103e8f1e 	bne	r2,zero,225b8 <__alt_data_end+0xfffe25b8>
   22b7c:	d8802117 	ldw	r2,132(sp)
   22b80:	003e9e06 	br	225fc <__alt_data_end+0xfffe25fc>
   22b84:	1025883a 	mov	r18,r2
   22b88:	0039883a 	mov	fp,zero
   22b8c:	00800084 	movi	r2,2
   22b90:	003fd306 	br	22ae0 <__alt_data_end+0xfffe2ae0>
   22b94:	07000b44 	movi	fp,45
   22b98:	df002785 	stb	fp,158(sp)
   22b9c:	003a1b06 	br	2140c <__alt_data_end+0xfffe140c>
   22ba0:	00c00b44 	movi	r3,45
   22ba4:	d8c02785 	stb	r3,158(sp)
   22ba8:	d8802915 	stw	r2,164(sp)
   22bac:	dc802c17 	ldw	r18,176(sp)
   22bb0:	d8002a15 	stw	zero,168(sp)
   22bb4:	07000b44 	movi	fp,45
   22bb8:	003a5e06 	br	21534 <__alt_data_end+0xfffe1534>
   22bbc:	040000f4 	movhi	r16,3
   22bc0:	8402bc04 	addi	r16,r16,2800
   22bc4:	003f4706 	br	228e4 <__alt_data_end+0xfffe28e4>
   22bc8:	d9002e17 	ldw	r4,184(sp)
   22bcc:	d9402f17 	ldw	r5,188(sp)
   22bd0:	20800017 	ldw	r2,0(r4)
   22bd4:	21000104 	addi	r4,r4,4
   22bd8:	d9002e15 	stw	r4,184(sp)
   22bdc:	11400015 	stw	r5,0(r2)
   22be0:	0038ab06 	br	20e90 <__alt_data_end+0xfffe0e90>
   22be4:	dd802617 	ldw	r22,152(sp)
   22be8:	00bfff44 	movi	r2,-3
   22bec:	b0801c16 	blt	r22,r2,22c60 <___vfprintf_internal_r+0x1eb0>
   22bf0:	d9402a17 	ldw	r5,168(sp)
   22bf4:	2d801a16 	blt	r5,r22,22c60 <___vfprintf_internal_r+0x1eb0>
   22bf8:	dd803215 	stw	r22,200(sp)
   22bfc:	003e8906 	br	22624 <__alt_data_end+0xfffe2624>
   22c00:	010000f4 	movhi	r4,3
   22c04:	2102c984 	addi	r4,r4,2854
   22c08:	d9002c15 	stw	r4,176(sp)
   22c0c:	003c9106 	br	21e54 <__alt_data_end+0xfffe1e54>
   22c10:	e005883a 	mov	r2,fp
   22c14:	003e7906 	br	225fc <__alt_data_end+0xfffe25fc>
   22c18:	d9002a17 	ldw	r4,168(sp)
   22c1c:	df002783 	ldbu	fp,158(sp)
   22c20:	dcc02e15 	stw	r19,184(sp)
   22c24:	d9002915 	stw	r4,164(sp)
   22c28:	d9002b15 	stw	r4,172(sp)
   22c2c:	d8002a15 	stw	zero,168(sp)
   22c30:	d8003215 	stw	zero,200(sp)
   22c34:	003a3b06 	br	21524 <__alt_data_end+0xfffe1524>
   22c38:	9080004c 	andi	r2,r18,1
   22c3c:	0039883a 	mov	fp,zero
   22c40:	10000426 	beq	r2,zero,22c54 <___vfprintf_internal_r+0x1ea4>
   22c44:	00800c04 	movi	r2,48
   22c48:	dc001dc4 	addi	r16,sp,119
   22c4c:	d8801dc5 	stb	r2,119(sp)
   22c50:	003b6406 	br	219e4 <__alt_data_end+0xfffe19e4>
   22c54:	d8002b15 	stw	zero,172(sp)
   22c58:	dc001e04 	addi	r16,sp,120
   22c5c:	003a2b06 	br	2150c <__alt_data_end+0xfffe150c>
   22c60:	8c7fff84 	addi	r17,r17,-2
   22c64:	b5bfffc4 	addi	r22,r22,-1
   22c68:	dd802615 	stw	r22,152(sp)
   22c6c:	dc4022c5 	stb	r17,139(sp)
   22c70:	b000bf16 	blt	r22,zero,22f70 <___vfprintf_internal_r+0x21c0>
   22c74:	00800ac4 	movi	r2,43
   22c78:	d8802305 	stb	r2,140(sp)
   22c7c:	00800244 	movi	r2,9
   22c80:	15807016 	blt	r2,r22,22e44 <___vfprintf_internal_r+0x2094>
   22c84:	00800c04 	movi	r2,48
   22c88:	b5800c04 	addi	r22,r22,48
   22c8c:	d8802345 	stb	r2,141(sp)
   22c90:	dd802385 	stb	r22,142(sp)
   22c94:	d88023c4 	addi	r2,sp,143
   22c98:	df0022c4 	addi	fp,sp,139
   22c9c:	d8c03317 	ldw	r3,204(sp)
   22ca0:	1739c83a 	sub	fp,r2,fp
   22ca4:	d9003317 	ldw	r4,204(sp)
   22ca8:	e0c7883a 	add	r3,fp,r3
   22cac:	df003a15 	stw	fp,232(sp)
   22cb0:	d8c02b15 	stw	r3,172(sp)
   22cb4:	00800044 	movi	r2,1
   22cb8:	1100b30e 	bge	r2,r4,22f88 <___vfprintf_internal_r+0x21d8>
   22cbc:	d8c02b17 	ldw	r3,172(sp)
   22cc0:	18c00044 	addi	r3,r3,1
   22cc4:	d8c02b15 	stw	r3,172(sp)
   22cc8:	1805883a 	mov	r2,r3
   22ccc:	1800ac16 	blt	r3,zero,22f80 <___vfprintf_internal_r+0x21d0>
   22cd0:	d8003215 	stw	zero,200(sp)
   22cd4:	003e5d06 	br	2264c <__alt_data_end+0xfffe264c>
   22cd8:	d9002d17 	ldw	r4,180(sp)
   22cdc:	d9801e04 	addi	r6,sp,120
   22ce0:	b80b883a 	mov	r5,r23
   22ce4:	00285900 	call	28590 <__sprint_r>
   22ce8:	1039351e 	bne	r2,zero,211c0 <__alt_data_end+0xfffe11c0>
   22cec:	dc402617 	ldw	r17,152(sp)
   22cf0:	d8c02017 	ldw	r3,128(sp)
   22cf4:	d8801f17 	ldw	r2,124(sp)
   22cf8:	da000404 	addi	r8,sp,16
   22cfc:	003ed606 	br	22858 <__alt_data_end+0xfffe2858>
   22d00:	182b883a 	mov	r21,r3
   22d04:	d8002a15 	stw	zero,168(sp)
   22d08:	00388c06 	br	20f3c <__alt_data_end+0xfffe0f3c>
   22d0c:	d8802a17 	ldw	r2,168(sp)
   22d10:	103e071e 	bne	r2,zero,22530 <__alt_data_end+0xfffe2530>
   22d14:	dc002a15 	stw	r16,168(sp)
   22d18:	003e0506 	br	22530 <__alt_data_end+0xfffe2530>
   22d1c:	d9002a17 	ldw	r4,168(sp)
   22d20:	20c00044 	addi	r3,r4,1
   22d24:	003e0f06 	br	22564 <__alt_data_end+0xfffe2564>
   22d28:	01400184 	movi	r5,6
   22d2c:	d9402a15 	stw	r5,168(sp)
   22d30:	003dff06 	br	22530 <__alt_data_end+0xfffe2530>
   22d34:	d8802104 	addi	r2,sp,132
   22d38:	d8800315 	stw	r2,12(sp)
   22d3c:	d8802504 	addi	r2,sp,148
   22d40:	d8800215 	stw	r2,8(sp)
   22d44:	d8802604 	addi	r2,sp,152
   22d48:	d8800115 	stw	r2,4(sp)
   22d4c:	d8802a17 	ldw	r2,168(sp)
   22d50:	d9403617 	ldw	r5,216(sp)
   22d54:	d9002d17 	ldw	r4,180(sp)
   22d58:	d8800015 	stw	r2,0(sp)
   22d5c:	01c000c4 	movi	r7,3
   22d60:	980d883a 	mov	r6,r19
   22d64:	da003d15 	stw	r8,244(sp)
   22d68:	00234e00 	call	234e0 <_dtoa_r>
   22d6c:	d8c02a17 	ldw	r3,168(sp)
   22d70:	da003d17 	ldw	r8,244(sp)
   22d74:	1021883a 	mov	r16,r2
   22d78:	10f9883a 	add	fp,r2,r3
   22d7c:	81000007 	ldb	r4,0(r16)
   22d80:	00800c04 	movi	r2,48
   22d84:	20805e26 	beq	r4,r2,22f00 <___vfprintf_internal_r+0x2150>
   22d88:	d8c02617 	ldw	r3,152(sp)
   22d8c:	e0f9883a 	add	fp,fp,r3
   22d90:	003e0a06 	br	225bc <__alt_data_end+0xfffe25bc>
   22d94:	00c00b44 	movi	r3,45
   22d98:	24e0003c 	xorhi	r19,r4,32768
   22d9c:	d8c02905 	stb	r3,164(sp)
   22da0:	003de906 	br	22548 <__alt_data_end+0xfffe2548>
   22da4:	d8c03217 	ldw	r3,200(sp)
   22da8:	00c07a0e 	bge	zero,r3,22f94 <___vfprintf_internal_r+0x21e4>
   22dac:	00800044 	movi	r2,1
   22db0:	d9003317 	ldw	r4,204(sp)
   22db4:	1105883a 	add	r2,r2,r4
   22db8:	d8802b15 	stw	r2,172(sp)
   22dbc:	10004e16 	blt	r2,zero,22ef8 <___vfprintf_internal_r+0x2148>
   22dc0:	044019c4 	movi	r17,103
   22dc4:	003e2106 	br	2264c <__alt_data_end+0xfffe264c>
   22dc8:	d9002a17 	ldw	r4,168(sp)
   22dcc:	d8802104 	addi	r2,sp,132
   22dd0:	d8800315 	stw	r2,12(sp)
   22dd4:	d9000015 	stw	r4,0(sp)
   22dd8:	d8802504 	addi	r2,sp,148
   22ddc:	d9403617 	ldw	r5,216(sp)
   22de0:	d9002d17 	ldw	r4,180(sp)
   22de4:	d8800215 	stw	r2,8(sp)
   22de8:	d8802604 	addi	r2,sp,152
   22dec:	d8800115 	stw	r2,4(sp)
   22df0:	01c000c4 	movi	r7,3
   22df4:	980d883a 	mov	r6,r19
   22df8:	da003d15 	stw	r8,244(sp)
   22dfc:	00234e00 	call	234e0 <_dtoa_r>
   22e00:	d8c02a17 	ldw	r3,168(sp)
   22e04:	da003d17 	ldw	r8,244(sp)
   22e08:	1021883a 	mov	r16,r2
   22e0c:	00801184 	movi	r2,70
   22e10:	80f9883a 	add	fp,r16,r3
   22e14:	88bfd926 	beq	r17,r2,22d7c <__alt_data_end+0xfffe2d7c>
   22e18:	003de806 	br	225bc <__alt_data_end+0xfffe25bc>
   22e1c:	d9002a17 	ldw	r4,168(sp)
   22e20:	00c04d0e 	bge	zero,r3,22f58 <___vfprintf_internal_r+0x21a8>
   22e24:	2000441e 	bne	r4,zero,22f38 <___vfprintf_internal_r+0x2188>
   22e28:	9480004c 	andi	r18,r18,1
   22e2c:	9000421e 	bne	r18,zero,22f38 <___vfprintf_internal_r+0x2188>
   22e30:	1805883a 	mov	r2,r3
   22e34:	18006f16 	blt	r3,zero,22ff4 <___vfprintf_internal_r+0x2244>
   22e38:	d8c03217 	ldw	r3,200(sp)
   22e3c:	d8c02b15 	stw	r3,172(sp)
   22e40:	003e0206 	br	2264c <__alt_data_end+0xfffe264c>
   22e44:	df0022c4 	addi	fp,sp,139
   22e48:	dc002a15 	stw	r16,168(sp)
   22e4c:	4027883a 	mov	r19,r8
   22e50:	e021883a 	mov	r16,fp
   22e54:	b009883a 	mov	r4,r22
   22e58:	01400284 	movi	r5,10
   22e5c:	0020aa80 	call	20aa8 <__modsi3>
   22e60:	10800c04 	addi	r2,r2,48
   22e64:	843fffc4 	addi	r16,r16,-1
   22e68:	b009883a 	mov	r4,r22
   22e6c:	01400284 	movi	r5,10
   22e70:	80800005 	stb	r2,0(r16)
   22e74:	0020a240 	call	20a24 <__divsi3>
   22e78:	102d883a 	mov	r22,r2
   22e7c:	00800244 	movi	r2,9
   22e80:	15bff416 	blt	r2,r22,22e54 <__alt_data_end+0xfffe2e54>
   22e84:	9811883a 	mov	r8,r19
   22e88:	b0800c04 	addi	r2,r22,48
   22e8c:	8027883a 	mov	r19,r16
   22e90:	997fffc4 	addi	r5,r19,-1
   22e94:	98bfffc5 	stb	r2,-1(r19)
   22e98:	dc002a17 	ldw	r16,168(sp)
   22e9c:	2f006d2e 	bgeu	r5,fp,23054 <___vfprintf_internal_r+0x22a4>
   22ea0:	d9c02384 	addi	r7,sp,142
   22ea4:	3ccfc83a 	sub	r7,r7,r19
   22ea8:	d9002344 	addi	r4,sp,141
   22eac:	e1cf883a 	add	r7,fp,r7
   22eb0:	00000106 	br	22eb8 <___vfprintf_internal_r+0x2108>
   22eb4:	28800003 	ldbu	r2,0(r5)
   22eb8:	20800005 	stb	r2,0(r4)
   22ebc:	21000044 	addi	r4,r4,1
   22ec0:	29400044 	addi	r5,r5,1
   22ec4:	393ffb1e 	bne	r7,r4,22eb4 <__alt_data_end+0xfffe2eb4>
   22ec8:	d8802304 	addi	r2,sp,140
   22ecc:	14c5c83a 	sub	r2,r2,r19
   22ed0:	d8c02344 	addi	r3,sp,141
   22ed4:	1885883a 	add	r2,r3,r2
   22ed8:	003f7006 	br	22c9c <__alt_data_end+0xfffe2c9c>
   22edc:	0005883a 	mov	r2,zero
   22ee0:	003f0f06 	br	22b20 <__alt_data_end+0xfffe2b20>
   22ee4:	d8c03217 	ldw	r3,200(sp)
   22ee8:	18c00044 	addi	r3,r3,1
   22eec:	d8c02b15 	stw	r3,172(sp)
   22ef0:	1805883a 	mov	r2,r3
   22ef4:	183fb20e 	bge	r3,zero,22dc0 <__alt_data_end+0xfffe2dc0>
   22ef8:	0005883a 	mov	r2,zero
   22efc:	003fb006 	br	22dc0 <__alt_data_end+0xfffe2dc0>
   22f00:	d9003617 	ldw	r4,216(sp)
   22f04:	000d883a 	mov	r6,zero
   22f08:	000f883a 	mov	r7,zero
   22f0c:	980b883a 	mov	r5,r19
   22f10:	d8c03c15 	stw	r3,240(sp)
   22f14:	da003d15 	stw	r8,244(sp)
   22f18:	002c33c0 	call	2c33c <__eqdf2>
   22f1c:	d8c03c17 	ldw	r3,240(sp)
   22f20:	da003d17 	ldw	r8,244(sp)
   22f24:	103f9826 	beq	r2,zero,22d88 <__alt_data_end+0xfffe2d88>
   22f28:	00800044 	movi	r2,1
   22f2c:	10c7c83a 	sub	r3,r2,r3
   22f30:	d8c02615 	stw	r3,152(sp)
   22f34:	003f9506 	br	22d8c <__alt_data_end+0xfffe2d8c>
   22f38:	d9002a17 	ldw	r4,168(sp)
   22f3c:	d8c03217 	ldw	r3,200(sp)
   22f40:	20800044 	addi	r2,r4,1
   22f44:	1885883a 	add	r2,r3,r2
   22f48:	d8802b15 	stw	r2,172(sp)
   22f4c:	103dbf0e 	bge	r2,zero,2264c <__alt_data_end+0xfffe264c>
   22f50:	0005883a 	mov	r2,zero
   22f54:	003dbd06 	br	2264c <__alt_data_end+0xfffe264c>
   22f58:	2000201e 	bne	r4,zero,22fdc <___vfprintf_internal_r+0x222c>
   22f5c:	9480004c 	andi	r18,r18,1
   22f60:	90001e1e 	bne	r18,zero,22fdc <___vfprintf_internal_r+0x222c>
   22f64:	00800044 	movi	r2,1
   22f68:	d8802b15 	stw	r2,172(sp)
   22f6c:	003db706 	br	2264c <__alt_data_end+0xfffe264c>
   22f70:	00800b44 	movi	r2,45
   22f74:	05adc83a 	sub	r22,zero,r22
   22f78:	d8802305 	stb	r2,140(sp)
   22f7c:	003f3f06 	br	22c7c <__alt_data_end+0xfffe2c7c>
   22f80:	0005883a 	mov	r2,zero
   22f84:	003f5206 	br	22cd0 <__alt_data_end+0xfffe2cd0>
   22f88:	90a4703a 	and	r18,r18,r2
   22f8c:	903f4e26 	beq	r18,zero,22cc8 <__alt_data_end+0xfffe2cc8>
   22f90:	003f4a06 	br	22cbc <__alt_data_end+0xfffe2cbc>
   22f94:	00800084 	movi	r2,2
   22f98:	10c5c83a 	sub	r2,r2,r3
   22f9c:	003f8406 	br	22db0 <__alt_data_end+0xfffe2db0>
   22fa0:	d9402e17 	ldw	r5,184(sp)
   22fa4:	d9002e17 	ldw	r4,184(sp)
   22fa8:	ac400043 	ldbu	r17,1(r21)
   22fac:	29400017 	ldw	r5,0(r5)
   22fb0:	20800104 	addi	r2,r4,4
   22fb4:	d8802e15 	stw	r2,184(sp)
   22fb8:	d9402a15 	stw	r5,168(sp)
   22fbc:	182b883a 	mov	r21,r3
   22fc0:	283e7b0e 	bge	r5,zero,229b0 <__alt_data_end+0xfffe29b0>
   22fc4:	8c403fcc 	andi	r17,r17,255
   22fc8:	017fffc4 	movi	r5,-1
   22fcc:	8c40201c 	xori	r17,r17,128
   22fd0:	d9402a15 	stw	r5,168(sp)
   22fd4:	8c7fe004 	addi	r17,r17,-128
   22fd8:	0037d706 	br	20f38 <__alt_data_end+0xfffe0f38>
   22fdc:	d8c02a17 	ldw	r3,168(sp)
   22fe0:	18c00084 	addi	r3,r3,2
   22fe4:	d8c02b15 	stw	r3,172(sp)
   22fe8:	1805883a 	mov	r2,r3
   22fec:	183d970e 	bge	r3,zero,2264c <__alt_data_end+0xfffe264c>
   22ff0:	003fd706 	br	22f50 <__alt_data_end+0xfffe2f50>
   22ff4:	0005883a 	mov	r2,zero
   22ff8:	003f8f06 	br	22e38 <__alt_data_end+0xfffe2e38>
   22ffc:	9080004c 	andi	r2,r18,1
   23000:	103f821e 	bne	r2,zero,22e0c <__alt_data_end+0xfffe2e0c>
   23004:	d8802117 	ldw	r2,132(sp)
   23008:	1405c83a 	sub	r2,r2,r16
   2300c:	d8803315 	stw	r2,204(sp)
   23010:	b47ef426 	beq	r22,r17,22be4 <__alt_data_end+0xfffe2be4>
   23014:	dd802617 	ldw	r22,152(sp)
   23018:	003f1206 	br	22c64 <__alt_data_end+0xfffe2c64>
   2301c:	d8c02b03 	ldbu	r3,172(sp)
   23020:	d8c02785 	stb	r3,158(sp)
   23024:	0038df06 	br	213a4 <__alt_data_end+0xfffe13a4>
   23028:	d8c02b03 	ldbu	r3,172(sp)
   2302c:	d8c02785 	stb	r3,158(sp)
   23030:	0038aa06 	br	212dc <__alt_data_end+0xfffe12dc>
   23034:	d8c02b03 	ldbu	r3,172(sp)
   23038:	d8c02785 	stb	r3,158(sp)
   2303c:	003a4306 	br	2194c <__alt_data_end+0xfffe194c>
   23040:	d8c02b03 	ldbu	r3,172(sp)
   23044:	d8c02785 	stb	r3,158(sp)
   23048:	003af506 	br	21c20 <__alt_data_end+0xfffe1c20>
   2304c:	0005883a 	mov	r2,zero
   23050:	003d7b06 	br	22640 <__alt_data_end+0xfffe2640>
   23054:	d8802344 	addi	r2,sp,141
   23058:	003f1006 	br	22c9c <__alt_data_end+0xfffe2c9c>
   2305c:	d8c02b03 	ldbu	r3,172(sp)
   23060:	d8c02785 	stb	r3,158(sp)
   23064:	0038fd06 	br	2145c <__alt_data_end+0xfffe145c>
   23068:	d8c02b03 	ldbu	r3,172(sp)
   2306c:	d8c02785 	stb	r3,158(sp)
   23070:	003a9706 	br	21ad0 <__alt_data_end+0xfffe1ad0>
   23074:	d8c02b03 	ldbu	r3,172(sp)
   23078:	d8c02785 	stb	r3,158(sp)
   2307c:	003a1806 	br	218e0 <__alt_data_end+0xfffe18e0>
   23080:	d8c02b03 	ldbu	r3,172(sp)
   23084:	d8c02785 	stb	r3,158(sp)
   23088:	003abe06 	br	21b84 <__alt_data_end+0xfffe1b84>

0002308c <__vfprintf_internal>:
   2308c:	008000f4 	movhi	r2,3
   23090:	108a8a04 	addi	r2,r2,10792
   23094:	300f883a 	mov	r7,r6
   23098:	280d883a 	mov	r6,r5
   2309c:	200b883a 	mov	r5,r4
   230a0:	11000017 	ldw	r4,0(r2)
   230a4:	0020db01 	jmpi	20db0 <___vfprintf_internal_r>

000230a8 <__sbprintf>:
   230a8:	2880030b 	ldhu	r2,12(r5)
   230ac:	2ac01917 	ldw	r11,100(r5)
   230b0:	2a80038b 	ldhu	r10,14(r5)
   230b4:	2a400717 	ldw	r9,28(r5)
   230b8:	2a000917 	ldw	r8,36(r5)
   230bc:	defee204 	addi	sp,sp,-1144
   230c0:	00c10004 	movi	r3,1024
   230c4:	dc011a15 	stw	r16,1128(sp)
   230c8:	10bfff4c 	andi	r2,r2,65533
   230cc:	2821883a 	mov	r16,r5
   230d0:	d8cb883a 	add	r5,sp,r3
   230d4:	dc811c15 	stw	r18,1136(sp)
   230d8:	dc411b15 	stw	r17,1132(sp)
   230dc:	dfc11d15 	stw	ra,1140(sp)
   230e0:	2025883a 	mov	r18,r4
   230e4:	d881030d 	sth	r2,1036(sp)
   230e8:	dac11915 	stw	r11,1124(sp)
   230ec:	da81038d 	sth	r10,1038(sp)
   230f0:	da410715 	stw	r9,1052(sp)
   230f4:	da010915 	stw	r8,1060(sp)
   230f8:	dec10015 	stw	sp,1024(sp)
   230fc:	dec10415 	stw	sp,1040(sp)
   23100:	d8c10215 	stw	r3,1032(sp)
   23104:	d8c10515 	stw	r3,1044(sp)
   23108:	d8010615 	stw	zero,1048(sp)
   2310c:	0020db00 	call	20db0 <___vfprintf_internal_r>
   23110:	1023883a 	mov	r17,r2
   23114:	10000416 	blt	r2,zero,23128 <__sbprintf+0x80>
   23118:	d9410004 	addi	r5,sp,1024
   2311c:	9009883a 	mov	r4,r18
   23120:	0024d840 	call	24d84 <_fflush_r>
   23124:	10000d1e 	bne	r2,zero,2315c <__sbprintf+0xb4>
   23128:	d881030b 	ldhu	r2,1036(sp)
   2312c:	1080100c 	andi	r2,r2,64
   23130:	10000326 	beq	r2,zero,23140 <__sbprintf+0x98>
   23134:	8080030b 	ldhu	r2,12(r16)
   23138:	10801014 	ori	r2,r2,64
   2313c:	8080030d 	sth	r2,12(r16)
   23140:	8805883a 	mov	r2,r17
   23144:	dfc11d17 	ldw	ra,1140(sp)
   23148:	dc811c17 	ldw	r18,1136(sp)
   2314c:	dc411b17 	ldw	r17,1132(sp)
   23150:	dc011a17 	ldw	r16,1128(sp)
   23154:	dec11e04 	addi	sp,sp,1144
   23158:	f800283a 	ret
   2315c:	047fffc4 	movi	r17,-1
   23160:	003ff106 	br	23128 <__alt_data_end+0xfffe3128>

00023164 <__swsetup_r>:
   23164:	008000f4 	movhi	r2,3
   23168:	defffd04 	addi	sp,sp,-12
   2316c:	108a8a04 	addi	r2,r2,10792
   23170:	dc400115 	stw	r17,4(sp)
   23174:	2023883a 	mov	r17,r4
   23178:	11000017 	ldw	r4,0(r2)
   2317c:	dc000015 	stw	r16,0(sp)
   23180:	dfc00215 	stw	ra,8(sp)
   23184:	2821883a 	mov	r16,r5
   23188:	20000226 	beq	r4,zero,23194 <__swsetup_r+0x30>
   2318c:	20800e17 	ldw	r2,56(r4)
   23190:	10003126 	beq	r2,zero,23258 <__swsetup_r+0xf4>
   23194:	8080030b 	ldhu	r2,12(r16)
   23198:	10c0020c 	andi	r3,r2,8
   2319c:	1009883a 	mov	r4,r2
   231a0:	18000f26 	beq	r3,zero,231e0 <__swsetup_r+0x7c>
   231a4:	80c00417 	ldw	r3,16(r16)
   231a8:	18001526 	beq	r3,zero,23200 <__swsetup_r+0x9c>
   231ac:	1100004c 	andi	r4,r2,1
   231b0:	20001c1e 	bne	r4,zero,23224 <__swsetup_r+0xc0>
   231b4:	1080008c 	andi	r2,r2,2
   231b8:	1000291e 	bne	r2,zero,23260 <__swsetup_r+0xfc>
   231bc:	80800517 	ldw	r2,20(r16)
   231c0:	80800215 	stw	r2,8(r16)
   231c4:	18001c26 	beq	r3,zero,23238 <__swsetup_r+0xd4>
   231c8:	0005883a 	mov	r2,zero
   231cc:	dfc00217 	ldw	ra,8(sp)
   231d0:	dc400117 	ldw	r17,4(sp)
   231d4:	dc000017 	ldw	r16,0(sp)
   231d8:	dec00304 	addi	sp,sp,12
   231dc:	f800283a 	ret
   231e0:	2080040c 	andi	r2,r4,16
   231e4:	10002e26 	beq	r2,zero,232a0 <__swsetup_r+0x13c>
   231e8:	2080010c 	andi	r2,r4,4
   231ec:	10001e1e 	bne	r2,zero,23268 <__swsetup_r+0x104>
   231f0:	80c00417 	ldw	r3,16(r16)
   231f4:	20800214 	ori	r2,r4,8
   231f8:	8080030d 	sth	r2,12(r16)
   231fc:	183feb1e 	bne	r3,zero,231ac <__alt_data_end+0xfffe31ac>
   23200:	1100a00c 	andi	r4,r2,640
   23204:	01408004 	movi	r5,512
   23208:	217fe826 	beq	r4,r5,231ac <__alt_data_end+0xfffe31ac>
   2320c:	800b883a 	mov	r5,r16
   23210:	8809883a 	mov	r4,r17
   23214:	0025d200 	call	25d20 <__smakebuf_r>
   23218:	8080030b 	ldhu	r2,12(r16)
   2321c:	80c00417 	ldw	r3,16(r16)
   23220:	003fe206 	br	231ac <__alt_data_end+0xfffe31ac>
   23224:	80800517 	ldw	r2,20(r16)
   23228:	80000215 	stw	zero,8(r16)
   2322c:	0085c83a 	sub	r2,zero,r2
   23230:	80800615 	stw	r2,24(r16)
   23234:	183fe41e 	bne	r3,zero,231c8 <__alt_data_end+0xfffe31c8>
   23238:	80c0030b 	ldhu	r3,12(r16)
   2323c:	0005883a 	mov	r2,zero
   23240:	1900200c 	andi	r4,r3,128
   23244:	203fe126 	beq	r4,zero,231cc <__alt_data_end+0xfffe31cc>
   23248:	18c01014 	ori	r3,r3,64
   2324c:	80c0030d 	sth	r3,12(r16)
   23250:	00bfffc4 	movi	r2,-1
   23254:	003fdd06 	br	231cc <__alt_data_end+0xfffe31cc>
   23258:	00251700 	call	25170 <__sinit>
   2325c:	003fcd06 	br	23194 <__alt_data_end+0xfffe3194>
   23260:	0005883a 	mov	r2,zero
   23264:	003fd606 	br	231c0 <__alt_data_end+0xfffe31c0>
   23268:	81400c17 	ldw	r5,48(r16)
   2326c:	28000626 	beq	r5,zero,23288 <__swsetup_r+0x124>
   23270:	80801004 	addi	r2,r16,64
   23274:	28800326 	beq	r5,r2,23284 <__swsetup_r+0x120>
   23278:	8809883a 	mov	r4,r17
   2327c:	00252e40 	call	252e4 <_free_r>
   23280:	8100030b 	ldhu	r4,12(r16)
   23284:	80000c15 	stw	zero,48(r16)
   23288:	80c00417 	ldw	r3,16(r16)
   2328c:	00bff6c4 	movi	r2,-37
   23290:	1108703a 	and	r4,r2,r4
   23294:	80000115 	stw	zero,4(r16)
   23298:	80c00015 	stw	r3,0(r16)
   2329c:	003fd506 	br	231f4 <__alt_data_end+0xfffe31f4>
   232a0:	00800244 	movi	r2,9
   232a4:	88800015 	stw	r2,0(r17)
   232a8:	20801014 	ori	r2,r4,64
   232ac:	8080030d 	sth	r2,12(r16)
   232b0:	00bfffc4 	movi	r2,-1
   232b4:	003fc506 	br	231cc <__alt_data_end+0xfffe31cc>

000232b8 <quorem>:
   232b8:	defff204 	addi	sp,sp,-56
   232bc:	ddc00b15 	stw	r23,44(sp)
   232c0:	20800417 	ldw	r2,16(r4)
   232c4:	2dc00417 	ldw	r23,16(r5)
   232c8:	dfc00d15 	stw	ra,52(sp)
   232cc:	df000c15 	stw	fp,48(sp)
   232d0:	dd800a15 	stw	r22,40(sp)
   232d4:	dd400915 	stw	r21,36(sp)
   232d8:	dd000815 	stw	r20,32(sp)
   232dc:	dcc00715 	stw	r19,28(sp)
   232e0:	dc800615 	stw	r18,24(sp)
   232e4:	dc400515 	stw	r17,20(sp)
   232e8:	dc000415 	stw	r16,16(sp)
   232ec:	15c07a16 	blt	r2,r23,234d8 <quorem+0x220>
   232f0:	bdffffc4 	addi	r23,r23,-1
   232f4:	bde9883a 	add	r20,r23,r23
   232f8:	28c00504 	addi	r3,r5,20
   232fc:	a529883a 	add	r20,r20,r20
   23300:	1d39883a 	add	fp,r3,r20
   23304:	24c00504 	addi	r19,r4,20
   23308:	d9400215 	stw	r5,8(sp)
   2330c:	9d29883a 	add	r20,r19,r20
   23310:	e1400017 	ldw	r5,0(fp)
   23314:	d9000015 	stw	r4,0(sp)
   23318:	a1000017 	ldw	r4,0(r20)
   2331c:	29400044 	addi	r5,r5,1
   23320:	d8c00115 	stw	r3,4(sp)
   23324:	dd000315 	stw	r20,12(sp)
   23328:	0020b1c0 	call	20b1c <__udivsi3>
   2332c:	1025883a 	mov	r18,r2
   23330:	10003026 	beq	r2,zero,233f4 <quorem+0x13c>
   23334:	dc400117 	ldw	r17,4(sp)
   23338:	9829883a 	mov	r20,r19
   2333c:	002d883a 	mov	r22,zero
   23340:	0021883a 	mov	r16,zero
   23344:	8d400017 	ldw	r21,0(r17)
   23348:	900b883a 	mov	r5,r18
   2334c:	8c400104 	addi	r17,r17,4
   23350:	a93fffcc 	andi	r4,r21,65535
   23354:	002b0980 	call	2b098 <__mulsi3>
   23358:	a808d43a 	srli	r4,r21,16
   2335c:	900b883a 	mov	r5,r18
   23360:	15ad883a 	add	r22,r2,r22
   23364:	002b0980 	call	2b098 <__mulsi3>
   23368:	a1000017 	ldw	r4,0(r20)
   2336c:	b00cd43a 	srli	r6,r22,16
   23370:	b0ffffcc 	andi	r3,r22,65535
   23374:	217fffcc 	andi	r5,r4,65535
   23378:	2c21883a 	add	r16,r5,r16
   2337c:	80c7c83a 	sub	r3,r16,r3
   23380:	2008d43a 	srli	r4,r4,16
   23384:	1185883a 	add	r2,r2,r6
   23388:	1821d43a 	srai	r16,r3,16
   2338c:	117fffcc 	andi	r5,r2,65535
   23390:	2149c83a 	sub	r4,r4,r5
   23394:	2421883a 	add	r16,r4,r16
   23398:	8008943a 	slli	r4,r16,16
   2339c:	18ffffcc 	andi	r3,r3,65535
   233a0:	102cd43a 	srli	r22,r2,16
   233a4:	20c8b03a 	or	r4,r4,r3
   233a8:	a1000015 	stw	r4,0(r20)
   233ac:	8021d43a 	srai	r16,r16,16
   233b0:	a5000104 	addi	r20,r20,4
   233b4:	e47fe32e 	bgeu	fp,r17,23344 <__alt_data_end+0xfffe3344>
   233b8:	d8c00317 	ldw	r3,12(sp)
   233bc:	18800017 	ldw	r2,0(r3)
   233c0:	10000c1e 	bne	r2,zero,233f4 <quorem+0x13c>
   233c4:	18bfff04 	addi	r2,r3,-4
   233c8:	9880082e 	bgeu	r19,r2,233ec <quorem+0x134>
   233cc:	18ffff17 	ldw	r3,-4(r3)
   233d0:	18000326 	beq	r3,zero,233e0 <quorem+0x128>
   233d4:	00000506 	br	233ec <quorem+0x134>
   233d8:	10c00017 	ldw	r3,0(r2)
   233dc:	1800031e 	bne	r3,zero,233ec <quorem+0x134>
   233e0:	10bfff04 	addi	r2,r2,-4
   233e4:	bdffffc4 	addi	r23,r23,-1
   233e8:	98bffb36 	bltu	r19,r2,233d8 <__alt_data_end+0xfffe33d8>
   233ec:	d8c00017 	ldw	r3,0(sp)
   233f0:	1dc00415 	stw	r23,16(r3)
   233f4:	d9400217 	ldw	r5,8(sp)
   233f8:	d9000017 	ldw	r4,0(sp)
   233fc:	002751c0 	call	2751c <__mcmp>
   23400:	10002816 	blt	r2,zero,234a4 <quorem+0x1ec>
   23404:	dc400117 	ldw	r17,4(sp)
   23408:	94800044 	addi	r18,r18,1
   2340c:	980d883a 	mov	r6,r19
   23410:	0007883a 	mov	r3,zero
   23414:	31000017 	ldw	r4,0(r6)
   23418:	89400017 	ldw	r5,0(r17)
   2341c:	31800104 	addi	r6,r6,4
   23420:	20bfffcc 	andi	r2,r4,65535
   23424:	10c7883a 	add	r3,r2,r3
   23428:	28bfffcc 	andi	r2,r5,65535
   2342c:	1885c83a 	sub	r2,r3,r2
   23430:	280ad43a 	srli	r5,r5,16
   23434:	2008d43a 	srli	r4,r4,16
   23438:	1007d43a 	srai	r3,r2,16
   2343c:	10bfffcc 	andi	r2,r2,65535
   23440:	2149c83a 	sub	r4,r4,r5
   23444:	20c9883a 	add	r4,r4,r3
   23448:	200a943a 	slli	r5,r4,16
   2344c:	8c400104 	addi	r17,r17,4
   23450:	2007d43a 	srai	r3,r4,16
   23454:	2884b03a 	or	r2,r5,r2
   23458:	30bfff15 	stw	r2,-4(r6)
   2345c:	e47fed2e 	bgeu	fp,r17,23414 <__alt_data_end+0xfffe3414>
   23460:	bdc5883a 	add	r2,r23,r23
   23464:	1085883a 	add	r2,r2,r2
   23468:	9887883a 	add	r3,r19,r2
   2346c:	18800017 	ldw	r2,0(r3)
   23470:	10000c1e 	bne	r2,zero,234a4 <quorem+0x1ec>
   23474:	18bfff04 	addi	r2,r3,-4
   23478:	9880082e 	bgeu	r19,r2,2349c <quorem+0x1e4>
   2347c:	18ffff17 	ldw	r3,-4(r3)
   23480:	18000326 	beq	r3,zero,23490 <quorem+0x1d8>
   23484:	00000506 	br	2349c <quorem+0x1e4>
   23488:	10c00017 	ldw	r3,0(r2)
   2348c:	1800031e 	bne	r3,zero,2349c <quorem+0x1e4>
   23490:	10bfff04 	addi	r2,r2,-4
   23494:	bdffffc4 	addi	r23,r23,-1
   23498:	98bffb36 	bltu	r19,r2,23488 <__alt_data_end+0xfffe3488>
   2349c:	d8c00017 	ldw	r3,0(sp)
   234a0:	1dc00415 	stw	r23,16(r3)
   234a4:	9005883a 	mov	r2,r18
   234a8:	dfc00d17 	ldw	ra,52(sp)
   234ac:	df000c17 	ldw	fp,48(sp)
   234b0:	ddc00b17 	ldw	r23,44(sp)
   234b4:	dd800a17 	ldw	r22,40(sp)
   234b8:	dd400917 	ldw	r21,36(sp)
   234bc:	dd000817 	ldw	r20,32(sp)
   234c0:	dcc00717 	ldw	r19,28(sp)
   234c4:	dc800617 	ldw	r18,24(sp)
   234c8:	dc400517 	ldw	r17,20(sp)
   234cc:	dc000417 	ldw	r16,16(sp)
   234d0:	dec00e04 	addi	sp,sp,56
   234d4:	f800283a 	ret
   234d8:	0005883a 	mov	r2,zero
   234dc:	003ff206 	br	234a8 <__alt_data_end+0xfffe34a8>

000234e0 <_dtoa_r>:
   234e0:	20801017 	ldw	r2,64(r4)
   234e4:	deffde04 	addi	sp,sp,-136
   234e8:	df002015 	stw	fp,128(sp)
   234ec:	dcc01b15 	stw	r19,108(sp)
   234f0:	dc801a15 	stw	r18,104(sp)
   234f4:	dc401915 	stw	r17,100(sp)
   234f8:	dc001815 	stw	r16,96(sp)
   234fc:	dfc02115 	stw	ra,132(sp)
   23500:	ddc01f15 	stw	r23,124(sp)
   23504:	dd801e15 	stw	r22,120(sp)
   23508:	dd401d15 	stw	r21,116(sp)
   2350c:	dd001c15 	stw	r20,112(sp)
   23510:	d9c00315 	stw	r7,12(sp)
   23514:	2039883a 	mov	fp,r4
   23518:	3023883a 	mov	r17,r6
   2351c:	2825883a 	mov	r18,r5
   23520:	dc002417 	ldw	r16,144(sp)
   23524:	3027883a 	mov	r19,r6
   23528:	10000826 	beq	r2,zero,2354c <_dtoa_r+0x6c>
   2352c:	21801117 	ldw	r6,68(r4)
   23530:	00c00044 	movi	r3,1
   23534:	100b883a 	mov	r5,r2
   23538:	1986983a 	sll	r3,r3,r6
   2353c:	11800115 	stw	r6,4(r2)
   23540:	10c00215 	stw	r3,8(r2)
   23544:	0026c400 	call	26c40 <_Bfree>
   23548:	e0001015 	stw	zero,64(fp)
   2354c:	88002e16 	blt	r17,zero,23608 <_dtoa_r+0x128>
   23550:	80000015 	stw	zero,0(r16)
   23554:	889ffc2c 	andhi	r2,r17,32752
   23558:	00dffc34 	movhi	r3,32752
   2355c:	10c01c26 	beq	r2,r3,235d0 <_dtoa_r+0xf0>
   23560:	000d883a 	mov	r6,zero
   23564:	000f883a 	mov	r7,zero
   23568:	9009883a 	mov	r4,r18
   2356c:	980b883a 	mov	r5,r19
   23570:	002c33c0 	call	2c33c <__eqdf2>
   23574:	10002b1e 	bne	r2,zero,23624 <_dtoa_r+0x144>
   23578:	d9c02317 	ldw	r7,140(sp)
   2357c:	00800044 	movi	r2,1
   23580:	38800015 	stw	r2,0(r7)
   23584:	d8802517 	ldw	r2,148(sp)
   23588:	10019e26 	beq	r2,zero,23c04 <_dtoa_r+0x724>
   2358c:	d8c02517 	ldw	r3,148(sp)
   23590:	008000f4 	movhi	r2,3
   23594:	1082c944 	addi	r2,r2,2853
   23598:	18800015 	stw	r2,0(r3)
   2359c:	10bfffc4 	addi	r2,r2,-1
   235a0:	dfc02117 	ldw	ra,132(sp)
   235a4:	df002017 	ldw	fp,128(sp)
   235a8:	ddc01f17 	ldw	r23,124(sp)
   235ac:	dd801e17 	ldw	r22,120(sp)
   235b0:	dd401d17 	ldw	r21,116(sp)
   235b4:	dd001c17 	ldw	r20,112(sp)
   235b8:	dcc01b17 	ldw	r19,108(sp)
   235bc:	dc801a17 	ldw	r18,104(sp)
   235c0:	dc401917 	ldw	r17,100(sp)
   235c4:	dc001817 	ldw	r16,96(sp)
   235c8:	dec02204 	addi	sp,sp,136
   235cc:	f800283a 	ret
   235d0:	d8c02317 	ldw	r3,140(sp)
   235d4:	0089c3c4 	movi	r2,9999
   235d8:	18800015 	stw	r2,0(r3)
   235dc:	90017726 	beq	r18,zero,23bbc <_dtoa_r+0x6dc>
   235e0:	008000f4 	movhi	r2,3
   235e4:	1082d504 	addi	r2,r2,2900
   235e8:	d9002517 	ldw	r4,148(sp)
   235ec:	203fec26 	beq	r4,zero,235a0 <__alt_data_end+0xfffe35a0>
   235f0:	10c000c7 	ldb	r3,3(r2)
   235f4:	1801781e 	bne	r3,zero,23bd8 <_dtoa_r+0x6f8>
   235f8:	10c000c4 	addi	r3,r2,3
   235fc:	d9802517 	ldw	r6,148(sp)
   23600:	30c00015 	stw	r3,0(r6)
   23604:	003fe606 	br	235a0 <__alt_data_end+0xfffe35a0>
   23608:	04e00034 	movhi	r19,32768
   2360c:	9cffffc4 	addi	r19,r19,-1
   23610:	00800044 	movi	r2,1
   23614:	8ce6703a 	and	r19,r17,r19
   23618:	80800015 	stw	r2,0(r16)
   2361c:	9823883a 	mov	r17,r19
   23620:	003fcc06 	br	23554 <__alt_data_end+0xfffe3554>
   23624:	d8800204 	addi	r2,sp,8
   23628:	d8800015 	stw	r2,0(sp)
   2362c:	d9c00104 	addi	r7,sp,4
   23630:	900b883a 	mov	r5,r18
   23634:	980d883a 	mov	r6,r19
   23638:	e009883a 	mov	r4,fp
   2363c:	8820d53a 	srli	r16,r17,20
   23640:	00278e80 	call	278e8 <__d2b>
   23644:	d8800915 	stw	r2,36(sp)
   23648:	8001651e 	bne	r16,zero,23be0 <_dtoa_r+0x700>
   2364c:	dd800217 	ldw	r22,8(sp)
   23650:	dc000117 	ldw	r16,4(sp)
   23654:	00800804 	movi	r2,32
   23658:	b421883a 	add	r16,r22,r16
   2365c:	80c10c84 	addi	r3,r16,1074
   23660:	10c2d10e 	bge	r2,r3,241a8 <_dtoa_r+0xcc8>
   23664:	00801004 	movi	r2,64
   23668:	81010484 	addi	r4,r16,1042
   2366c:	10c7c83a 	sub	r3,r2,r3
   23670:	9108d83a 	srl	r4,r18,r4
   23674:	88e2983a 	sll	r17,r17,r3
   23678:	2448b03a 	or	r4,r4,r17
   2367c:	002d8580 	call	2d858 <__floatunsidf>
   23680:	017f8434 	movhi	r5,65040
   23684:	01800044 	movi	r6,1
   23688:	1009883a 	mov	r4,r2
   2368c:	194b883a 	add	r5,r3,r5
   23690:	843fffc4 	addi	r16,r16,-1
   23694:	d9801115 	stw	r6,68(sp)
   23698:	000d883a 	mov	r6,zero
   2369c:	01cffe34 	movhi	r7,16376
   236a0:	002ce000 	call	2ce00 <__subdf3>
   236a4:	0198dbf4 	movhi	r6,25455
   236a8:	01cff4f4 	movhi	r7,16339
   236ac:	3190d844 	addi	r6,r6,17249
   236b0:	39e1e9c4 	addi	r7,r7,-30809
   236b4:	1009883a 	mov	r4,r2
   236b8:	180b883a 	mov	r5,r3
   236bc:	002c5940 	call	2c594 <__muldf3>
   236c0:	01a2d874 	movhi	r6,35681
   236c4:	01cff1f4 	movhi	r7,16327
   236c8:	31b22cc4 	addi	r6,r6,-14157
   236cc:	39e28a04 	addi	r7,r7,-30168
   236d0:	180b883a 	mov	r5,r3
   236d4:	1009883a 	mov	r4,r2
   236d8:	002b0c00 	call	2b0c0 <__adddf3>
   236dc:	8009883a 	mov	r4,r16
   236e0:	1029883a 	mov	r20,r2
   236e4:	1823883a 	mov	r17,r3
   236e8:	002d77c0 	call	2d77c <__floatsidf>
   236ec:	019427f4 	movhi	r6,20639
   236f0:	01cff4f4 	movhi	r7,16339
   236f4:	319e7ec4 	addi	r6,r6,31227
   236f8:	39d104c4 	addi	r7,r7,17427
   236fc:	1009883a 	mov	r4,r2
   23700:	180b883a 	mov	r5,r3
   23704:	002c5940 	call	2c594 <__muldf3>
   23708:	100d883a 	mov	r6,r2
   2370c:	180f883a 	mov	r7,r3
   23710:	a009883a 	mov	r4,r20
   23714:	880b883a 	mov	r5,r17
   23718:	002b0c00 	call	2b0c0 <__adddf3>
   2371c:	1009883a 	mov	r4,r2
   23720:	180b883a 	mov	r5,r3
   23724:	1029883a 	mov	r20,r2
   23728:	1823883a 	mov	r17,r3
   2372c:	002d6fc0 	call	2d6fc <__fixdfsi>
   23730:	000d883a 	mov	r6,zero
   23734:	000f883a 	mov	r7,zero
   23738:	a009883a 	mov	r4,r20
   2373c:	880b883a 	mov	r5,r17
   23740:	d8800515 	stw	r2,20(sp)
   23744:	002c4a00 	call	2c4a0 <__ledf2>
   23748:	10028716 	blt	r2,zero,24168 <_dtoa_r+0xc88>
   2374c:	d8c00517 	ldw	r3,20(sp)
   23750:	00800584 	movi	r2,22
   23754:	10c27536 	bltu	r2,r3,2412c <_dtoa_r+0xc4c>
   23758:	180490fa 	slli	r2,r3,3
   2375c:	00c000f4 	movhi	r3,3
   23760:	18c2f104 	addi	r3,r3,3012
   23764:	1885883a 	add	r2,r3,r2
   23768:	11000017 	ldw	r4,0(r2)
   2376c:	11400117 	ldw	r5,4(r2)
   23770:	900d883a 	mov	r6,r18
   23774:	980f883a 	mov	r7,r19
   23778:	002c3c40 	call	2c3c4 <__gedf2>
   2377c:	00828d0e 	bge	zero,r2,241b4 <_dtoa_r+0xcd4>
   23780:	d9000517 	ldw	r4,20(sp)
   23784:	d8000e15 	stw	zero,56(sp)
   23788:	213fffc4 	addi	r4,r4,-1
   2378c:	d9000515 	stw	r4,20(sp)
   23790:	b42dc83a 	sub	r22,r22,r16
   23794:	b5bfffc4 	addi	r22,r22,-1
   23798:	b0026f16 	blt	r22,zero,24158 <_dtoa_r+0xc78>
   2379c:	d8000815 	stw	zero,32(sp)
   237a0:	d9c00517 	ldw	r7,20(sp)
   237a4:	38026416 	blt	r7,zero,24138 <_dtoa_r+0xc58>
   237a8:	b1ed883a 	add	r22,r22,r7
   237ac:	d9c00d15 	stw	r7,52(sp)
   237b0:	d8000a15 	stw	zero,40(sp)
   237b4:	d9800317 	ldw	r6,12(sp)
   237b8:	00800244 	movi	r2,9
   237bc:	11811436 	bltu	r2,r6,23c10 <_dtoa_r+0x730>
   237c0:	00800144 	movi	r2,5
   237c4:	1184e10e 	bge	r2,r6,24b4c <_dtoa_r+0x166c>
   237c8:	31bfff04 	addi	r6,r6,-4
   237cc:	d9800315 	stw	r6,12(sp)
   237d0:	0023883a 	mov	r17,zero
   237d4:	d9800317 	ldw	r6,12(sp)
   237d8:	008000c4 	movi	r2,3
   237dc:	30836726 	beq	r6,r2,2457c <_dtoa_r+0x109c>
   237e0:	1183410e 	bge	r2,r6,244e8 <_dtoa_r+0x1008>
   237e4:	d9c00317 	ldw	r7,12(sp)
   237e8:	00800104 	movi	r2,4
   237ec:	38827c26 	beq	r7,r2,241e0 <_dtoa_r+0xd00>
   237f0:	00800144 	movi	r2,5
   237f4:	3884c41e 	bne	r7,r2,24b08 <_dtoa_r+0x1628>
   237f8:	00800044 	movi	r2,1
   237fc:	d8800b15 	stw	r2,44(sp)
   23800:	d8c00517 	ldw	r3,20(sp)
   23804:	d9002217 	ldw	r4,136(sp)
   23808:	1907883a 	add	r3,r3,r4
   2380c:	19800044 	addi	r6,r3,1
   23810:	d8c00c15 	stw	r3,48(sp)
   23814:	d9800615 	stw	r6,24(sp)
   23818:	0183a40e 	bge	zero,r6,246ac <_dtoa_r+0x11cc>
   2381c:	d9800617 	ldw	r6,24(sp)
   23820:	3021883a 	mov	r16,r6
   23824:	e0001115 	stw	zero,68(fp)
   23828:	008005c4 	movi	r2,23
   2382c:	1184c92e 	bgeu	r2,r6,24b54 <_dtoa_r+0x1674>
   23830:	00c00044 	movi	r3,1
   23834:	00800104 	movi	r2,4
   23838:	1085883a 	add	r2,r2,r2
   2383c:	11000504 	addi	r4,r2,20
   23840:	180b883a 	mov	r5,r3
   23844:	18c00044 	addi	r3,r3,1
   23848:	313ffb2e 	bgeu	r6,r4,23838 <__alt_data_end+0xfffe3838>
   2384c:	e1401115 	stw	r5,68(fp)
   23850:	e009883a 	mov	r4,fp
   23854:	0026b980 	call	26b98 <_Balloc>
   23858:	d8800715 	stw	r2,28(sp)
   2385c:	e0801015 	stw	r2,64(fp)
   23860:	00800384 	movi	r2,14
   23864:	1400f736 	bltu	r2,r16,23c44 <_dtoa_r+0x764>
   23868:	8800f626 	beq	r17,zero,23c44 <_dtoa_r+0x764>
   2386c:	d9c00517 	ldw	r7,20(sp)
   23870:	01c39a0e 	bge	zero,r7,246dc <_dtoa_r+0x11fc>
   23874:	388003cc 	andi	r2,r7,15
   23878:	100490fa 	slli	r2,r2,3
   2387c:	382bd13a 	srai	r21,r7,4
   23880:	00c000f4 	movhi	r3,3
   23884:	18c2f104 	addi	r3,r3,3012
   23888:	1885883a 	add	r2,r3,r2
   2388c:	a8c0040c 	andi	r3,r21,16
   23890:	12400017 	ldw	r9,0(r2)
   23894:	12000117 	ldw	r8,4(r2)
   23898:	18037926 	beq	r3,zero,24680 <_dtoa_r+0x11a0>
   2389c:	008000f4 	movhi	r2,3
   238a0:	1082e704 	addi	r2,r2,2972
   238a4:	11800817 	ldw	r6,32(r2)
   238a8:	11c00917 	ldw	r7,36(r2)
   238ac:	9009883a 	mov	r4,r18
   238b0:	980b883a 	mov	r5,r19
   238b4:	da001715 	stw	r8,92(sp)
   238b8:	da401615 	stw	r9,88(sp)
   238bc:	002b96c0 	call	2b96c <__divdf3>
   238c0:	da001717 	ldw	r8,92(sp)
   238c4:	da401617 	ldw	r9,88(sp)
   238c8:	ad4003cc 	andi	r21,r21,15
   238cc:	040000c4 	movi	r16,3
   238d0:	1023883a 	mov	r17,r2
   238d4:	1829883a 	mov	r20,r3
   238d8:	a8001126 	beq	r21,zero,23920 <_dtoa_r+0x440>
   238dc:	05c000f4 	movhi	r23,3
   238e0:	bdc2e704 	addi	r23,r23,2972
   238e4:	4805883a 	mov	r2,r9
   238e8:	4007883a 	mov	r3,r8
   238ec:	a980004c 	andi	r6,r21,1
   238f0:	1009883a 	mov	r4,r2
   238f4:	a82bd07a 	srai	r21,r21,1
   238f8:	180b883a 	mov	r5,r3
   238fc:	30000426 	beq	r6,zero,23910 <_dtoa_r+0x430>
   23900:	b9800017 	ldw	r6,0(r23)
   23904:	b9c00117 	ldw	r7,4(r23)
   23908:	84000044 	addi	r16,r16,1
   2390c:	002c5940 	call	2c594 <__muldf3>
   23910:	bdc00204 	addi	r23,r23,8
   23914:	a83ff51e 	bne	r21,zero,238ec <__alt_data_end+0xfffe38ec>
   23918:	1013883a 	mov	r9,r2
   2391c:	1811883a 	mov	r8,r3
   23920:	480d883a 	mov	r6,r9
   23924:	400f883a 	mov	r7,r8
   23928:	8809883a 	mov	r4,r17
   2392c:	a00b883a 	mov	r5,r20
   23930:	002b96c0 	call	2b96c <__divdf3>
   23934:	d8800f15 	stw	r2,60(sp)
   23938:	d8c01015 	stw	r3,64(sp)
   2393c:	d8c00e17 	ldw	r3,56(sp)
   23940:	18000626 	beq	r3,zero,2395c <_dtoa_r+0x47c>
   23944:	d9000f17 	ldw	r4,60(sp)
   23948:	d9401017 	ldw	r5,64(sp)
   2394c:	000d883a 	mov	r6,zero
   23950:	01cffc34 	movhi	r7,16368
   23954:	002c4a00 	call	2c4a0 <__ledf2>
   23958:	10040b16 	blt	r2,zero,24988 <_dtoa_r+0x14a8>
   2395c:	8009883a 	mov	r4,r16
   23960:	002d77c0 	call	2d77c <__floatsidf>
   23964:	d9800f17 	ldw	r6,60(sp)
   23968:	d9c01017 	ldw	r7,64(sp)
   2396c:	1009883a 	mov	r4,r2
   23970:	180b883a 	mov	r5,r3
   23974:	002c5940 	call	2c594 <__muldf3>
   23978:	000d883a 	mov	r6,zero
   2397c:	01d00734 	movhi	r7,16412
   23980:	1009883a 	mov	r4,r2
   23984:	180b883a 	mov	r5,r3
   23988:	002b0c00 	call	2b0c0 <__adddf3>
   2398c:	1021883a 	mov	r16,r2
   23990:	d8800617 	ldw	r2,24(sp)
   23994:	047f3034 	movhi	r17,64704
   23998:	1c63883a 	add	r17,r3,r17
   2399c:	10031826 	beq	r2,zero,24600 <_dtoa_r+0x1120>
   239a0:	d8c00517 	ldw	r3,20(sp)
   239a4:	db000617 	ldw	r12,24(sp)
   239a8:	d8c01315 	stw	r3,76(sp)
   239ac:	d9000b17 	ldw	r4,44(sp)
   239b0:	20038f26 	beq	r4,zero,247f0 <_dtoa_r+0x1310>
   239b4:	60bfffc4 	addi	r2,r12,-1
   239b8:	100490fa 	slli	r2,r2,3
   239bc:	00c000f4 	movhi	r3,3
   239c0:	18c2f104 	addi	r3,r3,3012
   239c4:	1885883a 	add	r2,r3,r2
   239c8:	11800017 	ldw	r6,0(r2)
   239cc:	11c00117 	ldw	r7,4(r2)
   239d0:	d8800717 	ldw	r2,28(sp)
   239d4:	0009883a 	mov	r4,zero
   239d8:	014ff834 	movhi	r5,16352
   239dc:	db001615 	stw	r12,88(sp)
   239e0:	15c00044 	addi	r23,r2,1
   239e4:	002b96c0 	call	2b96c <__divdf3>
   239e8:	800d883a 	mov	r6,r16
   239ec:	880f883a 	mov	r7,r17
   239f0:	1009883a 	mov	r4,r2
   239f4:	180b883a 	mov	r5,r3
   239f8:	002ce000 	call	2ce00 <__subdf3>
   239fc:	d9401017 	ldw	r5,64(sp)
   23a00:	d9000f17 	ldw	r4,60(sp)
   23a04:	102b883a 	mov	r21,r2
   23a08:	d8c01215 	stw	r3,72(sp)
   23a0c:	002d6fc0 	call	2d6fc <__fixdfsi>
   23a10:	1009883a 	mov	r4,r2
   23a14:	1029883a 	mov	r20,r2
   23a18:	002d77c0 	call	2d77c <__floatsidf>
   23a1c:	d9000f17 	ldw	r4,60(sp)
   23a20:	d9401017 	ldw	r5,64(sp)
   23a24:	100d883a 	mov	r6,r2
   23a28:	180f883a 	mov	r7,r3
   23a2c:	002ce000 	call	2ce00 <__subdf3>
   23a30:	1823883a 	mov	r17,r3
   23a34:	d8c00717 	ldw	r3,28(sp)
   23a38:	d9401217 	ldw	r5,72(sp)
   23a3c:	a2000c04 	addi	r8,r20,48
   23a40:	1021883a 	mov	r16,r2
   23a44:	1a000005 	stb	r8,0(r3)
   23a48:	800d883a 	mov	r6,r16
   23a4c:	880f883a 	mov	r7,r17
   23a50:	a809883a 	mov	r4,r21
   23a54:	4029883a 	mov	r20,r8
   23a58:	002c3c40 	call	2c3c4 <__gedf2>
   23a5c:	00841d16 	blt	zero,r2,24ad4 <_dtoa_r+0x15f4>
   23a60:	800d883a 	mov	r6,r16
   23a64:	880f883a 	mov	r7,r17
   23a68:	0009883a 	mov	r4,zero
   23a6c:	014ffc34 	movhi	r5,16368
   23a70:	002ce000 	call	2ce00 <__subdf3>
   23a74:	d9401217 	ldw	r5,72(sp)
   23a78:	100d883a 	mov	r6,r2
   23a7c:	180f883a 	mov	r7,r3
   23a80:	a809883a 	mov	r4,r21
   23a84:	002c3c40 	call	2c3c4 <__gedf2>
   23a88:	db001617 	ldw	r12,88(sp)
   23a8c:	00840e16 	blt	zero,r2,24ac8 <_dtoa_r+0x15e8>
   23a90:	00800044 	movi	r2,1
   23a94:	13006b0e 	bge	r2,r12,23c44 <_dtoa_r+0x764>
   23a98:	d9000717 	ldw	r4,28(sp)
   23a9c:	dd800f15 	stw	r22,60(sp)
   23aa0:	dcc01015 	stw	r19,64(sp)
   23aa4:	2319883a 	add	r12,r4,r12
   23aa8:	dcc01217 	ldw	r19,72(sp)
   23aac:	602d883a 	mov	r22,r12
   23ab0:	dc801215 	stw	r18,72(sp)
   23ab4:	b825883a 	mov	r18,r23
   23ab8:	00000906 	br	23ae0 <_dtoa_r+0x600>
   23abc:	002ce000 	call	2ce00 <__subdf3>
   23ac0:	a80d883a 	mov	r6,r21
   23ac4:	980f883a 	mov	r7,r19
   23ac8:	1009883a 	mov	r4,r2
   23acc:	180b883a 	mov	r5,r3
   23ad0:	002c4a00 	call	2c4a0 <__ledf2>
   23ad4:	1003e816 	blt	r2,zero,24a78 <_dtoa_r+0x1598>
   23ad8:	b825883a 	mov	r18,r23
   23adc:	bd83e926 	beq	r23,r22,24a84 <_dtoa_r+0x15a4>
   23ae0:	a809883a 	mov	r4,r21
   23ae4:	980b883a 	mov	r5,r19
   23ae8:	000d883a 	mov	r6,zero
   23aec:	01d00934 	movhi	r7,16420
   23af0:	002c5940 	call	2c594 <__muldf3>
   23af4:	000d883a 	mov	r6,zero
   23af8:	01d00934 	movhi	r7,16420
   23afc:	8009883a 	mov	r4,r16
   23b00:	880b883a 	mov	r5,r17
   23b04:	102b883a 	mov	r21,r2
   23b08:	1827883a 	mov	r19,r3
   23b0c:	002c5940 	call	2c594 <__muldf3>
   23b10:	180b883a 	mov	r5,r3
   23b14:	1009883a 	mov	r4,r2
   23b18:	1821883a 	mov	r16,r3
   23b1c:	1023883a 	mov	r17,r2
   23b20:	002d6fc0 	call	2d6fc <__fixdfsi>
   23b24:	1009883a 	mov	r4,r2
   23b28:	1029883a 	mov	r20,r2
   23b2c:	002d77c0 	call	2d77c <__floatsidf>
   23b30:	8809883a 	mov	r4,r17
   23b34:	800b883a 	mov	r5,r16
   23b38:	100d883a 	mov	r6,r2
   23b3c:	180f883a 	mov	r7,r3
   23b40:	002ce000 	call	2ce00 <__subdf3>
   23b44:	a5000c04 	addi	r20,r20,48
   23b48:	a80d883a 	mov	r6,r21
   23b4c:	980f883a 	mov	r7,r19
   23b50:	1009883a 	mov	r4,r2
   23b54:	180b883a 	mov	r5,r3
   23b58:	95000005 	stb	r20,0(r18)
   23b5c:	1021883a 	mov	r16,r2
   23b60:	1823883a 	mov	r17,r3
   23b64:	002c4a00 	call	2c4a0 <__ledf2>
   23b68:	bdc00044 	addi	r23,r23,1
   23b6c:	800d883a 	mov	r6,r16
   23b70:	880f883a 	mov	r7,r17
   23b74:	0009883a 	mov	r4,zero
   23b78:	014ffc34 	movhi	r5,16368
   23b7c:	103fcf0e 	bge	r2,zero,23abc <__alt_data_end+0xfffe3abc>
   23b80:	d8c01317 	ldw	r3,76(sp)
   23b84:	d8c00515 	stw	r3,20(sp)
   23b88:	d9400917 	ldw	r5,36(sp)
   23b8c:	e009883a 	mov	r4,fp
   23b90:	0026c400 	call	26c40 <_Bfree>
   23b94:	d9000517 	ldw	r4,20(sp)
   23b98:	d9802317 	ldw	r6,140(sp)
   23b9c:	d9c02517 	ldw	r7,148(sp)
   23ba0:	b8000005 	stb	zero,0(r23)
   23ba4:	20800044 	addi	r2,r4,1
   23ba8:	30800015 	stw	r2,0(r6)
   23bac:	3802aa26 	beq	r7,zero,24658 <_dtoa_r+0x1178>
   23bb0:	3dc00015 	stw	r23,0(r7)
   23bb4:	d8800717 	ldw	r2,28(sp)
   23bb8:	003e7906 	br	235a0 <__alt_data_end+0xfffe35a0>
   23bbc:	00800434 	movhi	r2,16
   23bc0:	10bfffc4 	addi	r2,r2,-1
   23bc4:	88a2703a 	and	r17,r17,r2
   23bc8:	883e851e 	bne	r17,zero,235e0 <__alt_data_end+0xfffe35e0>
   23bcc:	008000f4 	movhi	r2,3
   23bd0:	1082d204 	addi	r2,r2,2888
   23bd4:	003e8406 	br	235e8 <__alt_data_end+0xfffe35e8>
   23bd8:	10c00204 	addi	r3,r2,8
   23bdc:	003e8706 	br	235fc <__alt_data_end+0xfffe35fc>
   23be0:	01400434 	movhi	r5,16
   23be4:	297fffc4 	addi	r5,r5,-1
   23be8:	994a703a 	and	r5,r19,r5
   23bec:	9009883a 	mov	r4,r18
   23bf0:	843f0044 	addi	r16,r16,-1023
   23bf4:	294ffc34 	orhi	r5,r5,16368
   23bf8:	dd800217 	ldw	r22,8(sp)
   23bfc:	d8001115 	stw	zero,68(sp)
   23c00:	003ea506 	br	23698 <__alt_data_end+0xfffe3698>
   23c04:	008000f4 	movhi	r2,3
   23c08:	1082c904 	addi	r2,r2,2852
   23c0c:	003e6406 	br	235a0 <__alt_data_end+0xfffe35a0>
   23c10:	e0001115 	stw	zero,68(fp)
   23c14:	000b883a 	mov	r5,zero
   23c18:	e009883a 	mov	r4,fp
   23c1c:	0026b980 	call	26b98 <_Balloc>
   23c20:	01bfffc4 	movi	r6,-1
   23c24:	01c00044 	movi	r7,1
   23c28:	d8800715 	stw	r2,28(sp)
   23c2c:	d9800c15 	stw	r6,48(sp)
   23c30:	e0801015 	stw	r2,64(fp)
   23c34:	d8000315 	stw	zero,12(sp)
   23c38:	d9c00b15 	stw	r7,44(sp)
   23c3c:	d9800615 	stw	r6,24(sp)
   23c40:	d8002215 	stw	zero,136(sp)
   23c44:	d8800117 	ldw	r2,4(sp)
   23c48:	10008916 	blt	r2,zero,23e70 <_dtoa_r+0x990>
   23c4c:	d9000517 	ldw	r4,20(sp)
   23c50:	00c00384 	movi	r3,14
   23c54:	19008616 	blt	r3,r4,23e70 <_dtoa_r+0x990>
   23c58:	200490fa 	slli	r2,r4,3
   23c5c:	00c000f4 	movhi	r3,3
   23c60:	d9802217 	ldw	r6,136(sp)
   23c64:	18c2f104 	addi	r3,r3,3012
   23c68:	1885883a 	add	r2,r3,r2
   23c6c:	14000017 	ldw	r16,0(r2)
   23c70:	14400117 	ldw	r17,4(r2)
   23c74:	30016316 	blt	r6,zero,24204 <_dtoa_r+0xd24>
   23c78:	800d883a 	mov	r6,r16
   23c7c:	880f883a 	mov	r7,r17
   23c80:	9009883a 	mov	r4,r18
   23c84:	980b883a 	mov	r5,r19
   23c88:	002b96c0 	call	2b96c <__divdf3>
   23c8c:	180b883a 	mov	r5,r3
   23c90:	1009883a 	mov	r4,r2
   23c94:	002d6fc0 	call	2d6fc <__fixdfsi>
   23c98:	1009883a 	mov	r4,r2
   23c9c:	102b883a 	mov	r21,r2
   23ca0:	002d77c0 	call	2d77c <__floatsidf>
   23ca4:	800d883a 	mov	r6,r16
   23ca8:	880f883a 	mov	r7,r17
   23cac:	1009883a 	mov	r4,r2
   23cb0:	180b883a 	mov	r5,r3
   23cb4:	002c5940 	call	2c594 <__muldf3>
   23cb8:	100d883a 	mov	r6,r2
   23cbc:	180f883a 	mov	r7,r3
   23cc0:	9009883a 	mov	r4,r18
   23cc4:	980b883a 	mov	r5,r19
   23cc8:	002ce000 	call	2ce00 <__subdf3>
   23ccc:	d9c00717 	ldw	r7,28(sp)
   23cd0:	1009883a 	mov	r4,r2
   23cd4:	a8800c04 	addi	r2,r21,48
   23cd8:	38800005 	stb	r2,0(r7)
   23cdc:	3dc00044 	addi	r23,r7,1
   23ce0:	d9c00617 	ldw	r7,24(sp)
   23ce4:	01800044 	movi	r6,1
   23ce8:	180b883a 	mov	r5,r3
   23cec:	2005883a 	mov	r2,r4
   23cf0:	39803826 	beq	r7,r6,23dd4 <_dtoa_r+0x8f4>
   23cf4:	000d883a 	mov	r6,zero
   23cf8:	01d00934 	movhi	r7,16420
   23cfc:	002c5940 	call	2c594 <__muldf3>
   23d00:	000d883a 	mov	r6,zero
   23d04:	000f883a 	mov	r7,zero
   23d08:	1009883a 	mov	r4,r2
   23d0c:	180b883a 	mov	r5,r3
   23d10:	1025883a 	mov	r18,r2
   23d14:	1827883a 	mov	r19,r3
   23d18:	002c33c0 	call	2c33c <__eqdf2>
   23d1c:	103f9a26 	beq	r2,zero,23b88 <__alt_data_end+0xfffe3b88>
   23d20:	d9c00617 	ldw	r7,24(sp)
   23d24:	d8c00717 	ldw	r3,28(sp)
   23d28:	b829883a 	mov	r20,r23
   23d2c:	38bfffc4 	addi	r2,r7,-1
   23d30:	18ad883a 	add	r22,r3,r2
   23d34:	00000a06 	br	23d60 <_dtoa_r+0x880>
   23d38:	002c5940 	call	2c594 <__muldf3>
   23d3c:	000d883a 	mov	r6,zero
   23d40:	000f883a 	mov	r7,zero
   23d44:	1009883a 	mov	r4,r2
   23d48:	180b883a 	mov	r5,r3
   23d4c:	1025883a 	mov	r18,r2
   23d50:	1827883a 	mov	r19,r3
   23d54:	b829883a 	mov	r20,r23
   23d58:	002c33c0 	call	2c33c <__eqdf2>
   23d5c:	103f8a26 	beq	r2,zero,23b88 <__alt_data_end+0xfffe3b88>
   23d60:	800d883a 	mov	r6,r16
   23d64:	880f883a 	mov	r7,r17
   23d68:	9009883a 	mov	r4,r18
   23d6c:	980b883a 	mov	r5,r19
   23d70:	002b96c0 	call	2b96c <__divdf3>
   23d74:	180b883a 	mov	r5,r3
   23d78:	1009883a 	mov	r4,r2
   23d7c:	002d6fc0 	call	2d6fc <__fixdfsi>
   23d80:	1009883a 	mov	r4,r2
   23d84:	102b883a 	mov	r21,r2
   23d88:	002d77c0 	call	2d77c <__floatsidf>
   23d8c:	800d883a 	mov	r6,r16
   23d90:	880f883a 	mov	r7,r17
   23d94:	1009883a 	mov	r4,r2
   23d98:	180b883a 	mov	r5,r3
   23d9c:	002c5940 	call	2c594 <__muldf3>
   23da0:	100d883a 	mov	r6,r2
   23da4:	180f883a 	mov	r7,r3
   23da8:	9009883a 	mov	r4,r18
   23dac:	980b883a 	mov	r5,r19
   23db0:	002ce000 	call	2ce00 <__subdf3>
   23db4:	aa000c04 	addi	r8,r21,48
   23db8:	a2000005 	stb	r8,0(r20)
   23dbc:	000d883a 	mov	r6,zero
   23dc0:	01d00934 	movhi	r7,16420
   23dc4:	1009883a 	mov	r4,r2
   23dc8:	180b883a 	mov	r5,r3
   23dcc:	a5c00044 	addi	r23,r20,1
   23dd0:	b53fd91e 	bne	r22,r20,23d38 <__alt_data_end+0xfffe3d38>
   23dd4:	100d883a 	mov	r6,r2
   23dd8:	180f883a 	mov	r7,r3
   23ddc:	1009883a 	mov	r4,r2
   23de0:	180b883a 	mov	r5,r3
   23de4:	002b0c00 	call	2b0c0 <__adddf3>
   23de8:	100d883a 	mov	r6,r2
   23dec:	180f883a 	mov	r7,r3
   23df0:	8009883a 	mov	r4,r16
   23df4:	880b883a 	mov	r5,r17
   23df8:	1027883a 	mov	r19,r2
   23dfc:	1825883a 	mov	r18,r3
   23e00:	002c4a00 	call	2c4a0 <__ledf2>
   23e04:	10000816 	blt	r2,zero,23e28 <_dtoa_r+0x948>
   23e08:	980d883a 	mov	r6,r19
   23e0c:	900f883a 	mov	r7,r18
   23e10:	8009883a 	mov	r4,r16
   23e14:	880b883a 	mov	r5,r17
   23e18:	002c33c0 	call	2c33c <__eqdf2>
   23e1c:	103f5a1e 	bne	r2,zero,23b88 <__alt_data_end+0xfffe3b88>
   23e20:	ad40004c 	andi	r21,r21,1
   23e24:	a83f5826 	beq	r21,zero,23b88 <__alt_data_end+0xfffe3b88>
   23e28:	bd3fffc3 	ldbu	r20,-1(r23)
   23e2c:	b8bfffc4 	addi	r2,r23,-1
   23e30:	1007883a 	mov	r3,r2
   23e34:	01400e44 	movi	r5,57
   23e38:	d9800717 	ldw	r6,28(sp)
   23e3c:	00000506 	br	23e54 <_dtoa_r+0x974>
   23e40:	18ffffc4 	addi	r3,r3,-1
   23e44:	11824726 	beq	r2,r6,24764 <_dtoa_r+0x1284>
   23e48:	1d000003 	ldbu	r20,0(r3)
   23e4c:	102f883a 	mov	r23,r2
   23e50:	10bfffc4 	addi	r2,r2,-1
   23e54:	a1003fcc 	andi	r4,r20,255
   23e58:	2100201c 	xori	r4,r4,128
   23e5c:	213fe004 	addi	r4,r4,-128
   23e60:	217ff726 	beq	r4,r5,23e40 <__alt_data_end+0xfffe3e40>
   23e64:	a2000044 	addi	r8,r20,1
   23e68:	12000005 	stb	r8,0(r2)
   23e6c:	003f4606 	br	23b88 <__alt_data_end+0xfffe3b88>
   23e70:	d9000b17 	ldw	r4,44(sp)
   23e74:	2000c826 	beq	r4,zero,24198 <_dtoa_r+0xcb8>
   23e78:	d9800317 	ldw	r6,12(sp)
   23e7c:	00c00044 	movi	r3,1
   23e80:	1980f90e 	bge	r3,r6,24268 <_dtoa_r+0xd88>
   23e84:	d8800617 	ldw	r2,24(sp)
   23e88:	d8c00a17 	ldw	r3,40(sp)
   23e8c:	157fffc4 	addi	r21,r2,-1
   23e90:	1d41f316 	blt	r3,r21,24660 <_dtoa_r+0x1180>
   23e94:	1d6bc83a 	sub	r21,r3,r21
   23e98:	d9c00617 	ldw	r7,24(sp)
   23e9c:	3802aa16 	blt	r7,zero,24948 <_dtoa_r+0x1468>
   23ea0:	dd000817 	ldw	r20,32(sp)
   23ea4:	d8800617 	ldw	r2,24(sp)
   23ea8:	d8c00817 	ldw	r3,32(sp)
   23eac:	01400044 	movi	r5,1
   23eb0:	e009883a 	mov	r4,fp
   23eb4:	1887883a 	add	r3,r3,r2
   23eb8:	d8c00815 	stw	r3,32(sp)
   23ebc:	b0ad883a 	add	r22,r22,r2
   23ec0:	0026fcc0 	call	26fcc <__i2b>
   23ec4:	1023883a 	mov	r17,r2
   23ec8:	a0000826 	beq	r20,zero,23eec <_dtoa_r+0xa0c>
   23ecc:	0580070e 	bge	zero,r22,23eec <_dtoa_r+0xa0c>
   23ed0:	a005883a 	mov	r2,r20
   23ed4:	b500b916 	blt	r22,r20,241bc <_dtoa_r+0xcdc>
   23ed8:	d9000817 	ldw	r4,32(sp)
   23edc:	a0a9c83a 	sub	r20,r20,r2
   23ee0:	b0adc83a 	sub	r22,r22,r2
   23ee4:	2089c83a 	sub	r4,r4,r2
   23ee8:	d9000815 	stw	r4,32(sp)
   23eec:	d9800a17 	ldw	r6,40(sp)
   23ef0:	0181810e 	bge	zero,r6,244f8 <_dtoa_r+0x1018>
   23ef4:	d9c00b17 	ldw	r7,44(sp)
   23ef8:	3800b326 	beq	r7,zero,241c8 <_dtoa_r+0xce8>
   23efc:	a800b226 	beq	r21,zero,241c8 <_dtoa_r+0xce8>
   23f00:	880b883a 	mov	r5,r17
   23f04:	a80d883a 	mov	r6,r21
   23f08:	e009883a 	mov	r4,fp
   23f0c:	00272940 	call	27294 <__pow5mult>
   23f10:	d9800917 	ldw	r6,36(sp)
   23f14:	100b883a 	mov	r5,r2
   23f18:	e009883a 	mov	r4,fp
   23f1c:	1023883a 	mov	r17,r2
   23f20:	00270080 	call	27008 <__multiply>
   23f24:	1021883a 	mov	r16,r2
   23f28:	d8800a17 	ldw	r2,40(sp)
   23f2c:	d9400917 	ldw	r5,36(sp)
   23f30:	e009883a 	mov	r4,fp
   23f34:	1545c83a 	sub	r2,r2,r21
   23f38:	d8800a15 	stw	r2,40(sp)
   23f3c:	0026c400 	call	26c40 <_Bfree>
   23f40:	d8c00a17 	ldw	r3,40(sp)
   23f44:	18009f1e 	bne	r3,zero,241c4 <_dtoa_r+0xce4>
   23f48:	05c00044 	movi	r23,1
   23f4c:	e009883a 	mov	r4,fp
   23f50:	b80b883a 	mov	r5,r23
   23f54:	0026fcc0 	call	26fcc <__i2b>
   23f58:	d9000d17 	ldw	r4,52(sp)
   23f5c:	102b883a 	mov	r21,r2
   23f60:	2000ce26 	beq	r4,zero,2429c <_dtoa_r+0xdbc>
   23f64:	200d883a 	mov	r6,r4
   23f68:	100b883a 	mov	r5,r2
   23f6c:	e009883a 	mov	r4,fp
   23f70:	00272940 	call	27294 <__pow5mult>
   23f74:	d9800317 	ldw	r6,12(sp)
   23f78:	102b883a 	mov	r21,r2
   23f7c:	b981810e 	bge	r23,r6,24584 <_dtoa_r+0x10a4>
   23f80:	0027883a 	mov	r19,zero
   23f84:	a8800417 	ldw	r2,16(r21)
   23f88:	05c00804 	movi	r23,32
   23f8c:	10800104 	addi	r2,r2,4
   23f90:	1085883a 	add	r2,r2,r2
   23f94:	1085883a 	add	r2,r2,r2
   23f98:	a885883a 	add	r2,r21,r2
   23f9c:	11000017 	ldw	r4,0(r2)
   23fa0:	0026eb40 	call	26eb4 <__hi0bits>
   23fa4:	b885c83a 	sub	r2,r23,r2
   23fa8:	1585883a 	add	r2,r2,r22
   23fac:	108007cc 	andi	r2,r2,31
   23fb0:	1000b326 	beq	r2,zero,24280 <_dtoa_r+0xda0>
   23fb4:	00c00804 	movi	r3,32
   23fb8:	1887c83a 	sub	r3,r3,r2
   23fbc:	01000104 	movi	r4,4
   23fc0:	20c2cd0e 	bge	r4,r3,24af8 <_dtoa_r+0x1618>
   23fc4:	00c00704 	movi	r3,28
   23fc8:	1885c83a 	sub	r2,r3,r2
   23fcc:	d8c00817 	ldw	r3,32(sp)
   23fd0:	a0a9883a 	add	r20,r20,r2
   23fd4:	b0ad883a 	add	r22,r22,r2
   23fd8:	1887883a 	add	r3,r3,r2
   23fdc:	d8c00815 	stw	r3,32(sp)
   23fe0:	d9800817 	ldw	r6,32(sp)
   23fe4:	0180040e 	bge	zero,r6,23ff8 <_dtoa_r+0xb18>
   23fe8:	800b883a 	mov	r5,r16
   23fec:	e009883a 	mov	r4,fp
   23ff0:	00273d40 	call	273d4 <__lshift>
   23ff4:	1021883a 	mov	r16,r2
   23ff8:	0580050e 	bge	zero,r22,24010 <_dtoa_r+0xb30>
   23ffc:	a80b883a 	mov	r5,r21
   24000:	b00d883a 	mov	r6,r22
   24004:	e009883a 	mov	r4,fp
   24008:	00273d40 	call	273d4 <__lshift>
   2400c:	102b883a 	mov	r21,r2
   24010:	d9c00e17 	ldw	r7,56(sp)
   24014:	3801211e 	bne	r7,zero,2449c <_dtoa_r+0xfbc>
   24018:	d9800617 	ldw	r6,24(sp)
   2401c:	0181380e 	bge	zero,r6,24500 <_dtoa_r+0x1020>
   24020:	d8c00b17 	ldw	r3,44(sp)
   24024:	1800ab1e 	bne	r3,zero,242d4 <_dtoa_r+0xdf4>
   24028:	dc800717 	ldw	r18,28(sp)
   2402c:	dcc00617 	ldw	r19,24(sp)
   24030:	9029883a 	mov	r20,r18
   24034:	00000206 	br	24040 <_dtoa_r+0xb60>
   24038:	0026c680 	call	26c68 <__multadd>
   2403c:	1021883a 	mov	r16,r2
   24040:	a80b883a 	mov	r5,r21
   24044:	8009883a 	mov	r4,r16
   24048:	00232b80 	call	232b8 <quorem>
   2404c:	10800c04 	addi	r2,r2,48
   24050:	90800005 	stb	r2,0(r18)
   24054:	94800044 	addi	r18,r18,1
   24058:	9507c83a 	sub	r3,r18,r20
   2405c:	000f883a 	mov	r7,zero
   24060:	01800284 	movi	r6,10
   24064:	800b883a 	mov	r5,r16
   24068:	e009883a 	mov	r4,fp
   2406c:	1cfff216 	blt	r3,r19,24038 <__alt_data_end+0xfffe4038>
   24070:	1011883a 	mov	r8,r2
   24074:	d8800617 	ldw	r2,24(sp)
   24078:	0082370e 	bge	zero,r2,24958 <_dtoa_r+0x1478>
   2407c:	d9000717 	ldw	r4,28(sp)
   24080:	0025883a 	mov	r18,zero
   24084:	20af883a 	add	r23,r4,r2
   24088:	01800044 	movi	r6,1
   2408c:	800b883a 	mov	r5,r16
   24090:	e009883a 	mov	r4,fp
   24094:	da001715 	stw	r8,92(sp)
   24098:	00273d40 	call	273d4 <__lshift>
   2409c:	a80b883a 	mov	r5,r21
   240a0:	1009883a 	mov	r4,r2
   240a4:	d8800915 	stw	r2,36(sp)
   240a8:	002751c0 	call	2751c <__mcmp>
   240ac:	da001717 	ldw	r8,92(sp)
   240b0:	0081800e 	bge	zero,r2,246b4 <_dtoa_r+0x11d4>
   240b4:	b93fffc3 	ldbu	r4,-1(r23)
   240b8:	b8bfffc4 	addi	r2,r23,-1
   240bc:	1007883a 	mov	r3,r2
   240c0:	01800e44 	movi	r6,57
   240c4:	d9c00717 	ldw	r7,28(sp)
   240c8:	00000506 	br	240e0 <_dtoa_r+0xc00>
   240cc:	18ffffc4 	addi	r3,r3,-1
   240d0:	11c12326 	beq	r2,r7,24560 <_dtoa_r+0x1080>
   240d4:	19000003 	ldbu	r4,0(r3)
   240d8:	102f883a 	mov	r23,r2
   240dc:	10bfffc4 	addi	r2,r2,-1
   240e0:	21403fcc 	andi	r5,r4,255
   240e4:	2940201c 	xori	r5,r5,128
   240e8:	297fe004 	addi	r5,r5,-128
   240ec:	29bff726 	beq	r5,r6,240cc <__alt_data_end+0xfffe40cc>
   240f0:	21000044 	addi	r4,r4,1
   240f4:	11000005 	stb	r4,0(r2)
   240f8:	a80b883a 	mov	r5,r21
   240fc:	e009883a 	mov	r4,fp
   24100:	0026c400 	call	26c40 <_Bfree>
   24104:	883ea026 	beq	r17,zero,23b88 <__alt_data_end+0xfffe3b88>
   24108:	90000426 	beq	r18,zero,2411c <_dtoa_r+0xc3c>
   2410c:	94400326 	beq	r18,r17,2411c <_dtoa_r+0xc3c>
   24110:	900b883a 	mov	r5,r18
   24114:	e009883a 	mov	r4,fp
   24118:	0026c400 	call	26c40 <_Bfree>
   2411c:	880b883a 	mov	r5,r17
   24120:	e009883a 	mov	r4,fp
   24124:	0026c400 	call	26c40 <_Bfree>
   24128:	003e9706 	br	23b88 <__alt_data_end+0xfffe3b88>
   2412c:	01800044 	movi	r6,1
   24130:	d9800e15 	stw	r6,56(sp)
   24134:	003d9606 	br	23790 <__alt_data_end+0xfffe3790>
   24138:	d8800817 	ldw	r2,32(sp)
   2413c:	d8c00517 	ldw	r3,20(sp)
   24140:	d8000d15 	stw	zero,52(sp)
   24144:	10c5c83a 	sub	r2,r2,r3
   24148:	00c9c83a 	sub	r4,zero,r3
   2414c:	d8800815 	stw	r2,32(sp)
   24150:	d9000a15 	stw	r4,40(sp)
   24154:	003d9706 	br	237b4 <__alt_data_end+0xfffe37b4>
   24158:	05adc83a 	sub	r22,zero,r22
   2415c:	dd800815 	stw	r22,32(sp)
   24160:	002d883a 	mov	r22,zero
   24164:	003d8e06 	br	237a0 <__alt_data_end+0xfffe37a0>
   24168:	d9000517 	ldw	r4,20(sp)
   2416c:	002d77c0 	call	2d77c <__floatsidf>
   24170:	100d883a 	mov	r6,r2
   24174:	180f883a 	mov	r7,r3
   24178:	a009883a 	mov	r4,r20
   2417c:	880b883a 	mov	r5,r17
   24180:	002c33c0 	call	2c33c <__eqdf2>
   24184:	103d7126 	beq	r2,zero,2374c <__alt_data_end+0xfffe374c>
   24188:	d9c00517 	ldw	r7,20(sp)
   2418c:	39ffffc4 	addi	r7,r7,-1
   24190:	d9c00515 	stw	r7,20(sp)
   24194:	003d6d06 	br	2374c <__alt_data_end+0xfffe374c>
   24198:	dd400a17 	ldw	r21,40(sp)
   2419c:	dd000817 	ldw	r20,32(sp)
   241a0:	0023883a 	mov	r17,zero
   241a4:	003f4806 	br	23ec8 <__alt_data_end+0xfffe3ec8>
   241a8:	10e3c83a 	sub	r17,r2,r3
   241ac:	9448983a 	sll	r4,r18,r17
   241b0:	003d3206 	br	2367c <__alt_data_end+0xfffe367c>
   241b4:	d8000e15 	stw	zero,56(sp)
   241b8:	003d7506 	br	23790 <__alt_data_end+0xfffe3790>
   241bc:	b005883a 	mov	r2,r22
   241c0:	003f4506 	br	23ed8 <__alt_data_end+0xfffe3ed8>
   241c4:	dc000915 	stw	r16,36(sp)
   241c8:	d9800a17 	ldw	r6,40(sp)
   241cc:	d9400917 	ldw	r5,36(sp)
   241d0:	e009883a 	mov	r4,fp
   241d4:	00272940 	call	27294 <__pow5mult>
   241d8:	1021883a 	mov	r16,r2
   241dc:	003f5a06 	br	23f48 <__alt_data_end+0xfffe3f48>
   241e0:	01c00044 	movi	r7,1
   241e4:	d9c00b15 	stw	r7,44(sp)
   241e8:	d8802217 	ldw	r2,136(sp)
   241ec:	0081280e 	bge	zero,r2,24690 <_dtoa_r+0x11b0>
   241f0:	100d883a 	mov	r6,r2
   241f4:	1021883a 	mov	r16,r2
   241f8:	d8800c15 	stw	r2,48(sp)
   241fc:	d8800615 	stw	r2,24(sp)
   24200:	003d8806 	br	23824 <__alt_data_end+0xfffe3824>
   24204:	d8800617 	ldw	r2,24(sp)
   24208:	00be9b16 	blt	zero,r2,23c78 <__alt_data_end+0xfffe3c78>
   2420c:	10010f1e 	bne	r2,zero,2464c <_dtoa_r+0x116c>
   24210:	880b883a 	mov	r5,r17
   24214:	000d883a 	mov	r6,zero
   24218:	01d00534 	movhi	r7,16404
   2421c:	8009883a 	mov	r4,r16
   24220:	002c5940 	call	2c594 <__muldf3>
   24224:	900d883a 	mov	r6,r18
   24228:	980f883a 	mov	r7,r19
   2422c:	1009883a 	mov	r4,r2
   24230:	180b883a 	mov	r5,r3
   24234:	002c3c40 	call	2c3c4 <__gedf2>
   24238:	002b883a 	mov	r21,zero
   2423c:	0023883a 	mov	r17,zero
   24240:	1000bf16 	blt	r2,zero,24540 <_dtoa_r+0x1060>
   24244:	d9802217 	ldw	r6,136(sp)
   24248:	ddc00717 	ldw	r23,28(sp)
   2424c:	018c303a 	nor	r6,zero,r6
   24250:	d9800515 	stw	r6,20(sp)
   24254:	a80b883a 	mov	r5,r21
   24258:	e009883a 	mov	r4,fp
   2425c:	0026c400 	call	26c40 <_Bfree>
   24260:	883e4926 	beq	r17,zero,23b88 <__alt_data_end+0xfffe3b88>
   24264:	003fad06 	br	2411c <__alt_data_end+0xfffe411c>
   24268:	d9c01117 	ldw	r7,68(sp)
   2426c:	3801bc26 	beq	r7,zero,24960 <_dtoa_r+0x1480>
   24270:	10810cc4 	addi	r2,r2,1075
   24274:	dd400a17 	ldw	r21,40(sp)
   24278:	dd000817 	ldw	r20,32(sp)
   2427c:	003f0a06 	br	23ea8 <__alt_data_end+0xfffe3ea8>
   24280:	00800704 	movi	r2,28
   24284:	d9000817 	ldw	r4,32(sp)
   24288:	a0a9883a 	add	r20,r20,r2
   2428c:	b0ad883a 	add	r22,r22,r2
   24290:	2089883a 	add	r4,r4,r2
   24294:	d9000815 	stw	r4,32(sp)
   24298:	003f5106 	br	23fe0 <__alt_data_end+0xfffe3fe0>
   2429c:	d8c00317 	ldw	r3,12(sp)
   242a0:	b8c1fc0e 	bge	r23,r3,24a94 <_dtoa_r+0x15b4>
   242a4:	0027883a 	mov	r19,zero
   242a8:	b805883a 	mov	r2,r23
   242ac:	003f3e06 	br	23fa8 <__alt_data_end+0xfffe3fa8>
   242b0:	880b883a 	mov	r5,r17
   242b4:	e009883a 	mov	r4,fp
   242b8:	000f883a 	mov	r7,zero
   242bc:	01800284 	movi	r6,10
   242c0:	0026c680 	call	26c68 <__multadd>
   242c4:	d9000c17 	ldw	r4,48(sp)
   242c8:	1023883a 	mov	r17,r2
   242cc:	0102040e 	bge	zero,r4,24ae0 <_dtoa_r+0x1600>
   242d0:	d9000615 	stw	r4,24(sp)
   242d4:	0500050e 	bge	zero,r20,242ec <_dtoa_r+0xe0c>
   242d8:	880b883a 	mov	r5,r17
   242dc:	a00d883a 	mov	r6,r20
   242e0:	e009883a 	mov	r4,fp
   242e4:	00273d40 	call	273d4 <__lshift>
   242e8:	1023883a 	mov	r17,r2
   242ec:	9801241e 	bne	r19,zero,24780 <_dtoa_r+0x12a0>
   242f0:	8829883a 	mov	r20,r17
   242f4:	d9000617 	ldw	r4,24(sp)
   242f8:	dcc00717 	ldw	r19,28(sp)
   242fc:	9480004c 	andi	r18,r18,1
   24300:	20bfffc4 	addi	r2,r4,-1
   24304:	9885883a 	add	r2,r19,r2
   24308:	d8800415 	stw	r2,16(sp)
   2430c:	dc800615 	stw	r18,24(sp)
   24310:	a80b883a 	mov	r5,r21
   24314:	8009883a 	mov	r4,r16
   24318:	00232b80 	call	232b8 <quorem>
   2431c:	880b883a 	mov	r5,r17
   24320:	8009883a 	mov	r4,r16
   24324:	102f883a 	mov	r23,r2
   24328:	002751c0 	call	2751c <__mcmp>
   2432c:	a80b883a 	mov	r5,r21
   24330:	a00d883a 	mov	r6,r20
   24334:	e009883a 	mov	r4,fp
   24338:	102d883a 	mov	r22,r2
   2433c:	002757c0 	call	2757c <__mdiff>
   24340:	1007883a 	mov	r3,r2
   24344:	10800317 	ldw	r2,12(r2)
   24348:	bc800c04 	addi	r18,r23,48
   2434c:	180b883a 	mov	r5,r3
   24350:	10004e1e 	bne	r2,zero,2448c <_dtoa_r+0xfac>
   24354:	8009883a 	mov	r4,r16
   24358:	d8c01615 	stw	r3,88(sp)
   2435c:	002751c0 	call	2751c <__mcmp>
   24360:	d8c01617 	ldw	r3,88(sp)
   24364:	e009883a 	mov	r4,fp
   24368:	d8801615 	stw	r2,88(sp)
   2436c:	180b883a 	mov	r5,r3
   24370:	0026c400 	call	26c40 <_Bfree>
   24374:	d8801617 	ldw	r2,88(sp)
   24378:	1000041e 	bne	r2,zero,2438c <_dtoa_r+0xeac>
   2437c:	d9800317 	ldw	r6,12(sp)
   24380:	3000021e 	bne	r6,zero,2438c <_dtoa_r+0xeac>
   24384:	d8c00617 	ldw	r3,24(sp)
   24388:	18003726 	beq	r3,zero,24468 <_dtoa_r+0xf88>
   2438c:	b0002016 	blt	r22,zero,24410 <_dtoa_r+0xf30>
   24390:	b000041e 	bne	r22,zero,243a4 <_dtoa_r+0xec4>
   24394:	d9000317 	ldw	r4,12(sp)
   24398:	2000021e 	bne	r4,zero,243a4 <_dtoa_r+0xec4>
   2439c:	d8c00617 	ldw	r3,24(sp)
   243a0:	18001b26 	beq	r3,zero,24410 <_dtoa_r+0xf30>
   243a4:	00810716 	blt	zero,r2,247c4 <_dtoa_r+0x12e4>
   243a8:	d8c00417 	ldw	r3,16(sp)
   243ac:	9d800044 	addi	r22,r19,1
   243b0:	9c800005 	stb	r18,0(r19)
   243b4:	b02f883a 	mov	r23,r22
   243b8:	98c10626 	beq	r19,r3,247d4 <_dtoa_r+0x12f4>
   243bc:	800b883a 	mov	r5,r16
   243c0:	000f883a 	mov	r7,zero
   243c4:	01800284 	movi	r6,10
   243c8:	e009883a 	mov	r4,fp
   243cc:	0026c680 	call	26c68 <__multadd>
   243d0:	1021883a 	mov	r16,r2
   243d4:	000f883a 	mov	r7,zero
   243d8:	01800284 	movi	r6,10
   243dc:	880b883a 	mov	r5,r17
   243e0:	e009883a 	mov	r4,fp
   243e4:	8d002526 	beq	r17,r20,2447c <_dtoa_r+0xf9c>
   243e8:	0026c680 	call	26c68 <__multadd>
   243ec:	a00b883a 	mov	r5,r20
   243f0:	000f883a 	mov	r7,zero
   243f4:	01800284 	movi	r6,10
   243f8:	e009883a 	mov	r4,fp
   243fc:	1023883a 	mov	r17,r2
   24400:	0026c680 	call	26c68 <__multadd>
   24404:	1029883a 	mov	r20,r2
   24408:	b027883a 	mov	r19,r22
   2440c:	003fc006 	br	24310 <__alt_data_end+0xfffe4310>
   24410:	9011883a 	mov	r8,r18
   24414:	00800e0e 	bge	zero,r2,24450 <_dtoa_r+0xf70>
   24418:	800b883a 	mov	r5,r16
   2441c:	01800044 	movi	r6,1
   24420:	e009883a 	mov	r4,fp
   24424:	da001715 	stw	r8,92(sp)
   24428:	00273d40 	call	273d4 <__lshift>
   2442c:	a80b883a 	mov	r5,r21
   24430:	1009883a 	mov	r4,r2
   24434:	1021883a 	mov	r16,r2
   24438:	002751c0 	call	2751c <__mcmp>
   2443c:	da001717 	ldw	r8,92(sp)
   24440:	0081960e 	bge	zero,r2,24a9c <_dtoa_r+0x15bc>
   24444:	00800e44 	movi	r2,57
   24448:	40817026 	beq	r8,r2,24a0c <_dtoa_r+0x152c>
   2444c:	ba000c44 	addi	r8,r23,49
   24450:	8825883a 	mov	r18,r17
   24454:	9dc00044 	addi	r23,r19,1
   24458:	9a000005 	stb	r8,0(r19)
   2445c:	a023883a 	mov	r17,r20
   24460:	dc000915 	stw	r16,36(sp)
   24464:	003f2406 	br	240f8 <__alt_data_end+0xfffe40f8>
   24468:	00800e44 	movi	r2,57
   2446c:	9011883a 	mov	r8,r18
   24470:	90816626 	beq	r18,r2,24a0c <_dtoa_r+0x152c>
   24474:	05bff516 	blt	zero,r22,2444c <__alt_data_end+0xfffe444c>
   24478:	003ff506 	br	24450 <__alt_data_end+0xfffe4450>
   2447c:	0026c680 	call	26c68 <__multadd>
   24480:	1023883a 	mov	r17,r2
   24484:	1029883a 	mov	r20,r2
   24488:	003fdf06 	br	24408 <__alt_data_end+0xfffe4408>
   2448c:	e009883a 	mov	r4,fp
   24490:	0026c400 	call	26c40 <_Bfree>
   24494:	00800044 	movi	r2,1
   24498:	003fbc06 	br	2438c <__alt_data_end+0xfffe438c>
   2449c:	a80b883a 	mov	r5,r21
   244a0:	8009883a 	mov	r4,r16
   244a4:	002751c0 	call	2751c <__mcmp>
   244a8:	103edb0e 	bge	r2,zero,24018 <__alt_data_end+0xfffe4018>
   244ac:	800b883a 	mov	r5,r16
   244b0:	000f883a 	mov	r7,zero
   244b4:	01800284 	movi	r6,10
   244b8:	e009883a 	mov	r4,fp
   244bc:	0026c680 	call	26c68 <__multadd>
   244c0:	1021883a 	mov	r16,r2
   244c4:	d8800517 	ldw	r2,20(sp)
   244c8:	d8c00b17 	ldw	r3,44(sp)
   244cc:	10bfffc4 	addi	r2,r2,-1
   244d0:	d8800515 	stw	r2,20(sp)
   244d4:	183f761e 	bne	r3,zero,242b0 <__alt_data_end+0xfffe42b0>
   244d8:	d9000c17 	ldw	r4,48(sp)
   244dc:	0101730e 	bge	zero,r4,24aac <_dtoa_r+0x15cc>
   244e0:	d9000615 	stw	r4,24(sp)
   244e4:	003ed006 	br	24028 <__alt_data_end+0xfffe4028>
   244e8:	00800084 	movi	r2,2
   244ec:	3081861e 	bne	r6,r2,24b08 <_dtoa_r+0x1628>
   244f0:	d8000b15 	stw	zero,44(sp)
   244f4:	003f3c06 	br	241e8 <__alt_data_end+0xfffe41e8>
   244f8:	dc000917 	ldw	r16,36(sp)
   244fc:	003e9206 	br	23f48 <__alt_data_end+0xfffe3f48>
   24500:	d9c00317 	ldw	r7,12(sp)
   24504:	00800084 	movi	r2,2
   24508:	11fec50e 	bge	r2,r7,24020 <__alt_data_end+0xfffe4020>
   2450c:	d9000617 	ldw	r4,24(sp)
   24510:	20013c1e 	bne	r4,zero,24a04 <_dtoa_r+0x1524>
   24514:	a80b883a 	mov	r5,r21
   24518:	000f883a 	mov	r7,zero
   2451c:	01800144 	movi	r6,5
   24520:	e009883a 	mov	r4,fp
   24524:	0026c680 	call	26c68 <__multadd>
   24528:	100b883a 	mov	r5,r2
   2452c:	8009883a 	mov	r4,r16
   24530:	102b883a 	mov	r21,r2
   24534:	002751c0 	call	2751c <__mcmp>
   24538:	dc000915 	stw	r16,36(sp)
   2453c:	00bf410e 	bge	zero,r2,24244 <__alt_data_end+0xfffe4244>
   24540:	d9c00717 	ldw	r7,28(sp)
   24544:	00800c44 	movi	r2,49
   24548:	38800005 	stb	r2,0(r7)
   2454c:	d8800517 	ldw	r2,20(sp)
   24550:	3dc00044 	addi	r23,r7,1
   24554:	10800044 	addi	r2,r2,1
   24558:	d8800515 	stw	r2,20(sp)
   2455c:	003f3d06 	br	24254 <__alt_data_end+0xfffe4254>
   24560:	d9800517 	ldw	r6,20(sp)
   24564:	d9c00717 	ldw	r7,28(sp)
   24568:	00800c44 	movi	r2,49
   2456c:	31800044 	addi	r6,r6,1
   24570:	d9800515 	stw	r6,20(sp)
   24574:	38800005 	stb	r2,0(r7)
   24578:	003edf06 	br	240f8 <__alt_data_end+0xfffe40f8>
   2457c:	d8000b15 	stw	zero,44(sp)
   24580:	003c9f06 	br	23800 <__alt_data_end+0xfffe3800>
   24584:	903e7e1e 	bne	r18,zero,23f80 <__alt_data_end+0xfffe3f80>
   24588:	00800434 	movhi	r2,16
   2458c:	10bfffc4 	addi	r2,r2,-1
   24590:	9884703a 	and	r2,r19,r2
   24594:	1000ea1e 	bne	r2,zero,24940 <_dtoa_r+0x1460>
   24598:	9cdffc2c 	andhi	r19,r19,32752
   2459c:	9800e826 	beq	r19,zero,24940 <_dtoa_r+0x1460>
   245a0:	d9c00817 	ldw	r7,32(sp)
   245a4:	b5800044 	addi	r22,r22,1
   245a8:	04c00044 	movi	r19,1
   245ac:	39c00044 	addi	r7,r7,1
   245b0:	d9c00815 	stw	r7,32(sp)
   245b4:	d8800d17 	ldw	r2,52(sp)
   245b8:	103e721e 	bne	r2,zero,23f84 <__alt_data_end+0xfffe3f84>
   245bc:	00800044 	movi	r2,1
   245c0:	003e7906 	br	23fa8 <__alt_data_end+0xfffe3fa8>
   245c4:	8009883a 	mov	r4,r16
   245c8:	002d77c0 	call	2d77c <__floatsidf>
   245cc:	d9800f17 	ldw	r6,60(sp)
   245d0:	d9c01017 	ldw	r7,64(sp)
   245d4:	1009883a 	mov	r4,r2
   245d8:	180b883a 	mov	r5,r3
   245dc:	002c5940 	call	2c594 <__muldf3>
   245e0:	000d883a 	mov	r6,zero
   245e4:	01d00734 	movhi	r7,16412
   245e8:	1009883a 	mov	r4,r2
   245ec:	180b883a 	mov	r5,r3
   245f0:	002b0c00 	call	2b0c0 <__adddf3>
   245f4:	047f3034 	movhi	r17,64704
   245f8:	1021883a 	mov	r16,r2
   245fc:	1c63883a 	add	r17,r3,r17
   24600:	d9000f17 	ldw	r4,60(sp)
   24604:	d9401017 	ldw	r5,64(sp)
   24608:	000d883a 	mov	r6,zero
   2460c:	01d00534 	movhi	r7,16404
   24610:	002ce000 	call	2ce00 <__subdf3>
   24614:	800d883a 	mov	r6,r16
   24618:	880f883a 	mov	r7,r17
   2461c:	1009883a 	mov	r4,r2
   24620:	180b883a 	mov	r5,r3
   24624:	102b883a 	mov	r21,r2
   24628:	1829883a 	mov	r20,r3
   2462c:	002c3c40 	call	2c3c4 <__gedf2>
   24630:	00806c16 	blt	zero,r2,247e4 <_dtoa_r+0x1304>
   24634:	89e0003c 	xorhi	r7,r17,32768
   24638:	800d883a 	mov	r6,r16
   2463c:	a809883a 	mov	r4,r21
   24640:	a00b883a 	mov	r5,r20
   24644:	002c4a00 	call	2c4a0 <__ledf2>
   24648:	103d7e0e 	bge	r2,zero,23c44 <__alt_data_end+0xfffe3c44>
   2464c:	002b883a 	mov	r21,zero
   24650:	0023883a 	mov	r17,zero
   24654:	003efb06 	br	24244 <__alt_data_end+0xfffe4244>
   24658:	d8800717 	ldw	r2,28(sp)
   2465c:	003bd006 	br	235a0 <__alt_data_end+0xfffe35a0>
   24660:	d9000a17 	ldw	r4,40(sp)
   24664:	d9800d17 	ldw	r6,52(sp)
   24668:	dd400a15 	stw	r21,40(sp)
   2466c:	a905c83a 	sub	r2,r21,r4
   24670:	308d883a 	add	r6,r6,r2
   24674:	d9800d15 	stw	r6,52(sp)
   24678:	002b883a 	mov	r21,zero
   2467c:	003e0606 	br	23e98 <__alt_data_end+0xfffe3e98>
   24680:	9023883a 	mov	r17,r18
   24684:	9829883a 	mov	r20,r19
   24688:	04000084 	movi	r16,2
   2468c:	003c9206 	br	238d8 <__alt_data_end+0xfffe38d8>
   24690:	04000044 	movi	r16,1
   24694:	dc000c15 	stw	r16,48(sp)
   24698:	dc000615 	stw	r16,24(sp)
   2469c:	dc002215 	stw	r16,136(sp)
   246a0:	e0001115 	stw	zero,68(fp)
   246a4:	000b883a 	mov	r5,zero
   246a8:	003c6906 	br	23850 <__alt_data_end+0xfffe3850>
   246ac:	3021883a 	mov	r16,r6
   246b0:	003ffb06 	br	246a0 <__alt_data_end+0xfffe46a0>
   246b4:	1000021e 	bne	r2,zero,246c0 <_dtoa_r+0x11e0>
   246b8:	4200004c 	andi	r8,r8,1
   246bc:	403e7d1e 	bne	r8,zero,240b4 <__alt_data_end+0xfffe40b4>
   246c0:	01000c04 	movi	r4,48
   246c4:	00000106 	br	246cc <_dtoa_r+0x11ec>
   246c8:	102f883a 	mov	r23,r2
   246cc:	b8bfffc4 	addi	r2,r23,-1
   246d0:	10c00007 	ldb	r3,0(r2)
   246d4:	193ffc26 	beq	r3,r4,246c8 <__alt_data_end+0xfffe46c8>
   246d8:	003e8706 	br	240f8 <__alt_data_end+0xfffe40f8>
   246dc:	d8800517 	ldw	r2,20(sp)
   246e0:	00a3c83a 	sub	r17,zero,r2
   246e4:	8800a426 	beq	r17,zero,24978 <_dtoa_r+0x1498>
   246e8:	888003cc 	andi	r2,r17,15
   246ec:	100490fa 	slli	r2,r2,3
   246f0:	00c000f4 	movhi	r3,3
   246f4:	18c2f104 	addi	r3,r3,3012
   246f8:	1885883a 	add	r2,r3,r2
   246fc:	11800017 	ldw	r6,0(r2)
   24700:	11c00117 	ldw	r7,4(r2)
   24704:	9009883a 	mov	r4,r18
   24708:	980b883a 	mov	r5,r19
   2470c:	8823d13a 	srai	r17,r17,4
   24710:	002c5940 	call	2c594 <__muldf3>
   24714:	d8800f15 	stw	r2,60(sp)
   24718:	d8c01015 	stw	r3,64(sp)
   2471c:	8800e826 	beq	r17,zero,24ac0 <_dtoa_r+0x15e0>
   24720:	050000f4 	movhi	r20,3
   24724:	a502e704 	addi	r20,r20,2972
   24728:	04000084 	movi	r16,2
   2472c:	8980004c 	andi	r6,r17,1
   24730:	1009883a 	mov	r4,r2
   24734:	8823d07a 	srai	r17,r17,1
   24738:	180b883a 	mov	r5,r3
   2473c:	30000426 	beq	r6,zero,24750 <_dtoa_r+0x1270>
   24740:	a1800017 	ldw	r6,0(r20)
   24744:	a1c00117 	ldw	r7,4(r20)
   24748:	84000044 	addi	r16,r16,1
   2474c:	002c5940 	call	2c594 <__muldf3>
   24750:	a5000204 	addi	r20,r20,8
   24754:	883ff51e 	bne	r17,zero,2472c <__alt_data_end+0xfffe472c>
   24758:	d8800f15 	stw	r2,60(sp)
   2475c:	d8c01015 	stw	r3,64(sp)
   24760:	003c7606 	br	2393c <__alt_data_end+0xfffe393c>
   24764:	00c00c04 	movi	r3,48
   24768:	10c00005 	stb	r3,0(r2)
   2476c:	d8c00517 	ldw	r3,20(sp)
   24770:	bd3fffc3 	ldbu	r20,-1(r23)
   24774:	18c00044 	addi	r3,r3,1
   24778:	d8c00515 	stw	r3,20(sp)
   2477c:	003db906 	br	23e64 <__alt_data_end+0xfffe3e64>
   24780:	89400117 	ldw	r5,4(r17)
   24784:	e009883a 	mov	r4,fp
   24788:	0026b980 	call	26b98 <_Balloc>
   2478c:	89800417 	ldw	r6,16(r17)
   24790:	89400304 	addi	r5,r17,12
   24794:	11000304 	addi	r4,r2,12
   24798:	31800084 	addi	r6,r6,2
   2479c:	318d883a 	add	r6,r6,r6
   247a0:	318d883a 	add	r6,r6,r6
   247a4:	1027883a 	mov	r19,r2
   247a8:	00267cc0 	call	267cc <memcpy>
   247ac:	01800044 	movi	r6,1
   247b0:	980b883a 	mov	r5,r19
   247b4:	e009883a 	mov	r4,fp
   247b8:	00273d40 	call	273d4 <__lshift>
   247bc:	1029883a 	mov	r20,r2
   247c0:	003ecc06 	br	242f4 <__alt_data_end+0xfffe42f4>
   247c4:	00800e44 	movi	r2,57
   247c8:	90809026 	beq	r18,r2,24a0c <_dtoa_r+0x152c>
   247cc:	92000044 	addi	r8,r18,1
   247d0:	003f1f06 	br	24450 <__alt_data_end+0xfffe4450>
   247d4:	9011883a 	mov	r8,r18
   247d8:	8825883a 	mov	r18,r17
   247dc:	a023883a 	mov	r17,r20
   247e0:	003e2906 	br	24088 <__alt_data_end+0xfffe4088>
   247e4:	002b883a 	mov	r21,zero
   247e8:	0023883a 	mov	r17,zero
   247ec:	003f5406 	br	24540 <__alt_data_end+0xfffe4540>
   247f0:	61bfffc4 	addi	r6,r12,-1
   247f4:	300490fa 	slli	r2,r6,3
   247f8:	00c000f4 	movhi	r3,3
   247fc:	18c2f104 	addi	r3,r3,3012
   24800:	1885883a 	add	r2,r3,r2
   24804:	11000017 	ldw	r4,0(r2)
   24808:	11400117 	ldw	r5,4(r2)
   2480c:	d8800717 	ldw	r2,28(sp)
   24810:	880f883a 	mov	r7,r17
   24814:	d9801215 	stw	r6,72(sp)
   24818:	800d883a 	mov	r6,r16
   2481c:	db001615 	stw	r12,88(sp)
   24820:	15c00044 	addi	r23,r2,1
   24824:	002c5940 	call	2c594 <__muldf3>
   24828:	d9401017 	ldw	r5,64(sp)
   2482c:	d9000f17 	ldw	r4,60(sp)
   24830:	d8c01515 	stw	r3,84(sp)
   24834:	d8801415 	stw	r2,80(sp)
   24838:	002d6fc0 	call	2d6fc <__fixdfsi>
   2483c:	1009883a 	mov	r4,r2
   24840:	1021883a 	mov	r16,r2
   24844:	002d77c0 	call	2d77c <__floatsidf>
   24848:	d9000f17 	ldw	r4,60(sp)
   2484c:	d9401017 	ldw	r5,64(sp)
   24850:	100d883a 	mov	r6,r2
   24854:	180f883a 	mov	r7,r3
   24858:	002ce000 	call	2ce00 <__subdf3>
   2485c:	1829883a 	mov	r20,r3
   24860:	d8c00717 	ldw	r3,28(sp)
   24864:	84000c04 	addi	r16,r16,48
   24868:	1023883a 	mov	r17,r2
   2486c:	1c000005 	stb	r16,0(r3)
   24870:	db001617 	ldw	r12,88(sp)
   24874:	00800044 	movi	r2,1
   24878:	60802226 	beq	r12,r2,24904 <_dtoa_r+0x1424>
   2487c:	d9c00717 	ldw	r7,28(sp)
   24880:	8805883a 	mov	r2,r17
   24884:	b82b883a 	mov	r21,r23
   24888:	3b19883a 	add	r12,r7,r12
   2488c:	6023883a 	mov	r17,r12
   24890:	a007883a 	mov	r3,r20
   24894:	dc800f15 	stw	r18,60(sp)
   24898:	000d883a 	mov	r6,zero
   2489c:	01d00934 	movhi	r7,16420
   248a0:	1009883a 	mov	r4,r2
   248a4:	180b883a 	mov	r5,r3
   248a8:	002c5940 	call	2c594 <__muldf3>
   248ac:	180b883a 	mov	r5,r3
   248b0:	1009883a 	mov	r4,r2
   248b4:	1829883a 	mov	r20,r3
   248b8:	1025883a 	mov	r18,r2
   248bc:	002d6fc0 	call	2d6fc <__fixdfsi>
   248c0:	1009883a 	mov	r4,r2
   248c4:	1021883a 	mov	r16,r2
   248c8:	002d77c0 	call	2d77c <__floatsidf>
   248cc:	100d883a 	mov	r6,r2
   248d0:	180f883a 	mov	r7,r3
   248d4:	9009883a 	mov	r4,r18
   248d8:	a00b883a 	mov	r5,r20
   248dc:	84000c04 	addi	r16,r16,48
   248e0:	002ce000 	call	2ce00 <__subdf3>
   248e4:	ad400044 	addi	r21,r21,1
   248e8:	ac3fffc5 	stb	r16,-1(r21)
   248ec:	ac7fea1e 	bne	r21,r17,24898 <__alt_data_end+0xfffe4898>
   248f0:	1023883a 	mov	r17,r2
   248f4:	d8801217 	ldw	r2,72(sp)
   248f8:	dc800f17 	ldw	r18,60(sp)
   248fc:	1829883a 	mov	r20,r3
   24900:	b8af883a 	add	r23,r23,r2
   24904:	d9001417 	ldw	r4,80(sp)
   24908:	d9401517 	ldw	r5,84(sp)
   2490c:	000d883a 	mov	r6,zero
   24910:	01cff834 	movhi	r7,16352
   24914:	002b0c00 	call	2b0c0 <__adddf3>
   24918:	880d883a 	mov	r6,r17
   2491c:	a00f883a 	mov	r7,r20
   24920:	1009883a 	mov	r4,r2
   24924:	180b883a 	mov	r5,r3
   24928:	002c4a00 	call	2c4a0 <__ledf2>
   2492c:	10003e0e 	bge	r2,zero,24a28 <_dtoa_r+0x1548>
   24930:	d9001317 	ldw	r4,76(sp)
   24934:	bd3fffc3 	ldbu	r20,-1(r23)
   24938:	d9000515 	stw	r4,20(sp)
   2493c:	003d3b06 	br	23e2c <__alt_data_end+0xfffe3e2c>
   24940:	0027883a 	mov	r19,zero
   24944:	003f1b06 	br	245b4 <__alt_data_end+0xfffe45b4>
   24948:	d8800817 	ldw	r2,32(sp)
   2494c:	11e9c83a 	sub	r20,r2,r7
   24950:	0005883a 	mov	r2,zero
   24954:	003d5406 	br	23ea8 <__alt_data_end+0xfffe3ea8>
   24958:	00800044 	movi	r2,1
   2495c:	003dc706 	br	2407c <__alt_data_end+0xfffe407c>
   24960:	d8c00217 	ldw	r3,8(sp)
   24964:	00800d84 	movi	r2,54
   24968:	dd400a17 	ldw	r21,40(sp)
   2496c:	10c5c83a 	sub	r2,r2,r3
   24970:	dd000817 	ldw	r20,32(sp)
   24974:	003d4c06 	br	23ea8 <__alt_data_end+0xfffe3ea8>
   24978:	dc800f15 	stw	r18,60(sp)
   2497c:	dcc01015 	stw	r19,64(sp)
   24980:	04000084 	movi	r16,2
   24984:	003bed06 	br	2393c <__alt_data_end+0xfffe393c>
   24988:	d9000617 	ldw	r4,24(sp)
   2498c:	203f0d26 	beq	r4,zero,245c4 <__alt_data_end+0xfffe45c4>
   24990:	d9800c17 	ldw	r6,48(sp)
   24994:	01bcab0e 	bge	zero,r6,23c44 <__alt_data_end+0xfffe3c44>
   24998:	d9401017 	ldw	r5,64(sp)
   2499c:	d9000f17 	ldw	r4,60(sp)
   249a0:	000d883a 	mov	r6,zero
   249a4:	01d00934 	movhi	r7,16420
   249a8:	002c5940 	call	2c594 <__muldf3>
   249ac:	81000044 	addi	r4,r16,1
   249b0:	d8800f15 	stw	r2,60(sp)
   249b4:	d8c01015 	stw	r3,64(sp)
   249b8:	002d77c0 	call	2d77c <__floatsidf>
   249bc:	d9800f17 	ldw	r6,60(sp)
   249c0:	d9c01017 	ldw	r7,64(sp)
   249c4:	1009883a 	mov	r4,r2
   249c8:	180b883a 	mov	r5,r3
   249cc:	002c5940 	call	2c594 <__muldf3>
   249d0:	01d00734 	movhi	r7,16412
   249d4:	000d883a 	mov	r6,zero
   249d8:	1009883a 	mov	r4,r2
   249dc:	180b883a 	mov	r5,r3
   249e0:	002b0c00 	call	2b0c0 <__adddf3>
   249e4:	d9c00517 	ldw	r7,20(sp)
   249e8:	047f3034 	movhi	r17,64704
   249ec:	1021883a 	mov	r16,r2
   249f0:	39ffffc4 	addi	r7,r7,-1
   249f4:	d9c01315 	stw	r7,76(sp)
   249f8:	1c63883a 	add	r17,r3,r17
   249fc:	db000c17 	ldw	r12,48(sp)
   24a00:	003bea06 	br	239ac <__alt_data_end+0xfffe39ac>
   24a04:	dc000915 	stw	r16,36(sp)
   24a08:	003e0e06 	br	24244 <__alt_data_end+0xfffe4244>
   24a0c:	01000e44 	movi	r4,57
   24a10:	8825883a 	mov	r18,r17
   24a14:	9dc00044 	addi	r23,r19,1
   24a18:	99000005 	stb	r4,0(r19)
   24a1c:	a023883a 	mov	r17,r20
   24a20:	dc000915 	stw	r16,36(sp)
   24a24:	003da406 	br	240b8 <__alt_data_end+0xfffe40b8>
   24a28:	d9801417 	ldw	r6,80(sp)
   24a2c:	d9c01517 	ldw	r7,84(sp)
   24a30:	0009883a 	mov	r4,zero
   24a34:	014ff834 	movhi	r5,16352
   24a38:	002ce000 	call	2ce00 <__subdf3>
   24a3c:	880d883a 	mov	r6,r17
   24a40:	a00f883a 	mov	r7,r20
   24a44:	1009883a 	mov	r4,r2
   24a48:	180b883a 	mov	r5,r3
   24a4c:	002c3c40 	call	2c3c4 <__gedf2>
   24a50:	00bc7c0e 	bge	zero,r2,23c44 <__alt_data_end+0xfffe3c44>
   24a54:	01000c04 	movi	r4,48
   24a58:	00000106 	br	24a60 <_dtoa_r+0x1580>
   24a5c:	102f883a 	mov	r23,r2
   24a60:	b8bfffc4 	addi	r2,r23,-1
   24a64:	10c00007 	ldb	r3,0(r2)
   24a68:	193ffc26 	beq	r3,r4,24a5c <__alt_data_end+0xfffe4a5c>
   24a6c:	d9801317 	ldw	r6,76(sp)
   24a70:	d9800515 	stw	r6,20(sp)
   24a74:	003c4406 	br	23b88 <__alt_data_end+0xfffe3b88>
   24a78:	d9801317 	ldw	r6,76(sp)
   24a7c:	d9800515 	stw	r6,20(sp)
   24a80:	003cea06 	br	23e2c <__alt_data_end+0xfffe3e2c>
   24a84:	dd800f17 	ldw	r22,60(sp)
   24a88:	dcc01017 	ldw	r19,64(sp)
   24a8c:	dc801217 	ldw	r18,72(sp)
   24a90:	003c6c06 	br	23c44 <__alt_data_end+0xfffe3c44>
   24a94:	903e031e 	bne	r18,zero,242a4 <__alt_data_end+0xfffe42a4>
   24a98:	003ebb06 	br	24588 <__alt_data_end+0xfffe4588>
   24a9c:	103e6c1e 	bne	r2,zero,24450 <__alt_data_end+0xfffe4450>
   24aa0:	4080004c 	andi	r2,r8,1
   24aa4:	103e6a26 	beq	r2,zero,24450 <__alt_data_end+0xfffe4450>
   24aa8:	003e6606 	br	24444 <__alt_data_end+0xfffe4444>
   24aac:	d8c00317 	ldw	r3,12(sp)
   24ab0:	00800084 	movi	r2,2
   24ab4:	10c02916 	blt	r2,r3,24b5c <_dtoa_r+0x167c>
   24ab8:	d9000c17 	ldw	r4,48(sp)
   24abc:	003e8806 	br	244e0 <__alt_data_end+0xfffe44e0>
   24ac0:	04000084 	movi	r16,2
   24ac4:	003b9d06 	br	2393c <__alt_data_end+0xfffe393c>
   24ac8:	d9001317 	ldw	r4,76(sp)
   24acc:	d9000515 	stw	r4,20(sp)
   24ad0:	003cd606 	br	23e2c <__alt_data_end+0xfffe3e2c>
   24ad4:	d8801317 	ldw	r2,76(sp)
   24ad8:	d8800515 	stw	r2,20(sp)
   24adc:	003c2a06 	br	23b88 <__alt_data_end+0xfffe3b88>
   24ae0:	d9800317 	ldw	r6,12(sp)
   24ae4:	00800084 	movi	r2,2
   24ae8:	11801516 	blt	r2,r6,24b40 <_dtoa_r+0x1660>
   24aec:	d9c00c17 	ldw	r7,48(sp)
   24af0:	d9c00615 	stw	r7,24(sp)
   24af4:	003df706 	br	242d4 <__alt_data_end+0xfffe42d4>
   24af8:	193d3926 	beq	r3,r4,23fe0 <__alt_data_end+0xfffe3fe0>
   24afc:	00c00f04 	movi	r3,60
   24b00:	1885c83a 	sub	r2,r3,r2
   24b04:	003ddf06 	br	24284 <__alt_data_end+0xfffe4284>
   24b08:	e009883a 	mov	r4,fp
   24b0c:	e0001115 	stw	zero,68(fp)
   24b10:	000b883a 	mov	r5,zero
   24b14:	0026b980 	call	26b98 <_Balloc>
   24b18:	d8800715 	stw	r2,28(sp)
   24b1c:	d8c00717 	ldw	r3,28(sp)
   24b20:	00bfffc4 	movi	r2,-1
   24b24:	01000044 	movi	r4,1
   24b28:	d8800c15 	stw	r2,48(sp)
   24b2c:	e0c01015 	stw	r3,64(fp)
   24b30:	d9000b15 	stw	r4,44(sp)
   24b34:	d8800615 	stw	r2,24(sp)
   24b38:	d8002215 	stw	zero,136(sp)
   24b3c:	003c4106 	br	23c44 <__alt_data_end+0xfffe3c44>
   24b40:	d8c00c17 	ldw	r3,48(sp)
   24b44:	d8c00615 	stw	r3,24(sp)
   24b48:	003e7006 	br	2450c <__alt_data_end+0xfffe450c>
   24b4c:	04400044 	movi	r17,1
   24b50:	003b2006 	br	237d4 <__alt_data_end+0xfffe37d4>
   24b54:	000b883a 	mov	r5,zero
   24b58:	003b3d06 	br	23850 <__alt_data_end+0xfffe3850>
   24b5c:	d8800c17 	ldw	r2,48(sp)
   24b60:	d8800615 	stw	r2,24(sp)
   24b64:	003e6906 	br	2450c <__alt_data_end+0xfffe450c>

00024b68 <__sflush_r>:
   24b68:	2880030b 	ldhu	r2,12(r5)
   24b6c:	defffb04 	addi	sp,sp,-20
   24b70:	dcc00315 	stw	r19,12(sp)
   24b74:	dc400115 	stw	r17,4(sp)
   24b78:	dfc00415 	stw	ra,16(sp)
   24b7c:	dc800215 	stw	r18,8(sp)
   24b80:	dc000015 	stw	r16,0(sp)
   24b84:	10c0020c 	andi	r3,r2,8
   24b88:	2823883a 	mov	r17,r5
   24b8c:	2027883a 	mov	r19,r4
   24b90:	1800311e 	bne	r3,zero,24c58 <__sflush_r+0xf0>
   24b94:	28c00117 	ldw	r3,4(r5)
   24b98:	10820014 	ori	r2,r2,2048
   24b9c:	2880030d 	sth	r2,12(r5)
   24ba0:	00c04b0e 	bge	zero,r3,24cd0 <__sflush_r+0x168>
   24ba4:	8a000a17 	ldw	r8,40(r17)
   24ba8:	40002326 	beq	r8,zero,24c38 <__sflush_r+0xd0>
   24bac:	9c000017 	ldw	r16,0(r19)
   24bb0:	10c4000c 	andi	r3,r2,4096
   24bb4:	98000015 	stw	zero,0(r19)
   24bb8:	18004826 	beq	r3,zero,24cdc <__sflush_r+0x174>
   24bbc:	89801417 	ldw	r6,80(r17)
   24bc0:	10c0010c 	andi	r3,r2,4
   24bc4:	18000626 	beq	r3,zero,24be0 <__sflush_r+0x78>
   24bc8:	88c00117 	ldw	r3,4(r17)
   24bcc:	88800c17 	ldw	r2,48(r17)
   24bd0:	30cdc83a 	sub	r6,r6,r3
   24bd4:	10000226 	beq	r2,zero,24be0 <__sflush_r+0x78>
   24bd8:	88800f17 	ldw	r2,60(r17)
   24bdc:	308dc83a 	sub	r6,r6,r2
   24be0:	89400717 	ldw	r5,28(r17)
   24be4:	000f883a 	mov	r7,zero
   24be8:	9809883a 	mov	r4,r19
   24bec:	403ee83a 	callr	r8
   24bf0:	00ffffc4 	movi	r3,-1
   24bf4:	10c04426 	beq	r2,r3,24d08 <__sflush_r+0x1a0>
   24bf8:	88c0030b 	ldhu	r3,12(r17)
   24bfc:	89000417 	ldw	r4,16(r17)
   24c00:	88000115 	stw	zero,4(r17)
   24c04:	197dffcc 	andi	r5,r3,63487
   24c08:	8940030d 	sth	r5,12(r17)
   24c0c:	89000015 	stw	r4,0(r17)
   24c10:	18c4000c 	andi	r3,r3,4096
   24c14:	18002c1e 	bne	r3,zero,24cc8 <__sflush_r+0x160>
   24c18:	89400c17 	ldw	r5,48(r17)
   24c1c:	9c000015 	stw	r16,0(r19)
   24c20:	28000526 	beq	r5,zero,24c38 <__sflush_r+0xd0>
   24c24:	88801004 	addi	r2,r17,64
   24c28:	28800226 	beq	r5,r2,24c34 <__sflush_r+0xcc>
   24c2c:	9809883a 	mov	r4,r19
   24c30:	00252e40 	call	252e4 <_free_r>
   24c34:	88000c15 	stw	zero,48(r17)
   24c38:	0005883a 	mov	r2,zero
   24c3c:	dfc00417 	ldw	ra,16(sp)
   24c40:	dcc00317 	ldw	r19,12(sp)
   24c44:	dc800217 	ldw	r18,8(sp)
   24c48:	dc400117 	ldw	r17,4(sp)
   24c4c:	dc000017 	ldw	r16,0(sp)
   24c50:	dec00504 	addi	sp,sp,20
   24c54:	f800283a 	ret
   24c58:	2c800417 	ldw	r18,16(r5)
   24c5c:	903ff626 	beq	r18,zero,24c38 <__alt_data_end+0xfffe4c38>
   24c60:	2c000017 	ldw	r16,0(r5)
   24c64:	108000cc 	andi	r2,r2,3
   24c68:	2c800015 	stw	r18,0(r5)
   24c6c:	84a1c83a 	sub	r16,r16,r18
   24c70:	1000131e 	bne	r2,zero,24cc0 <__sflush_r+0x158>
   24c74:	28800517 	ldw	r2,20(r5)
   24c78:	88800215 	stw	r2,8(r17)
   24c7c:	04000316 	blt	zero,r16,24c8c <__sflush_r+0x124>
   24c80:	003fed06 	br	24c38 <__alt_data_end+0xfffe4c38>
   24c84:	90a5883a 	add	r18,r18,r2
   24c88:	043feb0e 	bge	zero,r16,24c38 <__alt_data_end+0xfffe4c38>
   24c8c:	88800917 	ldw	r2,36(r17)
   24c90:	89400717 	ldw	r5,28(r17)
   24c94:	800f883a 	mov	r7,r16
   24c98:	900d883a 	mov	r6,r18
   24c9c:	9809883a 	mov	r4,r19
   24ca0:	103ee83a 	callr	r2
   24ca4:	80a1c83a 	sub	r16,r16,r2
   24ca8:	00bff616 	blt	zero,r2,24c84 <__alt_data_end+0xfffe4c84>
   24cac:	88c0030b 	ldhu	r3,12(r17)
   24cb0:	00bfffc4 	movi	r2,-1
   24cb4:	18c01014 	ori	r3,r3,64
   24cb8:	88c0030d 	sth	r3,12(r17)
   24cbc:	003fdf06 	br	24c3c <__alt_data_end+0xfffe4c3c>
   24cc0:	0005883a 	mov	r2,zero
   24cc4:	003fec06 	br	24c78 <__alt_data_end+0xfffe4c78>
   24cc8:	88801415 	stw	r2,80(r17)
   24ccc:	003fd206 	br	24c18 <__alt_data_end+0xfffe4c18>
   24cd0:	28c00f17 	ldw	r3,60(r5)
   24cd4:	00ffb316 	blt	zero,r3,24ba4 <__alt_data_end+0xfffe4ba4>
   24cd8:	003fd706 	br	24c38 <__alt_data_end+0xfffe4c38>
   24cdc:	89400717 	ldw	r5,28(r17)
   24ce0:	000d883a 	mov	r6,zero
   24ce4:	01c00044 	movi	r7,1
   24ce8:	9809883a 	mov	r4,r19
   24cec:	403ee83a 	callr	r8
   24cf0:	100d883a 	mov	r6,r2
   24cf4:	00bfffc4 	movi	r2,-1
   24cf8:	30801426 	beq	r6,r2,24d4c <__sflush_r+0x1e4>
   24cfc:	8880030b 	ldhu	r2,12(r17)
   24d00:	8a000a17 	ldw	r8,40(r17)
   24d04:	003fae06 	br	24bc0 <__alt_data_end+0xfffe4bc0>
   24d08:	98c00017 	ldw	r3,0(r19)
   24d0c:	183fba26 	beq	r3,zero,24bf8 <__alt_data_end+0xfffe4bf8>
   24d10:	01000744 	movi	r4,29
   24d14:	19000626 	beq	r3,r4,24d30 <__sflush_r+0x1c8>
   24d18:	01000584 	movi	r4,22
   24d1c:	19000426 	beq	r3,r4,24d30 <__sflush_r+0x1c8>
   24d20:	88c0030b 	ldhu	r3,12(r17)
   24d24:	18c01014 	ori	r3,r3,64
   24d28:	88c0030d 	sth	r3,12(r17)
   24d2c:	003fc306 	br	24c3c <__alt_data_end+0xfffe4c3c>
   24d30:	8880030b 	ldhu	r2,12(r17)
   24d34:	88c00417 	ldw	r3,16(r17)
   24d38:	88000115 	stw	zero,4(r17)
   24d3c:	10bdffcc 	andi	r2,r2,63487
   24d40:	8880030d 	sth	r2,12(r17)
   24d44:	88c00015 	stw	r3,0(r17)
   24d48:	003fb306 	br	24c18 <__alt_data_end+0xfffe4c18>
   24d4c:	98800017 	ldw	r2,0(r19)
   24d50:	103fea26 	beq	r2,zero,24cfc <__alt_data_end+0xfffe4cfc>
   24d54:	00c00744 	movi	r3,29
   24d58:	10c00226 	beq	r2,r3,24d64 <__sflush_r+0x1fc>
   24d5c:	00c00584 	movi	r3,22
   24d60:	10c0031e 	bne	r2,r3,24d70 <__sflush_r+0x208>
   24d64:	9c000015 	stw	r16,0(r19)
   24d68:	0005883a 	mov	r2,zero
   24d6c:	003fb306 	br	24c3c <__alt_data_end+0xfffe4c3c>
   24d70:	88c0030b 	ldhu	r3,12(r17)
   24d74:	3005883a 	mov	r2,r6
   24d78:	18c01014 	ori	r3,r3,64
   24d7c:	88c0030d 	sth	r3,12(r17)
   24d80:	003fae06 	br	24c3c <__alt_data_end+0xfffe4c3c>

00024d84 <_fflush_r>:
   24d84:	defffd04 	addi	sp,sp,-12
   24d88:	dc000115 	stw	r16,4(sp)
   24d8c:	dfc00215 	stw	ra,8(sp)
   24d90:	2021883a 	mov	r16,r4
   24d94:	20000226 	beq	r4,zero,24da0 <_fflush_r+0x1c>
   24d98:	20800e17 	ldw	r2,56(r4)
   24d9c:	10000c26 	beq	r2,zero,24dd0 <_fflush_r+0x4c>
   24da0:	2880030f 	ldh	r2,12(r5)
   24da4:	1000051e 	bne	r2,zero,24dbc <_fflush_r+0x38>
   24da8:	0005883a 	mov	r2,zero
   24dac:	dfc00217 	ldw	ra,8(sp)
   24db0:	dc000117 	ldw	r16,4(sp)
   24db4:	dec00304 	addi	sp,sp,12
   24db8:	f800283a 	ret
   24dbc:	8009883a 	mov	r4,r16
   24dc0:	dfc00217 	ldw	ra,8(sp)
   24dc4:	dc000117 	ldw	r16,4(sp)
   24dc8:	dec00304 	addi	sp,sp,12
   24dcc:	0024b681 	jmpi	24b68 <__sflush_r>
   24dd0:	d9400015 	stw	r5,0(sp)
   24dd4:	00251700 	call	25170 <__sinit>
   24dd8:	d9400017 	ldw	r5,0(sp)
   24ddc:	003ff006 	br	24da0 <__alt_data_end+0xfffe4da0>

00024de0 <fflush>:
   24de0:	20000526 	beq	r4,zero,24df8 <fflush+0x18>
   24de4:	008000f4 	movhi	r2,3
   24de8:	108a8a04 	addi	r2,r2,10792
   24dec:	200b883a 	mov	r5,r4
   24df0:	11000017 	ldw	r4,0(r2)
   24df4:	0024d841 	jmpi	24d84 <_fflush_r>
   24df8:	008000f4 	movhi	r2,3
   24dfc:	108a8904 	addi	r2,r2,10788
   24e00:	11000017 	ldw	r4,0(r2)
   24e04:	014000b4 	movhi	r5,2
   24e08:	29536104 	addi	r5,r5,19844
   24e0c:	0025b801 	jmpi	25b80 <_fwalk_reent>

00024e10 <__fp_unlock>:
   24e10:	0005883a 	mov	r2,zero
   24e14:	f800283a 	ret

00024e18 <_cleanup_r>:
   24e18:	014000f4 	movhi	r5,3
   24e1c:	29674704 	addi	r5,r5,-25316
   24e20:	0025b801 	jmpi	25b80 <_fwalk_reent>

00024e24 <__sinit.part.1>:
   24e24:	defff704 	addi	sp,sp,-36
   24e28:	00c000b4 	movhi	r3,2
   24e2c:	dfc00815 	stw	ra,32(sp)
   24e30:	ddc00715 	stw	r23,28(sp)
   24e34:	dd800615 	stw	r22,24(sp)
   24e38:	dd400515 	stw	r21,20(sp)
   24e3c:	dd000415 	stw	r20,16(sp)
   24e40:	dcc00315 	stw	r19,12(sp)
   24e44:	dc800215 	stw	r18,8(sp)
   24e48:	dc400115 	stw	r17,4(sp)
   24e4c:	dc000015 	stw	r16,0(sp)
   24e50:	18d38604 	addi	r3,r3,19992
   24e54:	24000117 	ldw	r16,4(r4)
   24e58:	20c00f15 	stw	r3,60(r4)
   24e5c:	2080bb04 	addi	r2,r4,748
   24e60:	00c000c4 	movi	r3,3
   24e64:	20c0b915 	stw	r3,740(r4)
   24e68:	2080ba15 	stw	r2,744(r4)
   24e6c:	2000b815 	stw	zero,736(r4)
   24e70:	05c00204 	movi	r23,8
   24e74:	00800104 	movi	r2,4
   24e78:	2025883a 	mov	r18,r4
   24e7c:	b80d883a 	mov	r6,r23
   24e80:	81001704 	addi	r4,r16,92
   24e84:	000b883a 	mov	r5,zero
   24e88:	80000015 	stw	zero,0(r16)
   24e8c:	80000115 	stw	zero,4(r16)
   24e90:	80000215 	stw	zero,8(r16)
   24e94:	8080030d 	sth	r2,12(r16)
   24e98:	80001915 	stw	zero,100(r16)
   24e9c:	8000038d 	sth	zero,14(r16)
   24ea0:	80000415 	stw	zero,16(r16)
   24ea4:	80000515 	stw	zero,20(r16)
   24ea8:	80000615 	stw	zero,24(r16)
   24eac:	0026a700 	call	26a70 <memset>
   24eb0:	058000f4 	movhi	r22,3
   24eb4:	94400217 	ldw	r17,8(r18)
   24eb8:	054000f4 	movhi	r21,3
   24ebc:	050000f4 	movhi	r20,3
   24ec0:	04c000f4 	movhi	r19,3
   24ec4:	b5a09f04 	addi	r22,r22,-32132
   24ec8:	ad60b604 	addi	r21,r21,-32040
   24ecc:	a520d504 	addi	r20,r20,-31916
   24ed0:	9ce0ec04 	addi	r19,r19,-31824
   24ed4:	85800815 	stw	r22,32(r16)
   24ed8:	85400915 	stw	r21,36(r16)
   24edc:	85000a15 	stw	r20,40(r16)
   24ee0:	84c00b15 	stw	r19,44(r16)
   24ee4:	84000715 	stw	r16,28(r16)
   24ee8:	00800284 	movi	r2,10
   24eec:	8880030d 	sth	r2,12(r17)
   24ef0:	00800044 	movi	r2,1
   24ef4:	b80d883a 	mov	r6,r23
   24ef8:	89001704 	addi	r4,r17,92
   24efc:	000b883a 	mov	r5,zero
   24f00:	88000015 	stw	zero,0(r17)
   24f04:	88000115 	stw	zero,4(r17)
   24f08:	88000215 	stw	zero,8(r17)
   24f0c:	88001915 	stw	zero,100(r17)
   24f10:	8880038d 	sth	r2,14(r17)
   24f14:	88000415 	stw	zero,16(r17)
   24f18:	88000515 	stw	zero,20(r17)
   24f1c:	88000615 	stw	zero,24(r17)
   24f20:	0026a700 	call	26a70 <memset>
   24f24:	94000317 	ldw	r16,12(r18)
   24f28:	00800484 	movi	r2,18
   24f2c:	8c400715 	stw	r17,28(r17)
   24f30:	8d800815 	stw	r22,32(r17)
   24f34:	8d400915 	stw	r21,36(r17)
   24f38:	8d000a15 	stw	r20,40(r17)
   24f3c:	8cc00b15 	stw	r19,44(r17)
   24f40:	8080030d 	sth	r2,12(r16)
   24f44:	00800084 	movi	r2,2
   24f48:	80000015 	stw	zero,0(r16)
   24f4c:	80000115 	stw	zero,4(r16)
   24f50:	80000215 	stw	zero,8(r16)
   24f54:	80001915 	stw	zero,100(r16)
   24f58:	8080038d 	sth	r2,14(r16)
   24f5c:	80000415 	stw	zero,16(r16)
   24f60:	80000515 	stw	zero,20(r16)
   24f64:	80000615 	stw	zero,24(r16)
   24f68:	b80d883a 	mov	r6,r23
   24f6c:	000b883a 	mov	r5,zero
   24f70:	81001704 	addi	r4,r16,92
   24f74:	0026a700 	call	26a70 <memset>
   24f78:	00800044 	movi	r2,1
   24f7c:	84000715 	stw	r16,28(r16)
   24f80:	85800815 	stw	r22,32(r16)
   24f84:	85400915 	stw	r21,36(r16)
   24f88:	85000a15 	stw	r20,40(r16)
   24f8c:	84c00b15 	stw	r19,44(r16)
   24f90:	90800e15 	stw	r2,56(r18)
   24f94:	dfc00817 	ldw	ra,32(sp)
   24f98:	ddc00717 	ldw	r23,28(sp)
   24f9c:	dd800617 	ldw	r22,24(sp)
   24fa0:	dd400517 	ldw	r21,20(sp)
   24fa4:	dd000417 	ldw	r20,16(sp)
   24fa8:	dcc00317 	ldw	r19,12(sp)
   24fac:	dc800217 	ldw	r18,8(sp)
   24fb0:	dc400117 	ldw	r17,4(sp)
   24fb4:	dc000017 	ldw	r16,0(sp)
   24fb8:	dec00904 	addi	sp,sp,36
   24fbc:	f800283a 	ret

00024fc0 <__fp_lock>:
   24fc0:	0005883a 	mov	r2,zero
   24fc4:	f800283a 	ret

00024fc8 <__sfmoreglue>:
   24fc8:	defffc04 	addi	sp,sp,-16
   24fcc:	dc800215 	stw	r18,8(sp)
   24fd0:	2825883a 	mov	r18,r5
   24fd4:	dc000015 	stw	r16,0(sp)
   24fd8:	01401a04 	movi	r5,104
   24fdc:	2021883a 	mov	r16,r4
   24fe0:	913fffc4 	addi	r4,r18,-1
   24fe4:	dfc00315 	stw	ra,12(sp)
   24fe8:	dc400115 	stw	r17,4(sp)
   24fec:	002b0980 	call	2b098 <__mulsi3>
   24ff0:	8009883a 	mov	r4,r16
   24ff4:	11401d04 	addi	r5,r2,116
   24ff8:	1023883a 	mov	r17,r2
   24ffc:	0025edc0 	call	25edc <_malloc_r>
   25000:	1021883a 	mov	r16,r2
   25004:	10000726 	beq	r2,zero,25024 <__sfmoreglue+0x5c>
   25008:	11000304 	addi	r4,r2,12
   2500c:	10000015 	stw	zero,0(r2)
   25010:	14800115 	stw	r18,4(r2)
   25014:	11000215 	stw	r4,8(r2)
   25018:	89801a04 	addi	r6,r17,104
   2501c:	000b883a 	mov	r5,zero
   25020:	0026a700 	call	26a70 <memset>
   25024:	8005883a 	mov	r2,r16
   25028:	dfc00317 	ldw	ra,12(sp)
   2502c:	dc800217 	ldw	r18,8(sp)
   25030:	dc400117 	ldw	r17,4(sp)
   25034:	dc000017 	ldw	r16,0(sp)
   25038:	dec00404 	addi	sp,sp,16
   2503c:	f800283a 	ret

00025040 <__sfp>:
   25040:	defffb04 	addi	sp,sp,-20
   25044:	dc000015 	stw	r16,0(sp)
   25048:	040000f4 	movhi	r16,3
   2504c:	840a8904 	addi	r16,r16,10788
   25050:	dcc00315 	stw	r19,12(sp)
   25054:	2027883a 	mov	r19,r4
   25058:	81000017 	ldw	r4,0(r16)
   2505c:	dfc00415 	stw	ra,16(sp)
   25060:	dc800215 	stw	r18,8(sp)
   25064:	20800e17 	ldw	r2,56(r4)
   25068:	dc400115 	stw	r17,4(sp)
   2506c:	1000021e 	bne	r2,zero,25078 <__sfp+0x38>
   25070:	0024e240 	call	24e24 <__sinit.part.1>
   25074:	81000017 	ldw	r4,0(r16)
   25078:	2480b804 	addi	r18,r4,736
   2507c:	047fffc4 	movi	r17,-1
   25080:	91000117 	ldw	r4,4(r18)
   25084:	94000217 	ldw	r16,8(r18)
   25088:	213fffc4 	addi	r4,r4,-1
   2508c:	20000a16 	blt	r4,zero,250b8 <__sfp+0x78>
   25090:	8080030f 	ldh	r2,12(r16)
   25094:	10000c26 	beq	r2,zero,250c8 <__sfp+0x88>
   25098:	80c01d04 	addi	r3,r16,116
   2509c:	00000206 	br	250a8 <__sfp+0x68>
   250a0:	18bfe60f 	ldh	r2,-104(r3)
   250a4:	10000826 	beq	r2,zero,250c8 <__sfp+0x88>
   250a8:	213fffc4 	addi	r4,r4,-1
   250ac:	1c3ffd04 	addi	r16,r3,-12
   250b0:	18c01a04 	addi	r3,r3,104
   250b4:	247ffa1e 	bne	r4,r17,250a0 <__alt_data_end+0xfffe50a0>
   250b8:	90800017 	ldw	r2,0(r18)
   250bc:	10001d26 	beq	r2,zero,25134 <__sfp+0xf4>
   250c0:	1025883a 	mov	r18,r2
   250c4:	003fee06 	br	25080 <__alt_data_end+0xfffe5080>
   250c8:	00bfffc4 	movi	r2,-1
   250cc:	8080038d 	sth	r2,14(r16)
   250d0:	00800044 	movi	r2,1
   250d4:	8080030d 	sth	r2,12(r16)
   250d8:	80001915 	stw	zero,100(r16)
   250dc:	80000015 	stw	zero,0(r16)
   250e0:	80000215 	stw	zero,8(r16)
   250e4:	80000115 	stw	zero,4(r16)
   250e8:	80000415 	stw	zero,16(r16)
   250ec:	80000515 	stw	zero,20(r16)
   250f0:	80000615 	stw	zero,24(r16)
   250f4:	01800204 	movi	r6,8
   250f8:	000b883a 	mov	r5,zero
   250fc:	81001704 	addi	r4,r16,92
   25100:	0026a700 	call	26a70 <memset>
   25104:	8005883a 	mov	r2,r16
   25108:	80000c15 	stw	zero,48(r16)
   2510c:	80000d15 	stw	zero,52(r16)
   25110:	80001115 	stw	zero,68(r16)
   25114:	80001215 	stw	zero,72(r16)
   25118:	dfc00417 	ldw	ra,16(sp)
   2511c:	dcc00317 	ldw	r19,12(sp)
   25120:	dc800217 	ldw	r18,8(sp)
   25124:	dc400117 	ldw	r17,4(sp)
   25128:	dc000017 	ldw	r16,0(sp)
   2512c:	dec00504 	addi	sp,sp,20
   25130:	f800283a 	ret
   25134:	01400104 	movi	r5,4
   25138:	9809883a 	mov	r4,r19
   2513c:	0024fc80 	call	24fc8 <__sfmoreglue>
   25140:	90800015 	stw	r2,0(r18)
   25144:	103fde1e 	bne	r2,zero,250c0 <__alt_data_end+0xfffe50c0>
   25148:	00800304 	movi	r2,12
   2514c:	98800015 	stw	r2,0(r19)
   25150:	0005883a 	mov	r2,zero
   25154:	003ff006 	br	25118 <__alt_data_end+0xfffe5118>

00025158 <_cleanup>:
   25158:	008000f4 	movhi	r2,3
   2515c:	108a8904 	addi	r2,r2,10788
   25160:	11000017 	ldw	r4,0(r2)
   25164:	014000f4 	movhi	r5,3
   25168:	29674704 	addi	r5,r5,-25316
   2516c:	0025b801 	jmpi	25b80 <_fwalk_reent>

00025170 <__sinit>:
   25170:	20800e17 	ldw	r2,56(r4)
   25174:	10000126 	beq	r2,zero,2517c <__sinit+0xc>
   25178:	f800283a 	ret
   2517c:	0024e241 	jmpi	24e24 <__sinit.part.1>

00025180 <__sfp_lock_acquire>:
   25180:	f800283a 	ret

00025184 <__sfp_lock_release>:
   25184:	f800283a 	ret

00025188 <__sinit_lock_acquire>:
   25188:	f800283a 	ret

0002518c <__sinit_lock_release>:
   2518c:	f800283a 	ret

00025190 <__fp_lock_all>:
   25190:	008000f4 	movhi	r2,3
   25194:	108a8a04 	addi	r2,r2,10792
   25198:	11000017 	ldw	r4,0(r2)
   2519c:	014000b4 	movhi	r5,2
   251a0:	2953f004 	addi	r5,r5,20416
   251a4:	0025abc1 	jmpi	25abc <_fwalk>

000251a8 <__fp_unlock_all>:
   251a8:	008000f4 	movhi	r2,3
   251ac:	108a8a04 	addi	r2,r2,10792
   251b0:	11000017 	ldw	r4,0(r2)
   251b4:	014000b4 	movhi	r5,2
   251b8:	29538404 	addi	r5,r5,19984
   251bc:	0025abc1 	jmpi	25abc <_fwalk>

000251c0 <_malloc_trim_r>:
   251c0:	defffb04 	addi	sp,sp,-20
   251c4:	dcc00315 	stw	r19,12(sp)
   251c8:	04c000f4 	movhi	r19,3
   251cc:	dc800215 	stw	r18,8(sp)
   251d0:	dc400115 	stw	r17,4(sp)
   251d4:	dc000015 	stw	r16,0(sp)
   251d8:	dfc00415 	stw	ra,16(sp)
   251dc:	2821883a 	mov	r16,r5
   251e0:	9cc4a304 	addi	r19,r19,4748
   251e4:	2025883a 	mov	r18,r4
   251e8:	002e1a00 	call	2e1a0 <__malloc_lock>
   251ec:	98800217 	ldw	r2,8(r19)
   251f0:	14400117 	ldw	r17,4(r2)
   251f4:	00bfff04 	movi	r2,-4
   251f8:	88a2703a 	and	r17,r17,r2
   251fc:	8c21c83a 	sub	r16,r17,r16
   25200:	8403fbc4 	addi	r16,r16,4079
   25204:	8020d33a 	srli	r16,r16,12
   25208:	0083ffc4 	movi	r2,4095
   2520c:	843fffc4 	addi	r16,r16,-1
   25210:	8020933a 	slli	r16,r16,12
   25214:	1400060e 	bge	r2,r16,25230 <_malloc_trim_r+0x70>
   25218:	000b883a 	mov	r5,zero
   2521c:	9009883a 	mov	r4,r18
   25220:	00282280 	call	28228 <_sbrk_r>
   25224:	98c00217 	ldw	r3,8(r19)
   25228:	1c47883a 	add	r3,r3,r17
   2522c:	10c00a26 	beq	r2,r3,25258 <_malloc_trim_r+0x98>
   25230:	9009883a 	mov	r4,r18
   25234:	002e1c40 	call	2e1c4 <__malloc_unlock>
   25238:	0005883a 	mov	r2,zero
   2523c:	dfc00417 	ldw	ra,16(sp)
   25240:	dcc00317 	ldw	r19,12(sp)
   25244:	dc800217 	ldw	r18,8(sp)
   25248:	dc400117 	ldw	r17,4(sp)
   2524c:	dc000017 	ldw	r16,0(sp)
   25250:	dec00504 	addi	sp,sp,20
   25254:	f800283a 	ret
   25258:	040bc83a 	sub	r5,zero,r16
   2525c:	9009883a 	mov	r4,r18
   25260:	00282280 	call	28228 <_sbrk_r>
   25264:	00ffffc4 	movi	r3,-1
   25268:	10c00d26 	beq	r2,r3,252a0 <_malloc_trim_r+0xe0>
   2526c:	00c000f4 	movhi	r3,3
   25270:	18d1c804 	addi	r3,r3,18208
   25274:	18800017 	ldw	r2,0(r3)
   25278:	99000217 	ldw	r4,8(r19)
   2527c:	8c23c83a 	sub	r17,r17,r16
   25280:	8c400054 	ori	r17,r17,1
   25284:	1421c83a 	sub	r16,r2,r16
   25288:	24400115 	stw	r17,4(r4)
   2528c:	9009883a 	mov	r4,r18
   25290:	1c000015 	stw	r16,0(r3)
   25294:	002e1c40 	call	2e1c4 <__malloc_unlock>
   25298:	00800044 	movi	r2,1
   2529c:	003fe706 	br	2523c <__alt_data_end+0xfffe523c>
   252a0:	000b883a 	mov	r5,zero
   252a4:	9009883a 	mov	r4,r18
   252a8:	00282280 	call	28228 <_sbrk_r>
   252ac:	99000217 	ldw	r4,8(r19)
   252b0:	014003c4 	movi	r5,15
   252b4:	1107c83a 	sub	r3,r2,r4
   252b8:	28ffdd0e 	bge	r5,r3,25230 <__alt_data_end+0xfffe5230>
   252bc:	014000f4 	movhi	r5,3
   252c0:	294a8c04 	addi	r5,r5,10800
   252c4:	29400017 	ldw	r5,0(r5)
   252c8:	18c00054 	ori	r3,r3,1
   252cc:	20c00115 	stw	r3,4(r4)
   252d0:	00c000f4 	movhi	r3,3
   252d4:	1145c83a 	sub	r2,r2,r5
   252d8:	18d1c804 	addi	r3,r3,18208
   252dc:	18800015 	stw	r2,0(r3)
   252e0:	003fd306 	br	25230 <__alt_data_end+0xfffe5230>

000252e4 <_free_r>:
   252e4:	28004126 	beq	r5,zero,253ec <_free_r+0x108>
   252e8:	defffd04 	addi	sp,sp,-12
   252ec:	dc400115 	stw	r17,4(sp)
   252f0:	dc000015 	stw	r16,0(sp)
   252f4:	2023883a 	mov	r17,r4
   252f8:	2821883a 	mov	r16,r5
   252fc:	dfc00215 	stw	ra,8(sp)
   25300:	002e1a00 	call	2e1a0 <__malloc_lock>
   25304:	81ffff17 	ldw	r7,-4(r16)
   25308:	00bfff84 	movi	r2,-2
   2530c:	010000f4 	movhi	r4,3
   25310:	81bffe04 	addi	r6,r16,-8
   25314:	3884703a 	and	r2,r7,r2
   25318:	2104a304 	addi	r4,r4,4748
   2531c:	308b883a 	add	r5,r6,r2
   25320:	2a400117 	ldw	r9,4(r5)
   25324:	22000217 	ldw	r8,8(r4)
   25328:	00ffff04 	movi	r3,-4
   2532c:	48c6703a 	and	r3,r9,r3
   25330:	2a005726 	beq	r5,r8,25490 <_free_r+0x1ac>
   25334:	28c00115 	stw	r3,4(r5)
   25338:	39c0004c 	andi	r7,r7,1
   2533c:	3800091e 	bne	r7,zero,25364 <_free_r+0x80>
   25340:	823ffe17 	ldw	r8,-8(r16)
   25344:	22400204 	addi	r9,r4,8
   25348:	320dc83a 	sub	r6,r6,r8
   2534c:	31c00217 	ldw	r7,8(r6)
   25350:	1205883a 	add	r2,r2,r8
   25354:	3a406526 	beq	r7,r9,254ec <_free_r+0x208>
   25358:	32000317 	ldw	r8,12(r6)
   2535c:	3a000315 	stw	r8,12(r7)
   25360:	41c00215 	stw	r7,8(r8)
   25364:	28cf883a 	add	r7,r5,r3
   25368:	39c00117 	ldw	r7,4(r7)
   2536c:	39c0004c 	andi	r7,r7,1
   25370:	38003a26 	beq	r7,zero,2545c <_free_r+0x178>
   25374:	10c00054 	ori	r3,r2,1
   25378:	30c00115 	stw	r3,4(r6)
   2537c:	3087883a 	add	r3,r6,r2
   25380:	18800015 	stw	r2,0(r3)
   25384:	00c07fc4 	movi	r3,511
   25388:	18801936 	bltu	r3,r2,253f0 <_free_r+0x10c>
   2538c:	1004d0fa 	srli	r2,r2,3
   25390:	01c00044 	movi	r7,1
   25394:	21400117 	ldw	r5,4(r4)
   25398:	10c00044 	addi	r3,r2,1
   2539c:	18c7883a 	add	r3,r3,r3
   253a0:	1005d0ba 	srai	r2,r2,2
   253a4:	18c7883a 	add	r3,r3,r3
   253a8:	18c7883a 	add	r3,r3,r3
   253ac:	1907883a 	add	r3,r3,r4
   253b0:	3884983a 	sll	r2,r7,r2
   253b4:	19c00017 	ldw	r7,0(r3)
   253b8:	1a3ffe04 	addi	r8,r3,-8
   253bc:	1144b03a 	or	r2,r2,r5
   253c0:	32000315 	stw	r8,12(r6)
   253c4:	31c00215 	stw	r7,8(r6)
   253c8:	20800115 	stw	r2,4(r4)
   253cc:	19800015 	stw	r6,0(r3)
   253d0:	39800315 	stw	r6,12(r7)
   253d4:	8809883a 	mov	r4,r17
   253d8:	dfc00217 	ldw	ra,8(sp)
   253dc:	dc400117 	ldw	r17,4(sp)
   253e0:	dc000017 	ldw	r16,0(sp)
   253e4:	dec00304 	addi	sp,sp,12
   253e8:	002e1c41 	jmpi	2e1c4 <__malloc_unlock>
   253ec:	f800283a 	ret
   253f0:	100ad27a 	srli	r5,r2,9
   253f4:	00c00104 	movi	r3,4
   253f8:	19404a36 	bltu	r3,r5,25524 <_free_r+0x240>
   253fc:	100ad1ba 	srli	r5,r2,6
   25400:	28c00e44 	addi	r3,r5,57
   25404:	18c7883a 	add	r3,r3,r3
   25408:	29400e04 	addi	r5,r5,56
   2540c:	18c7883a 	add	r3,r3,r3
   25410:	18c7883a 	add	r3,r3,r3
   25414:	1909883a 	add	r4,r3,r4
   25418:	20c00017 	ldw	r3,0(r4)
   2541c:	01c000f4 	movhi	r7,3
   25420:	213ffe04 	addi	r4,r4,-8
   25424:	39c4a304 	addi	r7,r7,4748
   25428:	20c04426 	beq	r4,r3,2553c <_free_r+0x258>
   2542c:	01ffff04 	movi	r7,-4
   25430:	19400117 	ldw	r5,4(r3)
   25434:	29ca703a 	and	r5,r5,r7
   25438:	1140022e 	bgeu	r2,r5,25444 <_free_r+0x160>
   2543c:	18c00217 	ldw	r3,8(r3)
   25440:	20fffb1e 	bne	r4,r3,25430 <__alt_data_end+0xfffe5430>
   25444:	19000317 	ldw	r4,12(r3)
   25448:	31000315 	stw	r4,12(r6)
   2544c:	30c00215 	stw	r3,8(r6)
   25450:	21800215 	stw	r6,8(r4)
   25454:	19800315 	stw	r6,12(r3)
   25458:	003fde06 	br	253d4 <__alt_data_end+0xfffe53d4>
   2545c:	29c00217 	ldw	r7,8(r5)
   25460:	10c5883a 	add	r2,r2,r3
   25464:	00c000f4 	movhi	r3,3
   25468:	18c4a504 	addi	r3,r3,4756
   2546c:	38c03b26 	beq	r7,r3,2555c <_free_r+0x278>
   25470:	2a000317 	ldw	r8,12(r5)
   25474:	11400054 	ori	r5,r2,1
   25478:	3087883a 	add	r3,r6,r2
   2547c:	3a000315 	stw	r8,12(r7)
   25480:	41c00215 	stw	r7,8(r8)
   25484:	31400115 	stw	r5,4(r6)
   25488:	18800015 	stw	r2,0(r3)
   2548c:	003fbd06 	br	25384 <__alt_data_end+0xfffe5384>
   25490:	39c0004c 	andi	r7,r7,1
   25494:	10c5883a 	add	r2,r2,r3
   25498:	3800071e 	bne	r7,zero,254b8 <_free_r+0x1d4>
   2549c:	81fffe17 	ldw	r7,-8(r16)
   254a0:	31cdc83a 	sub	r6,r6,r7
   254a4:	30c00317 	ldw	r3,12(r6)
   254a8:	31400217 	ldw	r5,8(r6)
   254ac:	11c5883a 	add	r2,r2,r7
   254b0:	28c00315 	stw	r3,12(r5)
   254b4:	19400215 	stw	r5,8(r3)
   254b8:	10c00054 	ori	r3,r2,1
   254bc:	30c00115 	stw	r3,4(r6)
   254c0:	00c000f4 	movhi	r3,3
   254c4:	18ca8d04 	addi	r3,r3,10804
   254c8:	18c00017 	ldw	r3,0(r3)
   254cc:	21800215 	stw	r6,8(r4)
   254d0:	10ffc036 	bltu	r2,r3,253d4 <__alt_data_end+0xfffe53d4>
   254d4:	008000f4 	movhi	r2,3
   254d8:	1091bf04 	addi	r2,r2,18172
   254dc:	11400017 	ldw	r5,0(r2)
   254e0:	8809883a 	mov	r4,r17
   254e4:	00251c00 	call	251c0 <_malloc_trim_r>
   254e8:	003fba06 	br	253d4 <__alt_data_end+0xfffe53d4>
   254ec:	28c9883a 	add	r4,r5,r3
   254f0:	21000117 	ldw	r4,4(r4)
   254f4:	2100004c 	andi	r4,r4,1
   254f8:	2000391e 	bne	r4,zero,255e0 <_free_r+0x2fc>
   254fc:	29c00217 	ldw	r7,8(r5)
   25500:	29000317 	ldw	r4,12(r5)
   25504:	1885883a 	add	r2,r3,r2
   25508:	10c00054 	ori	r3,r2,1
   2550c:	39000315 	stw	r4,12(r7)
   25510:	21c00215 	stw	r7,8(r4)
   25514:	30c00115 	stw	r3,4(r6)
   25518:	308d883a 	add	r6,r6,r2
   2551c:	30800015 	stw	r2,0(r6)
   25520:	003fac06 	br	253d4 <__alt_data_end+0xfffe53d4>
   25524:	00c00504 	movi	r3,20
   25528:	19401536 	bltu	r3,r5,25580 <_free_r+0x29c>
   2552c:	28c01704 	addi	r3,r5,92
   25530:	18c7883a 	add	r3,r3,r3
   25534:	294016c4 	addi	r5,r5,91
   25538:	003fb406 	br	2540c <__alt_data_end+0xfffe540c>
   2553c:	280bd0ba 	srai	r5,r5,2
   25540:	00c00044 	movi	r3,1
   25544:	38800117 	ldw	r2,4(r7)
   25548:	194a983a 	sll	r5,r3,r5
   2554c:	2007883a 	mov	r3,r4
   25550:	2884b03a 	or	r2,r5,r2
   25554:	38800115 	stw	r2,4(r7)
   25558:	003fbb06 	br	25448 <__alt_data_end+0xfffe5448>
   2555c:	21800515 	stw	r6,20(r4)
   25560:	21800415 	stw	r6,16(r4)
   25564:	10c00054 	ori	r3,r2,1
   25568:	31c00315 	stw	r7,12(r6)
   2556c:	31c00215 	stw	r7,8(r6)
   25570:	30c00115 	stw	r3,4(r6)
   25574:	308d883a 	add	r6,r6,r2
   25578:	30800015 	stw	r2,0(r6)
   2557c:	003f9506 	br	253d4 <__alt_data_end+0xfffe53d4>
   25580:	00c01504 	movi	r3,84
   25584:	19400536 	bltu	r3,r5,2559c <_free_r+0x2b8>
   25588:	100ad33a 	srli	r5,r2,12
   2558c:	28c01bc4 	addi	r3,r5,111
   25590:	18c7883a 	add	r3,r3,r3
   25594:	29401b84 	addi	r5,r5,110
   25598:	003f9c06 	br	2540c <__alt_data_end+0xfffe540c>
   2559c:	00c05504 	movi	r3,340
   255a0:	19400536 	bltu	r3,r5,255b8 <_free_r+0x2d4>
   255a4:	100ad3fa 	srli	r5,r2,15
   255a8:	28c01e04 	addi	r3,r5,120
   255ac:	18c7883a 	add	r3,r3,r3
   255b0:	29401dc4 	addi	r5,r5,119
   255b4:	003f9506 	br	2540c <__alt_data_end+0xfffe540c>
   255b8:	00c15504 	movi	r3,1364
   255bc:	19400536 	bltu	r3,r5,255d4 <_free_r+0x2f0>
   255c0:	100ad4ba 	srli	r5,r2,18
   255c4:	28c01f44 	addi	r3,r5,125
   255c8:	18c7883a 	add	r3,r3,r3
   255cc:	29401f04 	addi	r5,r5,124
   255d0:	003f8e06 	br	2540c <__alt_data_end+0xfffe540c>
   255d4:	00c03f84 	movi	r3,254
   255d8:	01401f84 	movi	r5,126
   255dc:	003f8b06 	br	2540c <__alt_data_end+0xfffe540c>
   255e0:	10c00054 	ori	r3,r2,1
   255e4:	30c00115 	stw	r3,4(r6)
   255e8:	308d883a 	add	r6,r6,r2
   255ec:	30800015 	stw	r2,0(r6)
   255f0:	003f7806 	br	253d4 <__alt_data_end+0xfffe53d4>

000255f4 <__sfvwrite_r>:
   255f4:	30800217 	ldw	r2,8(r6)
   255f8:	10006726 	beq	r2,zero,25798 <__sfvwrite_r+0x1a4>
   255fc:	28c0030b 	ldhu	r3,12(r5)
   25600:	defff404 	addi	sp,sp,-48
   25604:	dd400715 	stw	r21,28(sp)
   25608:	dd000615 	stw	r20,24(sp)
   2560c:	dc000215 	stw	r16,8(sp)
   25610:	dfc00b15 	stw	ra,44(sp)
   25614:	df000a15 	stw	fp,40(sp)
   25618:	ddc00915 	stw	r23,36(sp)
   2561c:	dd800815 	stw	r22,32(sp)
   25620:	dcc00515 	stw	r19,20(sp)
   25624:	dc800415 	stw	r18,16(sp)
   25628:	dc400315 	stw	r17,12(sp)
   2562c:	1880020c 	andi	r2,r3,8
   25630:	2821883a 	mov	r16,r5
   25634:	202b883a 	mov	r21,r4
   25638:	3029883a 	mov	r20,r6
   2563c:	10002726 	beq	r2,zero,256dc <__sfvwrite_r+0xe8>
   25640:	28800417 	ldw	r2,16(r5)
   25644:	10002526 	beq	r2,zero,256dc <__sfvwrite_r+0xe8>
   25648:	1880008c 	andi	r2,r3,2
   2564c:	a4400017 	ldw	r17,0(r20)
   25650:	10002a26 	beq	r2,zero,256fc <__sfvwrite_r+0x108>
   25654:	05a00034 	movhi	r22,32768
   25658:	0027883a 	mov	r19,zero
   2565c:	0025883a 	mov	r18,zero
   25660:	b5bf0004 	addi	r22,r22,-1024
   25664:	980d883a 	mov	r6,r19
   25668:	a809883a 	mov	r4,r21
   2566c:	90004626 	beq	r18,zero,25788 <__sfvwrite_r+0x194>
   25670:	900f883a 	mov	r7,r18
   25674:	b480022e 	bgeu	r22,r18,25680 <__sfvwrite_r+0x8c>
   25678:	01e00034 	movhi	r7,32768
   2567c:	39ff0004 	addi	r7,r7,-1024
   25680:	80800917 	ldw	r2,36(r16)
   25684:	81400717 	ldw	r5,28(r16)
   25688:	103ee83a 	callr	r2
   2568c:	00805a0e 	bge	zero,r2,257f8 <__sfvwrite_r+0x204>
   25690:	a0c00217 	ldw	r3,8(r20)
   25694:	98a7883a 	add	r19,r19,r2
   25698:	90a5c83a 	sub	r18,r18,r2
   2569c:	1885c83a 	sub	r2,r3,r2
   256a0:	a0800215 	stw	r2,8(r20)
   256a4:	103fef1e 	bne	r2,zero,25664 <__alt_data_end+0xfffe5664>
   256a8:	0005883a 	mov	r2,zero
   256ac:	dfc00b17 	ldw	ra,44(sp)
   256b0:	df000a17 	ldw	fp,40(sp)
   256b4:	ddc00917 	ldw	r23,36(sp)
   256b8:	dd800817 	ldw	r22,32(sp)
   256bc:	dd400717 	ldw	r21,28(sp)
   256c0:	dd000617 	ldw	r20,24(sp)
   256c4:	dcc00517 	ldw	r19,20(sp)
   256c8:	dc800417 	ldw	r18,16(sp)
   256cc:	dc400317 	ldw	r17,12(sp)
   256d0:	dc000217 	ldw	r16,8(sp)
   256d4:	dec00c04 	addi	sp,sp,48
   256d8:	f800283a 	ret
   256dc:	800b883a 	mov	r5,r16
   256e0:	a809883a 	mov	r4,r21
   256e4:	00231640 	call	23164 <__swsetup_r>
   256e8:	1000ee1e 	bne	r2,zero,25aa4 <__sfvwrite_r+0x4b0>
   256ec:	80c0030b 	ldhu	r3,12(r16)
   256f0:	a4400017 	ldw	r17,0(r20)
   256f4:	1880008c 	andi	r2,r3,2
   256f8:	103fd61e 	bne	r2,zero,25654 <__alt_data_end+0xfffe5654>
   256fc:	1880004c 	andi	r2,r3,1
   25700:	1000421e 	bne	r2,zero,2580c <__sfvwrite_r+0x218>
   25704:	0039883a 	mov	fp,zero
   25708:	0025883a 	mov	r18,zero
   2570c:	90001a26 	beq	r18,zero,25778 <__sfvwrite_r+0x184>
   25710:	1880800c 	andi	r2,r3,512
   25714:	84c00217 	ldw	r19,8(r16)
   25718:	10002126 	beq	r2,zero,257a0 <__sfvwrite_r+0x1ac>
   2571c:	982f883a 	mov	r23,r19
   25720:	94c09636 	bltu	r18,r19,2597c <__sfvwrite_r+0x388>
   25724:	1881200c 	andi	r2,r3,1152
   25728:	1000a11e 	bne	r2,zero,259b0 <__sfvwrite_r+0x3bc>
   2572c:	81000017 	ldw	r4,0(r16)
   25730:	b80d883a 	mov	r6,r23
   25734:	e00b883a 	mov	r5,fp
   25738:	00269140 	call	26914 <memmove>
   2573c:	80c00217 	ldw	r3,8(r16)
   25740:	81000017 	ldw	r4,0(r16)
   25744:	9005883a 	mov	r2,r18
   25748:	1ce7c83a 	sub	r19,r3,r19
   2574c:	25cf883a 	add	r7,r4,r23
   25750:	84c00215 	stw	r19,8(r16)
   25754:	81c00015 	stw	r7,0(r16)
   25758:	a0c00217 	ldw	r3,8(r20)
   2575c:	e0b9883a 	add	fp,fp,r2
   25760:	90a5c83a 	sub	r18,r18,r2
   25764:	18a7c83a 	sub	r19,r3,r2
   25768:	a4c00215 	stw	r19,8(r20)
   2576c:	983fce26 	beq	r19,zero,256a8 <__alt_data_end+0xfffe56a8>
   25770:	80c0030b 	ldhu	r3,12(r16)
   25774:	903fe61e 	bne	r18,zero,25710 <__alt_data_end+0xfffe5710>
   25778:	8f000017 	ldw	fp,0(r17)
   2577c:	8c800117 	ldw	r18,4(r17)
   25780:	8c400204 	addi	r17,r17,8
   25784:	003fe106 	br	2570c <__alt_data_end+0xfffe570c>
   25788:	8cc00017 	ldw	r19,0(r17)
   2578c:	8c800117 	ldw	r18,4(r17)
   25790:	8c400204 	addi	r17,r17,8
   25794:	003fb306 	br	25664 <__alt_data_end+0xfffe5664>
   25798:	0005883a 	mov	r2,zero
   2579c:	f800283a 	ret
   257a0:	81000017 	ldw	r4,0(r16)
   257a4:	80800417 	ldw	r2,16(r16)
   257a8:	11005a36 	bltu	r2,r4,25914 <__sfvwrite_r+0x320>
   257ac:	85c00517 	ldw	r23,20(r16)
   257b0:	95c05836 	bltu	r18,r23,25914 <__sfvwrite_r+0x320>
   257b4:	00a00034 	movhi	r2,32768
   257b8:	10bfffc4 	addi	r2,r2,-1
   257bc:	9009883a 	mov	r4,r18
   257c0:	1480012e 	bgeu	r2,r18,257c8 <__sfvwrite_r+0x1d4>
   257c4:	1009883a 	mov	r4,r2
   257c8:	b80b883a 	mov	r5,r23
   257cc:	0020a240 	call	20a24 <__divsi3>
   257d0:	b80b883a 	mov	r5,r23
   257d4:	1009883a 	mov	r4,r2
   257d8:	002b0980 	call	2b098 <__mulsi3>
   257dc:	81400717 	ldw	r5,28(r16)
   257e0:	80c00917 	ldw	r3,36(r16)
   257e4:	100f883a 	mov	r7,r2
   257e8:	e00d883a 	mov	r6,fp
   257ec:	a809883a 	mov	r4,r21
   257f0:	183ee83a 	callr	r3
   257f4:	00bfd816 	blt	zero,r2,25758 <__alt_data_end+0xfffe5758>
   257f8:	8080030b 	ldhu	r2,12(r16)
   257fc:	10801014 	ori	r2,r2,64
   25800:	8080030d 	sth	r2,12(r16)
   25804:	00bfffc4 	movi	r2,-1
   25808:	003fa806 	br	256ac <__alt_data_end+0xfffe56ac>
   2580c:	0027883a 	mov	r19,zero
   25810:	0011883a 	mov	r8,zero
   25814:	0039883a 	mov	fp,zero
   25818:	0025883a 	mov	r18,zero
   2581c:	90001f26 	beq	r18,zero,2589c <__sfvwrite_r+0x2a8>
   25820:	40005a26 	beq	r8,zero,2598c <__sfvwrite_r+0x398>
   25824:	982d883a 	mov	r22,r19
   25828:	94c0012e 	bgeu	r18,r19,25830 <__sfvwrite_r+0x23c>
   2582c:	902d883a 	mov	r22,r18
   25830:	81000017 	ldw	r4,0(r16)
   25834:	80800417 	ldw	r2,16(r16)
   25838:	b02f883a 	mov	r23,r22
   2583c:	81c00517 	ldw	r7,20(r16)
   25840:	1100032e 	bgeu	r2,r4,25850 <__sfvwrite_r+0x25c>
   25844:	80c00217 	ldw	r3,8(r16)
   25848:	38c7883a 	add	r3,r7,r3
   2584c:	1d801816 	blt	r3,r22,258b0 <__sfvwrite_r+0x2bc>
   25850:	b1c03e16 	blt	r22,r7,2594c <__sfvwrite_r+0x358>
   25854:	80800917 	ldw	r2,36(r16)
   25858:	81400717 	ldw	r5,28(r16)
   2585c:	e00d883a 	mov	r6,fp
   25860:	da000115 	stw	r8,4(sp)
   25864:	a809883a 	mov	r4,r21
   25868:	103ee83a 	callr	r2
   2586c:	102f883a 	mov	r23,r2
   25870:	da000117 	ldw	r8,4(sp)
   25874:	00bfe00e 	bge	zero,r2,257f8 <__alt_data_end+0xfffe57f8>
   25878:	9de7c83a 	sub	r19,r19,r23
   2587c:	98001f26 	beq	r19,zero,258fc <__sfvwrite_r+0x308>
   25880:	a0800217 	ldw	r2,8(r20)
   25884:	e5f9883a 	add	fp,fp,r23
   25888:	95e5c83a 	sub	r18,r18,r23
   2588c:	15efc83a 	sub	r23,r2,r23
   25890:	a5c00215 	stw	r23,8(r20)
   25894:	b83f8426 	beq	r23,zero,256a8 <__alt_data_end+0xfffe56a8>
   25898:	903fe11e 	bne	r18,zero,25820 <__alt_data_end+0xfffe5820>
   2589c:	8f000017 	ldw	fp,0(r17)
   258a0:	8c800117 	ldw	r18,4(r17)
   258a4:	0011883a 	mov	r8,zero
   258a8:	8c400204 	addi	r17,r17,8
   258ac:	003fdb06 	br	2581c <__alt_data_end+0xfffe581c>
   258b0:	180d883a 	mov	r6,r3
   258b4:	e00b883a 	mov	r5,fp
   258b8:	da000115 	stw	r8,4(sp)
   258bc:	d8c00015 	stw	r3,0(sp)
   258c0:	00269140 	call	26914 <memmove>
   258c4:	d8c00017 	ldw	r3,0(sp)
   258c8:	80800017 	ldw	r2,0(r16)
   258cc:	800b883a 	mov	r5,r16
   258d0:	a809883a 	mov	r4,r21
   258d4:	10c5883a 	add	r2,r2,r3
   258d8:	80800015 	stw	r2,0(r16)
   258dc:	d8c00015 	stw	r3,0(sp)
   258e0:	0024d840 	call	24d84 <_fflush_r>
   258e4:	d8c00017 	ldw	r3,0(sp)
   258e8:	da000117 	ldw	r8,4(sp)
   258ec:	103fc21e 	bne	r2,zero,257f8 <__alt_data_end+0xfffe57f8>
   258f0:	182f883a 	mov	r23,r3
   258f4:	9de7c83a 	sub	r19,r19,r23
   258f8:	983fe11e 	bne	r19,zero,25880 <__alt_data_end+0xfffe5880>
   258fc:	800b883a 	mov	r5,r16
   25900:	a809883a 	mov	r4,r21
   25904:	0024d840 	call	24d84 <_fflush_r>
   25908:	103fbb1e 	bne	r2,zero,257f8 <__alt_data_end+0xfffe57f8>
   2590c:	0011883a 	mov	r8,zero
   25910:	003fdb06 	br	25880 <__alt_data_end+0xfffe5880>
   25914:	94c0012e 	bgeu	r18,r19,2591c <__sfvwrite_r+0x328>
   25918:	9027883a 	mov	r19,r18
   2591c:	980d883a 	mov	r6,r19
   25920:	e00b883a 	mov	r5,fp
   25924:	00269140 	call	26914 <memmove>
   25928:	80800217 	ldw	r2,8(r16)
   2592c:	80c00017 	ldw	r3,0(r16)
   25930:	14c5c83a 	sub	r2,r2,r19
   25934:	1cc7883a 	add	r3,r3,r19
   25938:	80800215 	stw	r2,8(r16)
   2593c:	80c00015 	stw	r3,0(r16)
   25940:	10004326 	beq	r2,zero,25a50 <__sfvwrite_r+0x45c>
   25944:	9805883a 	mov	r2,r19
   25948:	003f8306 	br	25758 <__alt_data_end+0xfffe5758>
   2594c:	b00d883a 	mov	r6,r22
   25950:	e00b883a 	mov	r5,fp
   25954:	da000115 	stw	r8,4(sp)
   25958:	00269140 	call	26914 <memmove>
   2595c:	80800217 	ldw	r2,8(r16)
   25960:	80c00017 	ldw	r3,0(r16)
   25964:	da000117 	ldw	r8,4(sp)
   25968:	1585c83a 	sub	r2,r2,r22
   2596c:	1dad883a 	add	r22,r3,r22
   25970:	80800215 	stw	r2,8(r16)
   25974:	85800015 	stw	r22,0(r16)
   25978:	003fbf06 	br	25878 <__alt_data_end+0xfffe5878>
   2597c:	81000017 	ldw	r4,0(r16)
   25980:	9027883a 	mov	r19,r18
   25984:	902f883a 	mov	r23,r18
   25988:	003f6906 	br	25730 <__alt_data_end+0xfffe5730>
   2598c:	900d883a 	mov	r6,r18
   25990:	01400284 	movi	r5,10
   25994:	e009883a 	mov	r4,fp
   25998:	00266e80 	call	266e8 <memchr>
   2599c:	10003e26 	beq	r2,zero,25a98 <__sfvwrite_r+0x4a4>
   259a0:	10800044 	addi	r2,r2,1
   259a4:	1727c83a 	sub	r19,r2,fp
   259a8:	02000044 	movi	r8,1
   259ac:	003f9d06 	br	25824 <__alt_data_end+0xfffe5824>
   259b0:	80800517 	ldw	r2,20(r16)
   259b4:	81400417 	ldw	r5,16(r16)
   259b8:	81c00017 	ldw	r7,0(r16)
   259bc:	10a7883a 	add	r19,r2,r2
   259c0:	9885883a 	add	r2,r19,r2
   259c4:	1026d7fa 	srli	r19,r2,31
   259c8:	396dc83a 	sub	r22,r7,r5
   259cc:	b1000044 	addi	r4,r22,1
   259d0:	9885883a 	add	r2,r19,r2
   259d4:	1027d07a 	srai	r19,r2,1
   259d8:	2485883a 	add	r2,r4,r18
   259dc:	980d883a 	mov	r6,r19
   259e0:	9880022e 	bgeu	r19,r2,259ec <__sfvwrite_r+0x3f8>
   259e4:	1027883a 	mov	r19,r2
   259e8:	100d883a 	mov	r6,r2
   259ec:	18c1000c 	andi	r3,r3,1024
   259f0:	18001c26 	beq	r3,zero,25a64 <__sfvwrite_r+0x470>
   259f4:	300b883a 	mov	r5,r6
   259f8:	a809883a 	mov	r4,r21
   259fc:	0025edc0 	call	25edc <_malloc_r>
   25a00:	102f883a 	mov	r23,r2
   25a04:	10002926 	beq	r2,zero,25aac <__sfvwrite_r+0x4b8>
   25a08:	81400417 	ldw	r5,16(r16)
   25a0c:	b00d883a 	mov	r6,r22
   25a10:	1009883a 	mov	r4,r2
   25a14:	00267cc0 	call	267cc <memcpy>
   25a18:	8080030b 	ldhu	r2,12(r16)
   25a1c:	00fedfc4 	movi	r3,-1153
   25a20:	10c4703a 	and	r2,r2,r3
   25a24:	10802014 	ori	r2,r2,128
   25a28:	8080030d 	sth	r2,12(r16)
   25a2c:	bd89883a 	add	r4,r23,r22
   25a30:	9d8fc83a 	sub	r7,r19,r22
   25a34:	85c00415 	stw	r23,16(r16)
   25a38:	84c00515 	stw	r19,20(r16)
   25a3c:	81000015 	stw	r4,0(r16)
   25a40:	9027883a 	mov	r19,r18
   25a44:	81c00215 	stw	r7,8(r16)
   25a48:	902f883a 	mov	r23,r18
   25a4c:	003f3806 	br	25730 <__alt_data_end+0xfffe5730>
   25a50:	800b883a 	mov	r5,r16
   25a54:	a809883a 	mov	r4,r21
   25a58:	0024d840 	call	24d84 <_fflush_r>
   25a5c:	103fb926 	beq	r2,zero,25944 <__alt_data_end+0xfffe5944>
   25a60:	003f6506 	br	257f8 <__alt_data_end+0xfffe57f8>
   25a64:	a809883a 	mov	r4,r21
   25a68:	0027c500 	call	27c50 <_realloc_r>
   25a6c:	102f883a 	mov	r23,r2
   25a70:	103fee1e 	bne	r2,zero,25a2c <__alt_data_end+0xfffe5a2c>
   25a74:	81400417 	ldw	r5,16(r16)
   25a78:	a809883a 	mov	r4,r21
   25a7c:	00252e40 	call	252e4 <_free_r>
   25a80:	8080030b 	ldhu	r2,12(r16)
   25a84:	00ffdfc4 	movi	r3,-129
   25a88:	1884703a 	and	r2,r3,r2
   25a8c:	00c00304 	movi	r3,12
   25a90:	a8c00015 	stw	r3,0(r21)
   25a94:	003f5906 	br	257fc <__alt_data_end+0xfffe57fc>
   25a98:	94c00044 	addi	r19,r18,1
   25a9c:	02000044 	movi	r8,1
   25aa0:	003f6006 	br	25824 <__alt_data_end+0xfffe5824>
   25aa4:	00bfffc4 	movi	r2,-1
   25aa8:	003f0006 	br	256ac <__alt_data_end+0xfffe56ac>
   25aac:	00800304 	movi	r2,12
   25ab0:	a8800015 	stw	r2,0(r21)
   25ab4:	8080030b 	ldhu	r2,12(r16)
   25ab8:	003f5006 	br	257fc <__alt_data_end+0xfffe57fc>

00025abc <_fwalk>:
   25abc:	defff704 	addi	sp,sp,-36
   25ac0:	dd000415 	stw	r20,16(sp)
   25ac4:	dfc00815 	stw	ra,32(sp)
   25ac8:	ddc00715 	stw	r23,28(sp)
   25acc:	dd800615 	stw	r22,24(sp)
   25ad0:	dd400515 	stw	r21,20(sp)
   25ad4:	dcc00315 	stw	r19,12(sp)
   25ad8:	dc800215 	stw	r18,8(sp)
   25adc:	dc400115 	stw	r17,4(sp)
   25ae0:	dc000015 	stw	r16,0(sp)
   25ae4:	2500b804 	addi	r20,r4,736
   25ae8:	a0002326 	beq	r20,zero,25b78 <_fwalk+0xbc>
   25aec:	282b883a 	mov	r21,r5
   25af0:	002f883a 	mov	r23,zero
   25af4:	05800044 	movi	r22,1
   25af8:	04ffffc4 	movi	r19,-1
   25afc:	a4400117 	ldw	r17,4(r20)
   25b00:	a4800217 	ldw	r18,8(r20)
   25b04:	8c7fffc4 	addi	r17,r17,-1
   25b08:	88000d16 	blt	r17,zero,25b40 <_fwalk+0x84>
   25b0c:	94000304 	addi	r16,r18,12
   25b10:	94800384 	addi	r18,r18,14
   25b14:	8080000b 	ldhu	r2,0(r16)
   25b18:	8c7fffc4 	addi	r17,r17,-1
   25b1c:	813ffd04 	addi	r4,r16,-12
   25b20:	b080042e 	bgeu	r22,r2,25b34 <_fwalk+0x78>
   25b24:	9080000f 	ldh	r2,0(r18)
   25b28:	14c00226 	beq	r2,r19,25b34 <_fwalk+0x78>
   25b2c:	a83ee83a 	callr	r21
   25b30:	b8aeb03a 	or	r23,r23,r2
   25b34:	84001a04 	addi	r16,r16,104
   25b38:	94801a04 	addi	r18,r18,104
   25b3c:	8cfff51e 	bne	r17,r19,25b14 <__alt_data_end+0xfffe5b14>
   25b40:	a5000017 	ldw	r20,0(r20)
   25b44:	a03fed1e 	bne	r20,zero,25afc <__alt_data_end+0xfffe5afc>
   25b48:	b805883a 	mov	r2,r23
   25b4c:	dfc00817 	ldw	ra,32(sp)
   25b50:	ddc00717 	ldw	r23,28(sp)
   25b54:	dd800617 	ldw	r22,24(sp)
   25b58:	dd400517 	ldw	r21,20(sp)
   25b5c:	dd000417 	ldw	r20,16(sp)
   25b60:	dcc00317 	ldw	r19,12(sp)
   25b64:	dc800217 	ldw	r18,8(sp)
   25b68:	dc400117 	ldw	r17,4(sp)
   25b6c:	dc000017 	ldw	r16,0(sp)
   25b70:	dec00904 	addi	sp,sp,36
   25b74:	f800283a 	ret
   25b78:	002f883a 	mov	r23,zero
   25b7c:	003ff206 	br	25b48 <__alt_data_end+0xfffe5b48>

00025b80 <_fwalk_reent>:
   25b80:	defff704 	addi	sp,sp,-36
   25b84:	dd000415 	stw	r20,16(sp)
   25b88:	dfc00815 	stw	ra,32(sp)
   25b8c:	ddc00715 	stw	r23,28(sp)
   25b90:	dd800615 	stw	r22,24(sp)
   25b94:	dd400515 	stw	r21,20(sp)
   25b98:	dcc00315 	stw	r19,12(sp)
   25b9c:	dc800215 	stw	r18,8(sp)
   25ba0:	dc400115 	stw	r17,4(sp)
   25ba4:	dc000015 	stw	r16,0(sp)
   25ba8:	2500b804 	addi	r20,r4,736
   25bac:	a0002326 	beq	r20,zero,25c3c <_fwalk_reent+0xbc>
   25bb0:	282b883a 	mov	r21,r5
   25bb4:	2027883a 	mov	r19,r4
   25bb8:	002f883a 	mov	r23,zero
   25bbc:	05800044 	movi	r22,1
   25bc0:	04bfffc4 	movi	r18,-1
   25bc4:	a4400117 	ldw	r17,4(r20)
   25bc8:	a4000217 	ldw	r16,8(r20)
   25bcc:	8c7fffc4 	addi	r17,r17,-1
   25bd0:	88000c16 	blt	r17,zero,25c04 <_fwalk_reent+0x84>
   25bd4:	84000304 	addi	r16,r16,12
   25bd8:	8080000b 	ldhu	r2,0(r16)
   25bdc:	8c7fffc4 	addi	r17,r17,-1
   25be0:	817ffd04 	addi	r5,r16,-12
   25be4:	b080052e 	bgeu	r22,r2,25bfc <_fwalk_reent+0x7c>
   25be8:	8080008f 	ldh	r2,2(r16)
   25bec:	9809883a 	mov	r4,r19
   25bf0:	14800226 	beq	r2,r18,25bfc <_fwalk_reent+0x7c>
   25bf4:	a83ee83a 	callr	r21
   25bf8:	b8aeb03a 	or	r23,r23,r2
   25bfc:	84001a04 	addi	r16,r16,104
   25c00:	8cbff51e 	bne	r17,r18,25bd8 <__alt_data_end+0xfffe5bd8>
   25c04:	a5000017 	ldw	r20,0(r20)
   25c08:	a03fee1e 	bne	r20,zero,25bc4 <__alt_data_end+0xfffe5bc4>
   25c0c:	b805883a 	mov	r2,r23
   25c10:	dfc00817 	ldw	ra,32(sp)
   25c14:	ddc00717 	ldw	r23,28(sp)
   25c18:	dd800617 	ldw	r22,24(sp)
   25c1c:	dd400517 	ldw	r21,20(sp)
   25c20:	dd000417 	ldw	r20,16(sp)
   25c24:	dcc00317 	ldw	r19,12(sp)
   25c28:	dc800217 	ldw	r18,8(sp)
   25c2c:	dc400117 	ldw	r17,4(sp)
   25c30:	dc000017 	ldw	r16,0(sp)
   25c34:	dec00904 	addi	sp,sp,36
   25c38:	f800283a 	ret
   25c3c:	002f883a 	mov	r23,zero
   25c40:	003ff206 	br	25c0c <__alt_data_end+0xfffe5c0c>

00025c44 <_setlocale_r>:
   25c44:	30001b26 	beq	r6,zero,25cb4 <_setlocale_r+0x70>
   25c48:	014000f4 	movhi	r5,3
   25c4c:	defffe04 	addi	sp,sp,-8
   25c50:	2942d704 	addi	r5,r5,2908
   25c54:	3009883a 	mov	r4,r6
   25c58:	dc000015 	stw	r16,0(sp)
   25c5c:	dfc00115 	stw	ra,4(sp)
   25c60:	3021883a 	mov	r16,r6
   25c64:	00283b80 	call	283b8 <strcmp>
   25c68:	1000061e 	bne	r2,zero,25c84 <_setlocale_r+0x40>
   25c6c:	008000f4 	movhi	r2,3
   25c70:	1082d604 	addi	r2,r2,2904
   25c74:	dfc00117 	ldw	ra,4(sp)
   25c78:	dc000017 	ldw	r16,0(sp)
   25c7c:	dec00204 	addi	sp,sp,8
   25c80:	f800283a 	ret
   25c84:	014000f4 	movhi	r5,3
   25c88:	2942d604 	addi	r5,r5,2904
   25c8c:	8009883a 	mov	r4,r16
   25c90:	00283b80 	call	283b8 <strcmp>
   25c94:	103ff526 	beq	r2,zero,25c6c <__alt_data_end+0xfffe5c6c>
   25c98:	014000f4 	movhi	r5,3
   25c9c:	2942c104 	addi	r5,r5,2820
   25ca0:	8009883a 	mov	r4,r16
   25ca4:	00283b80 	call	283b8 <strcmp>
   25ca8:	103ff026 	beq	r2,zero,25c6c <__alt_data_end+0xfffe5c6c>
   25cac:	0005883a 	mov	r2,zero
   25cb0:	003ff006 	br	25c74 <__alt_data_end+0xfffe5c74>
   25cb4:	008000f4 	movhi	r2,3
   25cb8:	1082d604 	addi	r2,r2,2904
   25cbc:	f800283a 	ret

00025cc0 <__locale_charset>:
   25cc0:	008000f4 	movhi	r2,3
   25cc4:	10848d04 	addi	r2,r2,4660
   25cc8:	f800283a 	ret

00025ccc <__locale_mb_cur_max>:
   25ccc:	008000f4 	movhi	r2,3
   25cd0:	108a8b04 	addi	r2,r2,10796
   25cd4:	10800017 	ldw	r2,0(r2)
   25cd8:	f800283a 	ret

00025cdc <__locale_msgcharset>:
   25cdc:	008000f4 	movhi	r2,3
   25ce0:	10848504 	addi	r2,r2,4628
   25ce4:	f800283a 	ret

00025ce8 <__locale_cjk_lang>:
   25ce8:	0005883a 	mov	r2,zero
   25cec:	f800283a 	ret

00025cf0 <_localeconv_r>:
   25cf0:	008000f4 	movhi	r2,3
   25cf4:	10849504 	addi	r2,r2,4692
   25cf8:	f800283a 	ret

00025cfc <setlocale>:
   25cfc:	008000f4 	movhi	r2,3
   25d00:	108a8a04 	addi	r2,r2,10792
   25d04:	280d883a 	mov	r6,r5
   25d08:	200b883a 	mov	r5,r4
   25d0c:	11000017 	ldw	r4,0(r2)
   25d10:	0025c441 	jmpi	25c44 <_setlocale_r>

00025d14 <localeconv>:
   25d14:	008000f4 	movhi	r2,3
   25d18:	10849504 	addi	r2,r2,4692
   25d1c:	f800283a 	ret

00025d20 <__smakebuf_r>:
   25d20:	2880030b 	ldhu	r2,12(r5)
   25d24:	10c0008c 	andi	r3,r2,2
   25d28:	1800411e 	bne	r3,zero,25e30 <__smakebuf_r+0x110>
   25d2c:	deffec04 	addi	sp,sp,-80
   25d30:	dc000f15 	stw	r16,60(sp)
   25d34:	2821883a 	mov	r16,r5
   25d38:	2940038f 	ldh	r5,14(r5)
   25d3c:	dc401015 	stw	r17,64(sp)
   25d40:	dfc01315 	stw	ra,76(sp)
   25d44:	dcc01215 	stw	r19,72(sp)
   25d48:	dc801115 	stw	r18,68(sp)
   25d4c:	2023883a 	mov	r17,r4
   25d50:	28001c16 	blt	r5,zero,25dc4 <__smakebuf_r+0xa4>
   25d54:	d80d883a 	mov	r6,sp
   25d58:	002a0280 	call	2a028 <_fstat_r>
   25d5c:	10001816 	blt	r2,zero,25dc0 <__smakebuf_r+0xa0>
   25d60:	d8800117 	ldw	r2,4(sp)
   25d64:	00e00014 	movui	r3,32768
   25d68:	10bc000c 	andi	r2,r2,61440
   25d6c:	14c80020 	cmpeqi	r19,r2,8192
   25d70:	10c03726 	beq	r2,r3,25e50 <__smakebuf_r+0x130>
   25d74:	80c0030b 	ldhu	r3,12(r16)
   25d78:	18c20014 	ori	r3,r3,2048
   25d7c:	80c0030d 	sth	r3,12(r16)
   25d80:	00c80004 	movi	r3,8192
   25d84:	10c0521e 	bne	r2,r3,25ed0 <__smakebuf_r+0x1b0>
   25d88:	8140038f 	ldh	r5,14(r16)
   25d8c:	8809883a 	mov	r4,r17
   25d90:	002a0840 	call	2a084 <_isatty_r>
   25d94:	10004c26 	beq	r2,zero,25ec8 <__smakebuf_r+0x1a8>
   25d98:	8080030b 	ldhu	r2,12(r16)
   25d9c:	80c010c4 	addi	r3,r16,67
   25da0:	80c00015 	stw	r3,0(r16)
   25da4:	10800054 	ori	r2,r2,1
   25da8:	8080030d 	sth	r2,12(r16)
   25dac:	00800044 	movi	r2,1
   25db0:	80c00415 	stw	r3,16(r16)
   25db4:	80800515 	stw	r2,20(r16)
   25db8:	04810004 	movi	r18,1024
   25dbc:	00000706 	br	25ddc <__smakebuf_r+0xbc>
   25dc0:	8080030b 	ldhu	r2,12(r16)
   25dc4:	10c0200c 	andi	r3,r2,128
   25dc8:	18001f1e 	bne	r3,zero,25e48 <__smakebuf_r+0x128>
   25dcc:	04810004 	movi	r18,1024
   25dd0:	10820014 	ori	r2,r2,2048
   25dd4:	8080030d 	sth	r2,12(r16)
   25dd8:	0027883a 	mov	r19,zero
   25ddc:	900b883a 	mov	r5,r18
   25de0:	8809883a 	mov	r4,r17
   25de4:	0025edc0 	call	25edc <_malloc_r>
   25de8:	10002c26 	beq	r2,zero,25e9c <__smakebuf_r+0x17c>
   25dec:	80c0030b 	ldhu	r3,12(r16)
   25df0:	010000b4 	movhi	r4,2
   25df4:	21138604 	addi	r4,r4,19992
   25df8:	89000f15 	stw	r4,60(r17)
   25dfc:	18c02014 	ori	r3,r3,128
   25e00:	80c0030d 	sth	r3,12(r16)
   25e04:	80800015 	stw	r2,0(r16)
   25e08:	80800415 	stw	r2,16(r16)
   25e0c:	84800515 	stw	r18,20(r16)
   25e10:	98001a1e 	bne	r19,zero,25e7c <__smakebuf_r+0x15c>
   25e14:	dfc01317 	ldw	ra,76(sp)
   25e18:	dcc01217 	ldw	r19,72(sp)
   25e1c:	dc801117 	ldw	r18,68(sp)
   25e20:	dc401017 	ldw	r17,64(sp)
   25e24:	dc000f17 	ldw	r16,60(sp)
   25e28:	dec01404 	addi	sp,sp,80
   25e2c:	f800283a 	ret
   25e30:	288010c4 	addi	r2,r5,67
   25e34:	28800015 	stw	r2,0(r5)
   25e38:	28800415 	stw	r2,16(r5)
   25e3c:	00800044 	movi	r2,1
   25e40:	28800515 	stw	r2,20(r5)
   25e44:	f800283a 	ret
   25e48:	04801004 	movi	r18,64
   25e4c:	003fe006 	br	25dd0 <__alt_data_end+0xfffe5dd0>
   25e50:	81000a17 	ldw	r4,40(r16)
   25e54:	00c000f4 	movhi	r3,3
   25e58:	18e0d504 	addi	r3,r3,-31916
   25e5c:	20ffc51e 	bne	r4,r3,25d74 <__alt_data_end+0xfffe5d74>
   25e60:	8080030b 	ldhu	r2,12(r16)
   25e64:	04810004 	movi	r18,1024
   25e68:	84801315 	stw	r18,76(r16)
   25e6c:	1484b03a 	or	r2,r2,r18
   25e70:	8080030d 	sth	r2,12(r16)
   25e74:	0027883a 	mov	r19,zero
   25e78:	003fd806 	br	25ddc <__alt_data_end+0xfffe5ddc>
   25e7c:	8140038f 	ldh	r5,14(r16)
   25e80:	8809883a 	mov	r4,r17
   25e84:	002a0840 	call	2a084 <_isatty_r>
   25e88:	103fe226 	beq	r2,zero,25e14 <__alt_data_end+0xfffe5e14>
   25e8c:	8080030b 	ldhu	r2,12(r16)
   25e90:	10800054 	ori	r2,r2,1
   25e94:	8080030d 	sth	r2,12(r16)
   25e98:	003fde06 	br	25e14 <__alt_data_end+0xfffe5e14>
   25e9c:	8080030b 	ldhu	r2,12(r16)
   25ea0:	10c0800c 	andi	r3,r2,512
   25ea4:	183fdb1e 	bne	r3,zero,25e14 <__alt_data_end+0xfffe5e14>
   25ea8:	10800094 	ori	r2,r2,2
   25eac:	80c010c4 	addi	r3,r16,67
   25eb0:	8080030d 	sth	r2,12(r16)
   25eb4:	00800044 	movi	r2,1
   25eb8:	80c00015 	stw	r3,0(r16)
   25ebc:	80c00415 	stw	r3,16(r16)
   25ec0:	80800515 	stw	r2,20(r16)
   25ec4:	003fd306 	br	25e14 <__alt_data_end+0xfffe5e14>
   25ec8:	04810004 	movi	r18,1024
   25ecc:	003fc306 	br	25ddc <__alt_data_end+0xfffe5ddc>
   25ed0:	0027883a 	mov	r19,zero
   25ed4:	04810004 	movi	r18,1024
   25ed8:	003fc006 	br	25ddc <__alt_data_end+0xfffe5ddc>

00025edc <_malloc_r>:
   25edc:	defff504 	addi	sp,sp,-44
   25ee0:	dc800315 	stw	r18,12(sp)
   25ee4:	dfc00a15 	stw	ra,40(sp)
   25ee8:	df000915 	stw	fp,36(sp)
   25eec:	ddc00815 	stw	r23,32(sp)
   25ef0:	dd800715 	stw	r22,28(sp)
   25ef4:	dd400615 	stw	r21,24(sp)
   25ef8:	dd000515 	stw	r20,20(sp)
   25efc:	dcc00415 	stw	r19,16(sp)
   25f00:	dc400215 	stw	r17,8(sp)
   25f04:	dc000115 	stw	r16,4(sp)
   25f08:	288002c4 	addi	r2,r5,11
   25f0c:	00c00584 	movi	r3,22
   25f10:	2025883a 	mov	r18,r4
   25f14:	18807f2e 	bgeu	r3,r2,26114 <_malloc_r+0x238>
   25f18:	047ffe04 	movi	r17,-8
   25f1c:	1462703a 	and	r17,r2,r17
   25f20:	8800a316 	blt	r17,zero,261b0 <_malloc_r+0x2d4>
   25f24:	8940a236 	bltu	r17,r5,261b0 <_malloc_r+0x2d4>
   25f28:	002e1a00 	call	2e1a0 <__malloc_lock>
   25f2c:	00807dc4 	movi	r2,503
   25f30:	1441e92e 	bgeu	r2,r17,266d8 <_malloc_r+0x7fc>
   25f34:	8804d27a 	srli	r2,r17,9
   25f38:	1000a126 	beq	r2,zero,261c0 <_malloc_r+0x2e4>
   25f3c:	00c00104 	movi	r3,4
   25f40:	18811e36 	bltu	r3,r2,263bc <_malloc_r+0x4e0>
   25f44:	8804d1ba 	srli	r2,r17,6
   25f48:	12000e44 	addi	r8,r2,57
   25f4c:	11c00e04 	addi	r7,r2,56
   25f50:	4209883a 	add	r4,r8,r8
   25f54:	04c000f4 	movhi	r19,3
   25f58:	2109883a 	add	r4,r4,r4
   25f5c:	9cc4a304 	addi	r19,r19,4748
   25f60:	2109883a 	add	r4,r4,r4
   25f64:	9909883a 	add	r4,r19,r4
   25f68:	24000117 	ldw	r16,4(r4)
   25f6c:	213ffe04 	addi	r4,r4,-8
   25f70:	24009726 	beq	r4,r16,261d0 <_malloc_r+0x2f4>
   25f74:	80800117 	ldw	r2,4(r16)
   25f78:	01bfff04 	movi	r6,-4
   25f7c:	014003c4 	movi	r5,15
   25f80:	1184703a 	and	r2,r2,r6
   25f84:	1447c83a 	sub	r3,r2,r17
   25f88:	28c00716 	blt	r5,r3,25fa8 <_malloc_r+0xcc>
   25f8c:	1800920e 	bge	r3,zero,261d8 <_malloc_r+0x2fc>
   25f90:	84000317 	ldw	r16,12(r16)
   25f94:	24008e26 	beq	r4,r16,261d0 <_malloc_r+0x2f4>
   25f98:	80800117 	ldw	r2,4(r16)
   25f9c:	1184703a 	and	r2,r2,r6
   25fa0:	1447c83a 	sub	r3,r2,r17
   25fa4:	28fff90e 	bge	r5,r3,25f8c <__alt_data_end+0xfffe5f8c>
   25fa8:	3809883a 	mov	r4,r7
   25fac:	018000f4 	movhi	r6,3
   25fb0:	9c000417 	ldw	r16,16(r19)
   25fb4:	3184a304 	addi	r6,r6,4748
   25fb8:	32000204 	addi	r8,r6,8
   25fbc:	82013426 	beq	r16,r8,26490 <_malloc_r+0x5b4>
   25fc0:	80c00117 	ldw	r3,4(r16)
   25fc4:	00bfff04 	movi	r2,-4
   25fc8:	188e703a 	and	r7,r3,r2
   25fcc:	3c45c83a 	sub	r2,r7,r17
   25fd0:	00c003c4 	movi	r3,15
   25fd4:	18811f16 	blt	r3,r2,26454 <_malloc_r+0x578>
   25fd8:	32000515 	stw	r8,20(r6)
   25fdc:	32000415 	stw	r8,16(r6)
   25fe0:	10007f0e 	bge	r2,zero,261e0 <_malloc_r+0x304>
   25fe4:	00807fc4 	movi	r2,511
   25fe8:	11c0fd36 	bltu	r2,r7,263e0 <_malloc_r+0x504>
   25fec:	3806d0fa 	srli	r3,r7,3
   25ff0:	01c00044 	movi	r7,1
   25ff4:	30800117 	ldw	r2,4(r6)
   25ff8:	19400044 	addi	r5,r3,1
   25ffc:	294b883a 	add	r5,r5,r5
   26000:	1807d0ba 	srai	r3,r3,2
   26004:	294b883a 	add	r5,r5,r5
   26008:	294b883a 	add	r5,r5,r5
   2600c:	298b883a 	add	r5,r5,r6
   26010:	38c6983a 	sll	r3,r7,r3
   26014:	29c00017 	ldw	r7,0(r5)
   26018:	2a7ffe04 	addi	r9,r5,-8
   2601c:	1886b03a 	or	r3,r3,r2
   26020:	82400315 	stw	r9,12(r16)
   26024:	81c00215 	stw	r7,8(r16)
   26028:	30c00115 	stw	r3,4(r6)
   2602c:	2c000015 	stw	r16,0(r5)
   26030:	3c000315 	stw	r16,12(r7)
   26034:	2005d0ba 	srai	r2,r4,2
   26038:	01400044 	movi	r5,1
   2603c:	288a983a 	sll	r5,r5,r2
   26040:	19406f36 	bltu	r3,r5,26200 <_malloc_r+0x324>
   26044:	28c4703a 	and	r2,r5,r3
   26048:	10000a1e 	bne	r2,zero,26074 <_malloc_r+0x198>
   2604c:	00bfff04 	movi	r2,-4
   26050:	294b883a 	add	r5,r5,r5
   26054:	2088703a 	and	r4,r4,r2
   26058:	28c4703a 	and	r2,r5,r3
   2605c:	21000104 	addi	r4,r4,4
   26060:	1000041e 	bne	r2,zero,26074 <_malloc_r+0x198>
   26064:	294b883a 	add	r5,r5,r5
   26068:	28c4703a 	and	r2,r5,r3
   2606c:	21000104 	addi	r4,r4,4
   26070:	103ffc26 	beq	r2,zero,26064 <__alt_data_end+0xfffe6064>
   26074:	02bfff04 	movi	r10,-4
   26078:	024003c4 	movi	r9,15
   2607c:	21800044 	addi	r6,r4,1
   26080:	318d883a 	add	r6,r6,r6
   26084:	318d883a 	add	r6,r6,r6
   26088:	318d883a 	add	r6,r6,r6
   2608c:	998d883a 	add	r6,r19,r6
   26090:	333ffe04 	addi	r12,r6,-8
   26094:	2017883a 	mov	r11,r4
   26098:	31800104 	addi	r6,r6,4
   2609c:	34000017 	ldw	r16,0(r6)
   260a0:	31fffd04 	addi	r7,r6,-12
   260a4:	81c0041e 	bne	r16,r7,260b8 <_malloc_r+0x1dc>
   260a8:	0000fb06 	br	26498 <_malloc_r+0x5bc>
   260ac:	1801030e 	bge	r3,zero,264bc <_malloc_r+0x5e0>
   260b0:	84000317 	ldw	r16,12(r16)
   260b4:	81c0f826 	beq	r16,r7,26498 <_malloc_r+0x5bc>
   260b8:	80800117 	ldw	r2,4(r16)
   260bc:	1284703a 	and	r2,r2,r10
   260c0:	1447c83a 	sub	r3,r2,r17
   260c4:	48fff90e 	bge	r9,r3,260ac <__alt_data_end+0xfffe60ac>
   260c8:	80800317 	ldw	r2,12(r16)
   260cc:	81000217 	ldw	r4,8(r16)
   260d0:	89400054 	ori	r5,r17,1
   260d4:	81400115 	stw	r5,4(r16)
   260d8:	20800315 	stw	r2,12(r4)
   260dc:	11000215 	stw	r4,8(r2)
   260e0:	8463883a 	add	r17,r16,r17
   260e4:	9c400515 	stw	r17,20(r19)
   260e8:	9c400415 	stw	r17,16(r19)
   260ec:	18800054 	ori	r2,r3,1
   260f0:	88800115 	stw	r2,4(r17)
   260f4:	8a000315 	stw	r8,12(r17)
   260f8:	8a000215 	stw	r8,8(r17)
   260fc:	88e3883a 	add	r17,r17,r3
   26100:	88c00015 	stw	r3,0(r17)
   26104:	9009883a 	mov	r4,r18
   26108:	002e1c40 	call	2e1c4 <__malloc_unlock>
   2610c:	80800204 	addi	r2,r16,8
   26110:	00001b06 	br	26180 <_malloc_r+0x2a4>
   26114:	04400404 	movi	r17,16
   26118:	89402536 	bltu	r17,r5,261b0 <_malloc_r+0x2d4>
   2611c:	002e1a00 	call	2e1a0 <__malloc_lock>
   26120:	00800184 	movi	r2,6
   26124:	01000084 	movi	r4,2
   26128:	04c000f4 	movhi	r19,3
   2612c:	1085883a 	add	r2,r2,r2
   26130:	9cc4a304 	addi	r19,r19,4748
   26134:	1085883a 	add	r2,r2,r2
   26138:	9885883a 	add	r2,r19,r2
   2613c:	14000117 	ldw	r16,4(r2)
   26140:	10fffe04 	addi	r3,r2,-8
   26144:	80c0d926 	beq	r16,r3,264ac <_malloc_r+0x5d0>
   26148:	80c00117 	ldw	r3,4(r16)
   2614c:	81000317 	ldw	r4,12(r16)
   26150:	00bfff04 	movi	r2,-4
   26154:	1884703a 	and	r2,r3,r2
   26158:	81400217 	ldw	r5,8(r16)
   2615c:	8085883a 	add	r2,r16,r2
   26160:	10c00117 	ldw	r3,4(r2)
   26164:	29000315 	stw	r4,12(r5)
   26168:	21400215 	stw	r5,8(r4)
   2616c:	18c00054 	ori	r3,r3,1
   26170:	10c00115 	stw	r3,4(r2)
   26174:	9009883a 	mov	r4,r18
   26178:	002e1c40 	call	2e1c4 <__malloc_unlock>
   2617c:	80800204 	addi	r2,r16,8
   26180:	dfc00a17 	ldw	ra,40(sp)
   26184:	df000917 	ldw	fp,36(sp)
   26188:	ddc00817 	ldw	r23,32(sp)
   2618c:	dd800717 	ldw	r22,28(sp)
   26190:	dd400617 	ldw	r21,24(sp)
   26194:	dd000517 	ldw	r20,20(sp)
   26198:	dcc00417 	ldw	r19,16(sp)
   2619c:	dc800317 	ldw	r18,12(sp)
   261a0:	dc400217 	ldw	r17,8(sp)
   261a4:	dc000117 	ldw	r16,4(sp)
   261a8:	dec00b04 	addi	sp,sp,44
   261ac:	f800283a 	ret
   261b0:	00800304 	movi	r2,12
   261b4:	90800015 	stw	r2,0(r18)
   261b8:	0005883a 	mov	r2,zero
   261bc:	003ff006 	br	26180 <__alt_data_end+0xfffe6180>
   261c0:	01002004 	movi	r4,128
   261c4:	02001004 	movi	r8,64
   261c8:	01c00fc4 	movi	r7,63
   261cc:	003f6106 	br	25f54 <__alt_data_end+0xfffe5f54>
   261d0:	4009883a 	mov	r4,r8
   261d4:	003f7506 	br	25fac <__alt_data_end+0xfffe5fac>
   261d8:	81000317 	ldw	r4,12(r16)
   261dc:	003fde06 	br	26158 <__alt_data_end+0xfffe6158>
   261e0:	81c5883a 	add	r2,r16,r7
   261e4:	11400117 	ldw	r5,4(r2)
   261e8:	9009883a 	mov	r4,r18
   261ec:	29400054 	ori	r5,r5,1
   261f0:	11400115 	stw	r5,4(r2)
   261f4:	002e1c40 	call	2e1c4 <__malloc_unlock>
   261f8:	80800204 	addi	r2,r16,8
   261fc:	003fe006 	br	26180 <__alt_data_end+0xfffe6180>
   26200:	9c000217 	ldw	r16,8(r19)
   26204:	00bfff04 	movi	r2,-4
   26208:	85800117 	ldw	r22,4(r16)
   2620c:	b0ac703a 	and	r22,r22,r2
   26210:	b4400336 	bltu	r22,r17,26220 <_malloc_r+0x344>
   26214:	b445c83a 	sub	r2,r22,r17
   26218:	00c003c4 	movi	r3,15
   2621c:	18805d16 	blt	r3,r2,26394 <_malloc_r+0x4b8>
   26220:	05c000f4 	movhi	r23,3
   26224:	008000f4 	movhi	r2,3
   26228:	1091bf04 	addi	r2,r2,18172
   2622c:	bdca8c04 	addi	r23,r23,10800
   26230:	15400017 	ldw	r21,0(r2)
   26234:	b8c00017 	ldw	r3,0(r23)
   26238:	00bfffc4 	movi	r2,-1
   2623c:	858d883a 	add	r6,r16,r22
   26240:	8d6b883a 	add	r21,r17,r21
   26244:	1880ea26 	beq	r3,r2,265f0 <_malloc_r+0x714>
   26248:	ad4403c4 	addi	r21,r21,4111
   2624c:	00bc0004 	movi	r2,-4096
   26250:	a8aa703a 	and	r21,r21,r2
   26254:	a80b883a 	mov	r5,r21
   26258:	9009883a 	mov	r4,r18
   2625c:	d9800015 	stw	r6,0(sp)
   26260:	00282280 	call	28228 <_sbrk_r>
   26264:	1029883a 	mov	r20,r2
   26268:	00bfffc4 	movi	r2,-1
   2626c:	d9800017 	ldw	r6,0(sp)
   26270:	a080e826 	beq	r20,r2,26614 <_malloc_r+0x738>
   26274:	a180a636 	bltu	r20,r6,26510 <_malloc_r+0x634>
   26278:	070000f4 	movhi	fp,3
   2627c:	e711c804 	addi	fp,fp,18208
   26280:	e0800017 	ldw	r2,0(fp)
   26284:	a887883a 	add	r3,r21,r2
   26288:	e0c00015 	stw	r3,0(fp)
   2628c:	3500e626 	beq	r6,r20,26628 <_malloc_r+0x74c>
   26290:	b9000017 	ldw	r4,0(r23)
   26294:	00bfffc4 	movi	r2,-1
   26298:	2080ee26 	beq	r4,r2,26654 <_malloc_r+0x778>
   2629c:	a185c83a 	sub	r2,r20,r6
   262a0:	10c5883a 	add	r2,r2,r3
   262a4:	e0800015 	stw	r2,0(fp)
   262a8:	a0c001cc 	andi	r3,r20,7
   262ac:	1800bc26 	beq	r3,zero,265a0 <_malloc_r+0x6c4>
   262b0:	a0e9c83a 	sub	r20,r20,r3
   262b4:	00840204 	movi	r2,4104
   262b8:	a5000204 	addi	r20,r20,8
   262bc:	10c7c83a 	sub	r3,r2,r3
   262c0:	a545883a 	add	r2,r20,r21
   262c4:	1083ffcc 	andi	r2,r2,4095
   262c8:	18abc83a 	sub	r21,r3,r2
   262cc:	a80b883a 	mov	r5,r21
   262d0:	9009883a 	mov	r4,r18
   262d4:	00282280 	call	28228 <_sbrk_r>
   262d8:	00ffffc4 	movi	r3,-1
   262dc:	10c0e126 	beq	r2,r3,26664 <_malloc_r+0x788>
   262e0:	1505c83a 	sub	r2,r2,r20
   262e4:	1545883a 	add	r2,r2,r21
   262e8:	10800054 	ori	r2,r2,1
   262ec:	e0c00017 	ldw	r3,0(fp)
   262f0:	9d000215 	stw	r20,8(r19)
   262f4:	a0800115 	stw	r2,4(r20)
   262f8:	a8c7883a 	add	r3,r21,r3
   262fc:	e0c00015 	stw	r3,0(fp)
   26300:	84c00e26 	beq	r16,r19,2633c <_malloc_r+0x460>
   26304:	018003c4 	movi	r6,15
   26308:	3580a72e 	bgeu	r6,r22,265a8 <_malloc_r+0x6cc>
   2630c:	81400117 	ldw	r5,4(r16)
   26310:	013ffe04 	movi	r4,-8
   26314:	b0bffd04 	addi	r2,r22,-12
   26318:	1104703a 	and	r2,r2,r4
   2631c:	2900004c 	andi	r4,r5,1
   26320:	2088b03a 	or	r4,r4,r2
   26324:	81000115 	stw	r4,4(r16)
   26328:	01400144 	movi	r5,5
   2632c:	8089883a 	add	r4,r16,r2
   26330:	21400115 	stw	r5,4(r4)
   26334:	21400215 	stw	r5,8(r4)
   26338:	3080cd36 	bltu	r6,r2,26670 <_malloc_r+0x794>
   2633c:	008000f4 	movhi	r2,3
   26340:	1091be04 	addi	r2,r2,18168
   26344:	11000017 	ldw	r4,0(r2)
   26348:	20c0012e 	bgeu	r4,r3,26350 <_malloc_r+0x474>
   2634c:	10c00015 	stw	r3,0(r2)
   26350:	008000f4 	movhi	r2,3
   26354:	1091bd04 	addi	r2,r2,18164
   26358:	11000017 	ldw	r4,0(r2)
   2635c:	9c000217 	ldw	r16,8(r19)
   26360:	20c0012e 	bgeu	r4,r3,26368 <_malloc_r+0x48c>
   26364:	10c00015 	stw	r3,0(r2)
   26368:	80c00117 	ldw	r3,4(r16)
   2636c:	00bfff04 	movi	r2,-4
   26370:	1886703a 	and	r3,r3,r2
   26374:	1c45c83a 	sub	r2,r3,r17
   26378:	1c400236 	bltu	r3,r17,26384 <_malloc_r+0x4a8>
   2637c:	00c003c4 	movi	r3,15
   26380:	18800416 	blt	r3,r2,26394 <_malloc_r+0x4b8>
   26384:	9009883a 	mov	r4,r18
   26388:	002e1c40 	call	2e1c4 <__malloc_unlock>
   2638c:	0005883a 	mov	r2,zero
   26390:	003f7b06 	br	26180 <__alt_data_end+0xfffe6180>
   26394:	88c00054 	ori	r3,r17,1
   26398:	80c00115 	stw	r3,4(r16)
   2639c:	8463883a 	add	r17,r16,r17
   263a0:	10800054 	ori	r2,r2,1
   263a4:	9c400215 	stw	r17,8(r19)
   263a8:	88800115 	stw	r2,4(r17)
   263ac:	9009883a 	mov	r4,r18
   263b0:	002e1c40 	call	2e1c4 <__malloc_unlock>
   263b4:	80800204 	addi	r2,r16,8
   263b8:	003f7106 	br	26180 <__alt_data_end+0xfffe6180>
   263bc:	00c00504 	movi	r3,20
   263c0:	18804a2e 	bgeu	r3,r2,264ec <_malloc_r+0x610>
   263c4:	00c01504 	movi	r3,84
   263c8:	18806e36 	bltu	r3,r2,26584 <_malloc_r+0x6a8>
   263cc:	8804d33a 	srli	r2,r17,12
   263d0:	12001bc4 	addi	r8,r2,111
   263d4:	11c01b84 	addi	r7,r2,110
   263d8:	4209883a 	add	r4,r8,r8
   263dc:	003edd06 	br	25f54 <__alt_data_end+0xfffe5f54>
   263e0:	3804d27a 	srli	r2,r7,9
   263e4:	00c00104 	movi	r3,4
   263e8:	1880442e 	bgeu	r3,r2,264fc <_malloc_r+0x620>
   263ec:	00c00504 	movi	r3,20
   263f0:	18808136 	bltu	r3,r2,265f8 <_malloc_r+0x71c>
   263f4:	11401704 	addi	r5,r2,92
   263f8:	10c016c4 	addi	r3,r2,91
   263fc:	294b883a 	add	r5,r5,r5
   26400:	294b883a 	add	r5,r5,r5
   26404:	294b883a 	add	r5,r5,r5
   26408:	994b883a 	add	r5,r19,r5
   2640c:	28800017 	ldw	r2,0(r5)
   26410:	018000f4 	movhi	r6,3
   26414:	297ffe04 	addi	r5,r5,-8
   26418:	3184a304 	addi	r6,r6,4748
   2641c:	28806526 	beq	r5,r2,265b4 <_malloc_r+0x6d8>
   26420:	01bfff04 	movi	r6,-4
   26424:	10c00117 	ldw	r3,4(r2)
   26428:	1986703a 	and	r3,r3,r6
   2642c:	38c0022e 	bgeu	r7,r3,26438 <_malloc_r+0x55c>
   26430:	10800217 	ldw	r2,8(r2)
   26434:	28bffb1e 	bne	r5,r2,26424 <__alt_data_end+0xfffe6424>
   26438:	11400317 	ldw	r5,12(r2)
   2643c:	98c00117 	ldw	r3,4(r19)
   26440:	81400315 	stw	r5,12(r16)
   26444:	80800215 	stw	r2,8(r16)
   26448:	2c000215 	stw	r16,8(r5)
   2644c:	14000315 	stw	r16,12(r2)
   26450:	003ef806 	br	26034 <__alt_data_end+0xfffe6034>
   26454:	88c00054 	ori	r3,r17,1
   26458:	80c00115 	stw	r3,4(r16)
   2645c:	8463883a 	add	r17,r16,r17
   26460:	34400515 	stw	r17,20(r6)
   26464:	34400415 	stw	r17,16(r6)
   26468:	10c00054 	ori	r3,r2,1
   2646c:	8a000315 	stw	r8,12(r17)
   26470:	8a000215 	stw	r8,8(r17)
   26474:	88c00115 	stw	r3,4(r17)
   26478:	88a3883a 	add	r17,r17,r2
   2647c:	88800015 	stw	r2,0(r17)
   26480:	9009883a 	mov	r4,r18
   26484:	002e1c40 	call	2e1c4 <__malloc_unlock>
   26488:	80800204 	addi	r2,r16,8
   2648c:	003f3c06 	br	26180 <__alt_data_end+0xfffe6180>
   26490:	30c00117 	ldw	r3,4(r6)
   26494:	003ee706 	br	26034 <__alt_data_end+0xfffe6034>
   26498:	5ac00044 	addi	r11,r11,1
   2649c:	588000cc 	andi	r2,r11,3
   264a0:	31800204 	addi	r6,r6,8
   264a4:	103efd1e 	bne	r2,zero,2609c <__alt_data_end+0xfffe609c>
   264a8:	00002406 	br	2653c <_malloc_r+0x660>
   264ac:	14000317 	ldw	r16,12(r2)
   264b0:	143f251e 	bne	r2,r16,26148 <__alt_data_end+0xfffe6148>
   264b4:	21000084 	addi	r4,r4,2
   264b8:	003ebc06 	br	25fac <__alt_data_end+0xfffe5fac>
   264bc:	8085883a 	add	r2,r16,r2
   264c0:	10c00117 	ldw	r3,4(r2)
   264c4:	81000317 	ldw	r4,12(r16)
   264c8:	81400217 	ldw	r5,8(r16)
   264cc:	18c00054 	ori	r3,r3,1
   264d0:	10c00115 	stw	r3,4(r2)
   264d4:	29000315 	stw	r4,12(r5)
   264d8:	21400215 	stw	r5,8(r4)
   264dc:	9009883a 	mov	r4,r18
   264e0:	002e1c40 	call	2e1c4 <__malloc_unlock>
   264e4:	80800204 	addi	r2,r16,8
   264e8:	003f2506 	br	26180 <__alt_data_end+0xfffe6180>
   264ec:	12001704 	addi	r8,r2,92
   264f0:	11c016c4 	addi	r7,r2,91
   264f4:	4209883a 	add	r4,r8,r8
   264f8:	003e9606 	br	25f54 <__alt_data_end+0xfffe5f54>
   264fc:	3804d1ba 	srli	r2,r7,6
   26500:	11400e44 	addi	r5,r2,57
   26504:	10c00e04 	addi	r3,r2,56
   26508:	294b883a 	add	r5,r5,r5
   2650c:	003fbc06 	br	26400 <__alt_data_end+0xfffe6400>
   26510:	84ff5926 	beq	r16,r19,26278 <__alt_data_end+0xfffe6278>
   26514:	008000f4 	movhi	r2,3
   26518:	1084a304 	addi	r2,r2,4748
   2651c:	14000217 	ldw	r16,8(r2)
   26520:	00bfff04 	movi	r2,-4
   26524:	80c00117 	ldw	r3,4(r16)
   26528:	1886703a 	and	r3,r3,r2
   2652c:	003f9106 	br	26374 <__alt_data_end+0xfffe6374>
   26530:	60800217 	ldw	r2,8(r12)
   26534:	213fffc4 	addi	r4,r4,-1
   26538:	1300651e 	bne	r2,r12,266d0 <_malloc_r+0x7f4>
   2653c:	208000cc 	andi	r2,r4,3
   26540:	633ffe04 	addi	r12,r12,-8
   26544:	103ffa1e 	bne	r2,zero,26530 <__alt_data_end+0xfffe6530>
   26548:	98800117 	ldw	r2,4(r19)
   2654c:	0146303a 	nor	r3,zero,r5
   26550:	1884703a 	and	r2,r3,r2
   26554:	98800115 	stw	r2,4(r19)
   26558:	294b883a 	add	r5,r5,r5
   2655c:	117f2836 	bltu	r2,r5,26200 <__alt_data_end+0xfffe6200>
   26560:	283f2726 	beq	r5,zero,26200 <__alt_data_end+0xfffe6200>
   26564:	2886703a 	and	r3,r5,r2
   26568:	5809883a 	mov	r4,r11
   2656c:	183ec31e 	bne	r3,zero,2607c <__alt_data_end+0xfffe607c>
   26570:	294b883a 	add	r5,r5,r5
   26574:	2886703a 	and	r3,r5,r2
   26578:	21000104 	addi	r4,r4,4
   2657c:	183ffc26 	beq	r3,zero,26570 <__alt_data_end+0xfffe6570>
   26580:	003ebe06 	br	2607c <__alt_data_end+0xfffe607c>
   26584:	00c05504 	movi	r3,340
   26588:	18801236 	bltu	r3,r2,265d4 <_malloc_r+0x6f8>
   2658c:	8804d3fa 	srli	r2,r17,15
   26590:	12001e04 	addi	r8,r2,120
   26594:	11c01dc4 	addi	r7,r2,119
   26598:	4209883a 	add	r4,r8,r8
   2659c:	003e6d06 	br	25f54 <__alt_data_end+0xfffe5f54>
   265a0:	00c40004 	movi	r3,4096
   265a4:	003f4606 	br	262c0 <__alt_data_end+0xfffe62c0>
   265a8:	00800044 	movi	r2,1
   265ac:	a0800115 	stw	r2,4(r20)
   265b0:	003f7406 	br	26384 <__alt_data_end+0xfffe6384>
   265b4:	1805d0ba 	srai	r2,r3,2
   265b8:	01c00044 	movi	r7,1
   265bc:	30c00117 	ldw	r3,4(r6)
   265c0:	388e983a 	sll	r7,r7,r2
   265c4:	2805883a 	mov	r2,r5
   265c8:	38c6b03a 	or	r3,r7,r3
   265cc:	30c00115 	stw	r3,4(r6)
   265d0:	003f9b06 	br	26440 <__alt_data_end+0xfffe6440>
   265d4:	00c15504 	movi	r3,1364
   265d8:	18801a36 	bltu	r3,r2,26644 <_malloc_r+0x768>
   265dc:	8804d4ba 	srli	r2,r17,18
   265e0:	12001f44 	addi	r8,r2,125
   265e4:	11c01f04 	addi	r7,r2,124
   265e8:	4209883a 	add	r4,r8,r8
   265ec:	003e5906 	br	25f54 <__alt_data_end+0xfffe5f54>
   265f0:	ad400404 	addi	r21,r21,16
   265f4:	003f1706 	br	26254 <__alt_data_end+0xfffe6254>
   265f8:	00c01504 	movi	r3,84
   265fc:	18802336 	bltu	r3,r2,2668c <_malloc_r+0x7b0>
   26600:	3804d33a 	srli	r2,r7,12
   26604:	11401bc4 	addi	r5,r2,111
   26608:	10c01b84 	addi	r3,r2,110
   2660c:	294b883a 	add	r5,r5,r5
   26610:	003f7b06 	br	26400 <__alt_data_end+0xfffe6400>
   26614:	9c000217 	ldw	r16,8(r19)
   26618:	00bfff04 	movi	r2,-4
   2661c:	80c00117 	ldw	r3,4(r16)
   26620:	1886703a 	and	r3,r3,r2
   26624:	003f5306 	br	26374 <__alt_data_end+0xfffe6374>
   26628:	3083ffcc 	andi	r2,r6,4095
   2662c:	103f181e 	bne	r2,zero,26290 <__alt_data_end+0xfffe6290>
   26630:	99000217 	ldw	r4,8(r19)
   26634:	b545883a 	add	r2,r22,r21
   26638:	10800054 	ori	r2,r2,1
   2663c:	20800115 	stw	r2,4(r4)
   26640:	003f3e06 	br	2633c <__alt_data_end+0xfffe633c>
   26644:	01003f84 	movi	r4,254
   26648:	02001fc4 	movi	r8,127
   2664c:	01c01f84 	movi	r7,126
   26650:	003e4006 	br	25f54 <__alt_data_end+0xfffe5f54>
   26654:	008000f4 	movhi	r2,3
   26658:	108a8c04 	addi	r2,r2,10800
   2665c:	15000015 	stw	r20,0(r2)
   26660:	003f1106 	br	262a8 <__alt_data_end+0xfffe62a8>
   26664:	00800044 	movi	r2,1
   26668:	002b883a 	mov	r21,zero
   2666c:	003f1f06 	br	262ec <__alt_data_end+0xfffe62ec>
   26670:	81400204 	addi	r5,r16,8
   26674:	9009883a 	mov	r4,r18
   26678:	00252e40 	call	252e4 <_free_r>
   2667c:	008000f4 	movhi	r2,3
   26680:	1091c804 	addi	r2,r2,18208
   26684:	10c00017 	ldw	r3,0(r2)
   26688:	003f2c06 	br	2633c <__alt_data_end+0xfffe633c>
   2668c:	00c05504 	movi	r3,340
   26690:	18800536 	bltu	r3,r2,266a8 <_malloc_r+0x7cc>
   26694:	3804d3fa 	srli	r2,r7,15
   26698:	11401e04 	addi	r5,r2,120
   2669c:	10c01dc4 	addi	r3,r2,119
   266a0:	294b883a 	add	r5,r5,r5
   266a4:	003f5606 	br	26400 <__alt_data_end+0xfffe6400>
   266a8:	00c15504 	movi	r3,1364
   266ac:	18800536 	bltu	r3,r2,266c4 <_malloc_r+0x7e8>
   266b0:	3804d4ba 	srli	r2,r7,18
   266b4:	11401f44 	addi	r5,r2,125
   266b8:	10c01f04 	addi	r3,r2,124
   266bc:	294b883a 	add	r5,r5,r5
   266c0:	003f4f06 	br	26400 <__alt_data_end+0xfffe6400>
   266c4:	01403f84 	movi	r5,254
   266c8:	00c01f84 	movi	r3,126
   266cc:	003f4c06 	br	26400 <__alt_data_end+0xfffe6400>
   266d0:	98800117 	ldw	r2,4(r19)
   266d4:	003fa006 	br	26558 <__alt_data_end+0xfffe6558>
   266d8:	8808d0fa 	srli	r4,r17,3
   266dc:	20800044 	addi	r2,r4,1
   266e0:	1085883a 	add	r2,r2,r2
   266e4:	003e9006 	br	26128 <__alt_data_end+0xfffe6128>

000266e8 <memchr>:
   266e8:	208000cc 	andi	r2,r4,3
   266ec:	280f883a 	mov	r7,r5
   266f0:	10003426 	beq	r2,zero,267c4 <memchr+0xdc>
   266f4:	30bfffc4 	addi	r2,r6,-1
   266f8:	30001a26 	beq	r6,zero,26764 <memchr+0x7c>
   266fc:	20c00003 	ldbu	r3,0(r4)
   26700:	29803fcc 	andi	r6,r5,255
   26704:	30c0051e 	bne	r6,r3,2671c <memchr+0x34>
   26708:	00001806 	br	2676c <memchr+0x84>
   2670c:	10001526 	beq	r2,zero,26764 <memchr+0x7c>
   26710:	20c00003 	ldbu	r3,0(r4)
   26714:	10bfffc4 	addi	r2,r2,-1
   26718:	30c01426 	beq	r6,r3,2676c <memchr+0x84>
   2671c:	21000044 	addi	r4,r4,1
   26720:	20c000cc 	andi	r3,r4,3
   26724:	183ff91e 	bne	r3,zero,2670c <__alt_data_end+0xfffe670c>
   26728:	020000c4 	movi	r8,3
   2672c:	40801136 	bltu	r8,r2,26774 <memchr+0x8c>
   26730:	10000c26 	beq	r2,zero,26764 <memchr+0x7c>
   26734:	20c00003 	ldbu	r3,0(r4)
   26738:	29403fcc 	andi	r5,r5,255
   2673c:	28c00b26 	beq	r5,r3,2676c <memchr+0x84>
   26740:	20c00044 	addi	r3,r4,1
   26744:	39803fcc 	andi	r6,r7,255
   26748:	2089883a 	add	r4,r4,r2
   2674c:	00000306 	br	2675c <memchr+0x74>
   26750:	18c00044 	addi	r3,r3,1
   26754:	197fffc3 	ldbu	r5,-1(r3)
   26758:	31400526 	beq	r6,r5,26770 <memchr+0x88>
   2675c:	1805883a 	mov	r2,r3
   26760:	20fffb1e 	bne	r4,r3,26750 <__alt_data_end+0xfffe6750>
   26764:	0005883a 	mov	r2,zero
   26768:	f800283a 	ret
   2676c:	2005883a 	mov	r2,r4
   26770:	f800283a 	ret
   26774:	28c03fcc 	andi	r3,r5,255
   26778:	1812923a 	slli	r9,r3,8
   2677c:	02ffbff4 	movhi	r11,65279
   26780:	02a02074 	movhi	r10,32897
   26784:	48d2b03a 	or	r9,r9,r3
   26788:	4806943a 	slli	r3,r9,16
   2678c:	5affbfc4 	addi	r11,r11,-257
   26790:	52a02004 	addi	r10,r10,-32640
   26794:	48d2b03a 	or	r9,r9,r3
   26798:	20c00017 	ldw	r3,0(r4)
   2679c:	48c6f03a 	xor	r3,r9,r3
   267a0:	1acd883a 	add	r6,r3,r11
   267a4:	00c6303a 	nor	r3,zero,r3
   267a8:	30c6703a 	and	r3,r6,r3
   267ac:	1a86703a 	and	r3,r3,r10
   267b0:	183fe01e 	bne	r3,zero,26734 <__alt_data_end+0xfffe6734>
   267b4:	10bfff04 	addi	r2,r2,-4
   267b8:	21000104 	addi	r4,r4,4
   267bc:	40bff636 	bltu	r8,r2,26798 <__alt_data_end+0xfffe6798>
   267c0:	003fdb06 	br	26730 <__alt_data_end+0xfffe6730>
   267c4:	3005883a 	mov	r2,r6
   267c8:	003fd706 	br	26728 <__alt_data_end+0xfffe6728>

000267cc <memcpy>:
   267cc:	defffd04 	addi	sp,sp,-12
   267d0:	dfc00215 	stw	ra,8(sp)
   267d4:	dc400115 	stw	r17,4(sp)
   267d8:	dc000015 	stw	r16,0(sp)
   267dc:	00c003c4 	movi	r3,15
   267e0:	2005883a 	mov	r2,r4
   267e4:	1980452e 	bgeu	r3,r6,268fc <memcpy+0x130>
   267e8:	2906b03a 	or	r3,r5,r4
   267ec:	18c000cc 	andi	r3,r3,3
   267f0:	1800441e 	bne	r3,zero,26904 <memcpy+0x138>
   267f4:	347ffc04 	addi	r17,r6,-16
   267f8:	8822d13a 	srli	r17,r17,4
   267fc:	28c00104 	addi	r3,r5,4
   26800:	23400104 	addi	r13,r4,4
   26804:	8820913a 	slli	r16,r17,4
   26808:	2b000204 	addi	r12,r5,8
   2680c:	22c00204 	addi	r11,r4,8
   26810:	84000504 	addi	r16,r16,20
   26814:	2a800304 	addi	r10,r5,12
   26818:	22400304 	addi	r9,r4,12
   2681c:	2c21883a 	add	r16,r5,r16
   26820:	2811883a 	mov	r8,r5
   26824:	200f883a 	mov	r7,r4
   26828:	41000017 	ldw	r4,0(r8)
   2682c:	1fc00017 	ldw	ra,0(r3)
   26830:	63c00017 	ldw	r15,0(r12)
   26834:	39000015 	stw	r4,0(r7)
   26838:	53800017 	ldw	r14,0(r10)
   2683c:	6fc00015 	stw	ra,0(r13)
   26840:	5bc00015 	stw	r15,0(r11)
   26844:	4b800015 	stw	r14,0(r9)
   26848:	18c00404 	addi	r3,r3,16
   2684c:	39c00404 	addi	r7,r7,16
   26850:	42000404 	addi	r8,r8,16
   26854:	6b400404 	addi	r13,r13,16
   26858:	63000404 	addi	r12,r12,16
   2685c:	5ac00404 	addi	r11,r11,16
   26860:	52800404 	addi	r10,r10,16
   26864:	4a400404 	addi	r9,r9,16
   26868:	1c3fef1e 	bne	r3,r16,26828 <__alt_data_end+0xfffe6828>
   2686c:	89c00044 	addi	r7,r17,1
   26870:	380e913a 	slli	r7,r7,4
   26874:	310003cc 	andi	r4,r6,15
   26878:	02c000c4 	movi	r11,3
   2687c:	11c7883a 	add	r3,r2,r7
   26880:	29cb883a 	add	r5,r5,r7
   26884:	5900212e 	bgeu	r11,r4,2690c <memcpy+0x140>
   26888:	1813883a 	mov	r9,r3
   2688c:	2811883a 	mov	r8,r5
   26890:	200f883a 	mov	r7,r4
   26894:	42800017 	ldw	r10,0(r8)
   26898:	4a400104 	addi	r9,r9,4
   2689c:	39ffff04 	addi	r7,r7,-4
   268a0:	4abfff15 	stw	r10,-4(r9)
   268a4:	42000104 	addi	r8,r8,4
   268a8:	59fffa36 	bltu	r11,r7,26894 <__alt_data_end+0xfffe6894>
   268ac:	213fff04 	addi	r4,r4,-4
   268b0:	2008d0ba 	srli	r4,r4,2
   268b4:	318000cc 	andi	r6,r6,3
   268b8:	21000044 	addi	r4,r4,1
   268bc:	2109883a 	add	r4,r4,r4
   268c0:	2109883a 	add	r4,r4,r4
   268c4:	1907883a 	add	r3,r3,r4
   268c8:	290b883a 	add	r5,r5,r4
   268cc:	30000626 	beq	r6,zero,268e8 <memcpy+0x11c>
   268d0:	198d883a 	add	r6,r3,r6
   268d4:	29c00003 	ldbu	r7,0(r5)
   268d8:	18c00044 	addi	r3,r3,1
   268dc:	29400044 	addi	r5,r5,1
   268e0:	19ffffc5 	stb	r7,-1(r3)
   268e4:	19bffb1e 	bne	r3,r6,268d4 <__alt_data_end+0xfffe68d4>
   268e8:	dfc00217 	ldw	ra,8(sp)
   268ec:	dc400117 	ldw	r17,4(sp)
   268f0:	dc000017 	ldw	r16,0(sp)
   268f4:	dec00304 	addi	sp,sp,12
   268f8:	f800283a 	ret
   268fc:	2007883a 	mov	r3,r4
   26900:	003ff206 	br	268cc <__alt_data_end+0xfffe68cc>
   26904:	2007883a 	mov	r3,r4
   26908:	003ff106 	br	268d0 <__alt_data_end+0xfffe68d0>
   2690c:	200d883a 	mov	r6,r4
   26910:	003fee06 	br	268cc <__alt_data_end+0xfffe68cc>

00026914 <memmove>:
   26914:	2005883a 	mov	r2,r4
   26918:	29000b2e 	bgeu	r5,r4,26948 <memmove+0x34>
   2691c:	298f883a 	add	r7,r5,r6
   26920:	21c0092e 	bgeu	r4,r7,26948 <memmove+0x34>
   26924:	2187883a 	add	r3,r4,r6
   26928:	198bc83a 	sub	r5,r3,r6
   2692c:	30004826 	beq	r6,zero,26a50 <memmove+0x13c>
   26930:	39ffffc4 	addi	r7,r7,-1
   26934:	39000003 	ldbu	r4,0(r7)
   26938:	18ffffc4 	addi	r3,r3,-1
   2693c:	19000005 	stb	r4,0(r3)
   26940:	28fffb1e 	bne	r5,r3,26930 <__alt_data_end+0xfffe6930>
   26944:	f800283a 	ret
   26948:	00c003c4 	movi	r3,15
   2694c:	1980412e 	bgeu	r3,r6,26a54 <memmove+0x140>
   26950:	2886b03a 	or	r3,r5,r2
   26954:	18c000cc 	andi	r3,r3,3
   26958:	1800401e 	bne	r3,zero,26a5c <memmove+0x148>
   2695c:	33fffc04 	addi	r15,r6,-16
   26960:	781ed13a 	srli	r15,r15,4
   26964:	28c00104 	addi	r3,r5,4
   26968:	13400104 	addi	r13,r2,4
   2696c:	781c913a 	slli	r14,r15,4
   26970:	2b000204 	addi	r12,r5,8
   26974:	12c00204 	addi	r11,r2,8
   26978:	73800504 	addi	r14,r14,20
   2697c:	2a800304 	addi	r10,r5,12
   26980:	12400304 	addi	r9,r2,12
   26984:	2b9d883a 	add	r14,r5,r14
   26988:	2811883a 	mov	r8,r5
   2698c:	100f883a 	mov	r7,r2
   26990:	41000017 	ldw	r4,0(r8)
   26994:	39c00404 	addi	r7,r7,16
   26998:	18c00404 	addi	r3,r3,16
   2699c:	393ffc15 	stw	r4,-16(r7)
   269a0:	193ffc17 	ldw	r4,-16(r3)
   269a4:	6b400404 	addi	r13,r13,16
   269a8:	5ac00404 	addi	r11,r11,16
   269ac:	693ffc15 	stw	r4,-16(r13)
   269b0:	61000017 	ldw	r4,0(r12)
   269b4:	4a400404 	addi	r9,r9,16
   269b8:	42000404 	addi	r8,r8,16
   269bc:	593ffc15 	stw	r4,-16(r11)
   269c0:	51000017 	ldw	r4,0(r10)
   269c4:	63000404 	addi	r12,r12,16
   269c8:	52800404 	addi	r10,r10,16
   269cc:	493ffc15 	stw	r4,-16(r9)
   269d0:	1bbfef1e 	bne	r3,r14,26990 <__alt_data_end+0xfffe6990>
   269d4:	79000044 	addi	r4,r15,1
   269d8:	2008913a 	slli	r4,r4,4
   269dc:	328003cc 	andi	r10,r6,15
   269e0:	02c000c4 	movi	r11,3
   269e4:	1107883a 	add	r3,r2,r4
   269e8:	290b883a 	add	r5,r5,r4
   269ec:	5a801e2e 	bgeu	r11,r10,26a68 <memmove+0x154>
   269f0:	1813883a 	mov	r9,r3
   269f4:	2811883a 	mov	r8,r5
   269f8:	500f883a 	mov	r7,r10
   269fc:	41000017 	ldw	r4,0(r8)
   26a00:	4a400104 	addi	r9,r9,4
   26a04:	39ffff04 	addi	r7,r7,-4
   26a08:	493fff15 	stw	r4,-4(r9)
   26a0c:	42000104 	addi	r8,r8,4
   26a10:	59fffa36 	bltu	r11,r7,269fc <__alt_data_end+0xfffe69fc>
   26a14:	513fff04 	addi	r4,r10,-4
   26a18:	2008d0ba 	srli	r4,r4,2
   26a1c:	318000cc 	andi	r6,r6,3
   26a20:	21000044 	addi	r4,r4,1
   26a24:	2109883a 	add	r4,r4,r4
   26a28:	2109883a 	add	r4,r4,r4
   26a2c:	1907883a 	add	r3,r3,r4
   26a30:	290b883a 	add	r5,r5,r4
   26a34:	30000b26 	beq	r6,zero,26a64 <memmove+0x150>
   26a38:	198d883a 	add	r6,r3,r6
   26a3c:	29c00003 	ldbu	r7,0(r5)
   26a40:	18c00044 	addi	r3,r3,1
   26a44:	29400044 	addi	r5,r5,1
   26a48:	19ffffc5 	stb	r7,-1(r3)
   26a4c:	19bffb1e 	bne	r3,r6,26a3c <__alt_data_end+0xfffe6a3c>
   26a50:	f800283a 	ret
   26a54:	1007883a 	mov	r3,r2
   26a58:	003ff606 	br	26a34 <__alt_data_end+0xfffe6a34>
   26a5c:	1007883a 	mov	r3,r2
   26a60:	003ff506 	br	26a38 <__alt_data_end+0xfffe6a38>
   26a64:	f800283a 	ret
   26a68:	500d883a 	mov	r6,r10
   26a6c:	003ff106 	br	26a34 <__alt_data_end+0xfffe6a34>

00026a70 <memset>:
   26a70:	20c000cc 	andi	r3,r4,3
   26a74:	2005883a 	mov	r2,r4
   26a78:	18004426 	beq	r3,zero,26b8c <memset+0x11c>
   26a7c:	31ffffc4 	addi	r7,r6,-1
   26a80:	30004026 	beq	r6,zero,26b84 <memset+0x114>
   26a84:	2813883a 	mov	r9,r5
   26a88:	200d883a 	mov	r6,r4
   26a8c:	2007883a 	mov	r3,r4
   26a90:	00000406 	br	26aa4 <memset+0x34>
   26a94:	3a3fffc4 	addi	r8,r7,-1
   26a98:	31800044 	addi	r6,r6,1
   26a9c:	38003926 	beq	r7,zero,26b84 <memset+0x114>
   26aa0:	400f883a 	mov	r7,r8
   26aa4:	18c00044 	addi	r3,r3,1
   26aa8:	32400005 	stb	r9,0(r6)
   26aac:	1a0000cc 	andi	r8,r3,3
   26ab0:	403ff81e 	bne	r8,zero,26a94 <__alt_data_end+0xfffe6a94>
   26ab4:	010000c4 	movi	r4,3
   26ab8:	21c02d2e 	bgeu	r4,r7,26b70 <memset+0x100>
   26abc:	29003fcc 	andi	r4,r5,255
   26ac0:	200c923a 	slli	r6,r4,8
   26ac4:	3108b03a 	or	r4,r6,r4
   26ac8:	200c943a 	slli	r6,r4,16
   26acc:	218cb03a 	or	r6,r4,r6
   26ad0:	010003c4 	movi	r4,15
   26ad4:	21c0182e 	bgeu	r4,r7,26b38 <memset+0xc8>
   26ad8:	3b3ffc04 	addi	r12,r7,-16
   26adc:	6018d13a 	srli	r12,r12,4
   26ae0:	1a000104 	addi	r8,r3,4
   26ae4:	1ac00204 	addi	r11,r3,8
   26ae8:	6008913a 	slli	r4,r12,4
   26aec:	1a800304 	addi	r10,r3,12
   26af0:	1813883a 	mov	r9,r3
   26af4:	21000504 	addi	r4,r4,20
   26af8:	1909883a 	add	r4,r3,r4
   26afc:	49800015 	stw	r6,0(r9)
   26b00:	41800015 	stw	r6,0(r8)
   26b04:	59800015 	stw	r6,0(r11)
   26b08:	51800015 	stw	r6,0(r10)
   26b0c:	42000404 	addi	r8,r8,16
   26b10:	4a400404 	addi	r9,r9,16
   26b14:	5ac00404 	addi	r11,r11,16
   26b18:	52800404 	addi	r10,r10,16
   26b1c:	413ff71e 	bne	r8,r4,26afc <__alt_data_end+0xfffe6afc>
   26b20:	63000044 	addi	r12,r12,1
   26b24:	6018913a 	slli	r12,r12,4
   26b28:	39c003cc 	andi	r7,r7,15
   26b2c:	010000c4 	movi	r4,3
   26b30:	1b07883a 	add	r3,r3,r12
   26b34:	21c00e2e 	bgeu	r4,r7,26b70 <memset+0x100>
   26b38:	1813883a 	mov	r9,r3
   26b3c:	3811883a 	mov	r8,r7
   26b40:	010000c4 	movi	r4,3
   26b44:	49800015 	stw	r6,0(r9)
   26b48:	423fff04 	addi	r8,r8,-4
   26b4c:	4a400104 	addi	r9,r9,4
   26b50:	223ffc36 	bltu	r4,r8,26b44 <__alt_data_end+0xfffe6b44>
   26b54:	393fff04 	addi	r4,r7,-4
   26b58:	2008d0ba 	srli	r4,r4,2
   26b5c:	39c000cc 	andi	r7,r7,3
   26b60:	21000044 	addi	r4,r4,1
   26b64:	2109883a 	add	r4,r4,r4
   26b68:	2109883a 	add	r4,r4,r4
   26b6c:	1907883a 	add	r3,r3,r4
   26b70:	38000526 	beq	r7,zero,26b88 <memset+0x118>
   26b74:	19cf883a 	add	r7,r3,r7
   26b78:	19400005 	stb	r5,0(r3)
   26b7c:	18c00044 	addi	r3,r3,1
   26b80:	38fffd1e 	bne	r7,r3,26b78 <__alt_data_end+0xfffe6b78>
   26b84:	f800283a 	ret
   26b88:	f800283a 	ret
   26b8c:	2007883a 	mov	r3,r4
   26b90:	300f883a 	mov	r7,r6
   26b94:	003fc706 	br	26ab4 <__alt_data_end+0xfffe6ab4>

00026b98 <_Balloc>:
   26b98:	20801317 	ldw	r2,76(r4)
   26b9c:	defffc04 	addi	sp,sp,-16
   26ba0:	dc400115 	stw	r17,4(sp)
   26ba4:	dc000015 	stw	r16,0(sp)
   26ba8:	dfc00315 	stw	ra,12(sp)
   26bac:	dc800215 	stw	r18,8(sp)
   26bb0:	2023883a 	mov	r17,r4
   26bb4:	2821883a 	mov	r16,r5
   26bb8:	10000f26 	beq	r2,zero,26bf8 <_Balloc+0x60>
   26bbc:	8407883a 	add	r3,r16,r16
   26bc0:	18c7883a 	add	r3,r3,r3
   26bc4:	10c7883a 	add	r3,r2,r3
   26bc8:	18800017 	ldw	r2,0(r3)
   26bcc:	10001126 	beq	r2,zero,26c14 <_Balloc+0x7c>
   26bd0:	11000017 	ldw	r4,0(r2)
   26bd4:	19000015 	stw	r4,0(r3)
   26bd8:	10000415 	stw	zero,16(r2)
   26bdc:	10000315 	stw	zero,12(r2)
   26be0:	dfc00317 	ldw	ra,12(sp)
   26be4:	dc800217 	ldw	r18,8(sp)
   26be8:	dc400117 	ldw	r17,4(sp)
   26bec:	dc000017 	ldw	r16,0(sp)
   26bf0:	dec00404 	addi	sp,sp,16
   26bf4:	f800283a 	ret
   26bf8:	01800844 	movi	r6,33
   26bfc:	01400104 	movi	r5,4
   26c00:	0029c400 	call	29c40 <_calloc_r>
   26c04:	88801315 	stw	r2,76(r17)
   26c08:	103fec1e 	bne	r2,zero,26bbc <__alt_data_end+0xfffe6bbc>
   26c0c:	0005883a 	mov	r2,zero
   26c10:	003ff306 	br	26be0 <__alt_data_end+0xfffe6be0>
   26c14:	01400044 	movi	r5,1
   26c18:	2c24983a 	sll	r18,r5,r16
   26c1c:	8809883a 	mov	r4,r17
   26c20:	91800144 	addi	r6,r18,5
   26c24:	318d883a 	add	r6,r6,r6
   26c28:	318d883a 	add	r6,r6,r6
   26c2c:	0029c400 	call	29c40 <_calloc_r>
   26c30:	103ff626 	beq	r2,zero,26c0c <__alt_data_end+0xfffe6c0c>
   26c34:	14000115 	stw	r16,4(r2)
   26c38:	14800215 	stw	r18,8(r2)
   26c3c:	003fe606 	br	26bd8 <__alt_data_end+0xfffe6bd8>

00026c40 <_Bfree>:
   26c40:	28000826 	beq	r5,zero,26c64 <_Bfree+0x24>
   26c44:	28c00117 	ldw	r3,4(r5)
   26c48:	20801317 	ldw	r2,76(r4)
   26c4c:	18c7883a 	add	r3,r3,r3
   26c50:	18c7883a 	add	r3,r3,r3
   26c54:	10c5883a 	add	r2,r2,r3
   26c58:	10c00017 	ldw	r3,0(r2)
   26c5c:	28c00015 	stw	r3,0(r5)
   26c60:	11400015 	stw	r5,0(r2)
   26c64:	f800283a 	ret

00026c68 <__multadd>:
   26c68:	defff704 	addi	sp,sp,-36
   26c6c:	dc800215 	stw	r18,8(sp)
   26c70:	2c800417 	ldw	r18,16(r5)
   26c74:	dd800615 	stw	r22,24(sp)
   26c78:	dd400515 	stw	r21,20(sp)
   26c7c:	dd000415 	stw	r20,16(sp)
   26c80:	dcc00315 	stw	r19,12(sp)
   26c84:	dc400115 	stw	r17,4(sp)
   26c88:	dc000015 	stw	r16,0(sp)
   26c8c:	dfc00815 	stw	ra,32(sp)
   26c90:	ddc00715 	stw	r23,28(sp)
   26c94:	2827883a 	mov	r19,r5
   26c98:	2029883a 	mov	r20,r4
   26c9c:	3023883a 	mov	r17,r6
   26ca0:	3821883a 	mov	r16,r7
   26ca4:	2d400504 	addi	r21,r5,20
   26ca8:	002d883a 	mov	r22,zero
   26cac:	adc00017 	ldw	r23,0(r21)
   26cb0:	880b883a 	mov	r5,r17
   26cb4:	ad400104 	addi	r21,r21,4
   26cb8:	b93fffcc 	andi	r4,r23,65535
   26cbc:	002b0980 	call	2b098 <__mulsi3>
   26cc0:	b808d43a 	srli	r4,r23,16
   26cc4:	880b883a 	mov	r5,r17
   26cc8:	1421883a 	add	r16,r2,r16
   26ccc:	002b0980 	call	2b098 <__mulsi3>
   26cd0:	800ed43a 	srli	r7,r16,16
   26cd4:	80ffffcc 	andi	r3,r16,65535
   26cd8:	b5800044 	addi	r22,r22,1
   26cdc:	11c5883a 	add	r2,r2,r7
   26ce0:	100e943a 	slli	r7,r2,16
   26ce4:	1020d43a 	srli	r16,r2,16
   26ce8:	38c7883a 	add	r3,r7,r3
   26cec:	a8ffff15 	stw	r3,-4(r21)
   26cf0:	b4bfee16 	blt	r22,r18,26cac <__alt_data_end+0xfffe6cac>
   26cf4:	80000926 	beq	r16,zero,26d1c <__multadd+0xb4>
   26cf8:	98800217 	ldw	r2,8(r19)
   26cfc:	9080130e 	bge	r18,r2,26d4c <__multadd+0xe4>
   26d00:	90800144 	addi	r2,r18,5
   26d04:	1085883a 	add	r2,r2,r2
   26d08:	1085883a 	add	r2,r2,r2
   26d0c:	9885883a 	add	r2,r19,r2
   26d10:	14000015 	stw	r16,0(r2)
   26d14:	94800044 	addi	r18,r18,1
   26d18:	9c800415 	stw	r18,16(r19)
   26d1c:	9805883a 	mov	r2,r19
   26d20:	dfc00817 	ldw	ra,32(sp)
   26d24:	ddc00717 	ldw	r23,28(sp)
   26d28:	dd800617 	ldw	r22,24(sp)
   26d2c:	dd400517 	ldw	r21,20(sp)
   26d30:	dd000417 	ldw	r20,16(sp)
   26d34:	dcc00317 	ldw	r19,12(sp)
   26d38:	dc800217 	ldw	r18,8(sp)
   26d3c:	dc400117 	ldw	r17,4(sp)
   26d40:	dc000017 	ldw	r16,0(sp)
   26d44:	dec00904 	addi	sp,sp,36
   26d48:	f800283a 	ret
   26d4c:	99400117 	ldw	r5,4(r19)
   26d50:	a009883a 	mov	r4,r20
   26d54:	29400044 	addi	r5,r5,1
   26d58:	0026b980 	call	26b98 <_Balloc>
   26d5c:	99800417 	ldw	r6,16(r19)
   26d60:	99400304 	addi	r5,r19,12
   26d64:	11000304 	addi	r4,r2,12
   26d68:	31800084 	addi	r6,r6,2
   26d6c:	318d883a 	add	r6,r6,r6
   26d70:	318d883a 	add	r6,r6,r6
   26d74:	1023883a 	mov	r17,r2
   26d78:	00267cc0 	call	267cc <memcpy>
   26d7c:	98000a26 	beq	r19,zero,26da8 <__multadd+0x140>
   26d80:	98c00117 	ldw	r3,4(r19)
   26d84:	a0801317 	ldw	r2,76(r20)
   26d88:	18c7883a 	add	r3,r3,r3
   26d8c:	18c7883a 	add	r3,r3,r3
   26d90:	10c5883a 	add	r2,r2,r3
   26d94:	10c00017 	ldw	r3,0(r2)
   26d98:	98c00015 	stw	r3,0(r19)
   26d9c:	14c00015 	stw	r19,0(r2)
   26da0:	8827883a 	mov	r19,r17
   26da4:	003fd606 	br	26d00 <__alt_data_end+0xfffe6d00>
   26da8:	8827883a 	mov	r19,r17
   26dac:	003fd406 	br	26d00 <__alt_data_end+0xfffe6d00>

00026db0 <__s2b>:
   26db0:	defff904 	addi	sp,sp,-28
   26db4:	dc400115 	stw	r17,4(sp)
   26db8:	dc000015 	stw	r16,0(sp)
   26dbc:	2023883a 	mov	r17,r4
   26dc0:	2821883a 	mov	r16,r5
   26dc4:	39000204 	addi	r4,r7,8
   26dc8:	01400244 	movi	r5,9
   26dcc:	dcc00315 	stw	r19,12(sp)
   26dd0:	dc800215 	stw	r18,8(sp)
   26dd4:	dfc00615 	stw	ra,24(sp)
   26dd8:	dd400515 	stw	r21,20(sp)
   26ddc:	dd000415 	stw	r20,16(sp)
   26de0:	3825883a 	mov	r18,r7
   26de4:	3027883a 	mov	r19,r6
   26de8:	0020a240 	call	20a24 <__divsi3>
   26dec:	00c00044 	movi	r3,1
   26df0:	000b883a 	mov	r5,zero
   26df4:	1880030e 	bge	r3,r2,26e04 <__s2b+0x54>
   26df8:	18c7883a 	add	r3,r3,r3
   26dfc:	29400044 	addi	r5,r5,1
   26e00:	18bffd16 	blt	r3,r2,26df8 <__alt_data_end+0xfffe6df8>
   26e04:	8809883a 	mov	r4,r17
   26e08:	0026b980 	call	26b98 <_Balloc>
   26e0c:	d8c00717 	ldw	r3,28(sp)
   26e10:	10c00515 	stw	r3,20(r2)
   26e14:	00c00044 	movi	r3,1
   26e18:	10c00415 	stw	r3,16(r2)
   26e1c:	00c00244 	movi	r3,9
   26e20:	1cc0210e 	bge	r3,r19,26ea8 <__s2b+0xf8>
   26e24:	80eb883a 	add	r21,r16,r3
   26e28:	a829883a 	mov	r20,r21
   26e2c:	84e1883a 	add	r16,r16,r19
   26e30:	a1c00007 	ldb	r7,0(r20)
   26e34:	01800284 	movi	r6,10
   26e38:	a5000044 	addi	r20,r20,1
   26e3c:	100b883a 	mov	r5,r2
   26e40:	39fff404 	addi	r7,r7,-48
   26e44:	8809883a 	mov	r4,r17
   26e48:	0026c680 	call	26c68 <__multadd>
   26e4c:	a43ff81e 	bne	r20,r16,26e30 <__alt_data_end+0xfffe6e30>
   26e50:	ace1883a 	add	r16,r21,r19
   26e54:	843ffe04 	addi	r16,r16,-8
   26e58:	9c800a0e 	bge	r19,r18,26e84 <__s2b+0xd4>
   26e5c:	94e5c83a 	sub	r18,r18,r19
   26e60:	84a5883a 	add	r18,r16,r18
   26e64:	81c00007 	ldb	r7,0(r16)
   26e68:	01800284 	movi	r6,10
   26e6c:	84000044 	addi	r16,r16,1
   26e70:	100b883a 	mov	r5,r2
   26e74:	39fff404 	addi	r7,r7,-48
   26e78:	8809883a 	mov	r4,r17
   26e7c:	0026c680 	call	26c68 <__multadd>
   26e80:	84bff81e 	bne	r16,r18,26e64 <__alt_data_end+0xfffe6e64>
   26e84:	dfc00617 	ldw	ra,24(sp)
   26e88:	dd400517 	ldw	r21,20(sp)
   26e8c:	dd000417 	ldw	r20,16(sp)
   26e90:	dcc00317 	ldw	r19,12(sp)
   26e94:	dc800217 	ldw	r18,8(sp)
   26e98:	dc400117 	ldw	r17,4(sp)
   26e9c:	dc000017 	ldw	r16,0(sp)
   26ea0:	dec00704 	addi	sp,sp,28
   26ea4:	f800283a 	ret
   26ea8:	84000284 	addi	r16,r16,10
   26eac:	1827883a 	mov	r19,r3
   26eb0:	003fe906 	br	26e58 <__alt_data_end+0xfffe6e58>

00026eb4 <__hi0bits>:
   26eb4:	20bfffec 	andhi	r2,r4,65535
   26eb8:	1000141e 	bne	r2,zero,26f0c <__hi0bits+0x58>
   26ebc:	2008943a 	slli	r4,r4,16
   26ec0:	00800404 	movi	r2,16
   26ec4:	20ffc02c 	andhi	r3,r4,65280
   26ec8:	1800021e 	bne	r3,zero,26ed4 <__hi0bits+0x20>
   26ecc:	2008923a 	slli	r4,r4,8
   26ed0:	10800204 	addi	r2,r2,8
   26ed4:	20fc002c 	andhi	r3,r4,61440
   26ed8:	1800021e 	bne	r3,zero,26ee4 <__hi0bits+0x30>
   26edc:	2008913a 	slli	r4,r4,4
   26ee0:	10800104 	addi	r2,r2,4
   26ee4:	20f0002c 	andhi	r3,r4,49152
   26ee8:	1800031e 	bne	r3,zero,26ef8 <__hi0bits+0x44>
   26eec:	2109883a 	add	r4,r4,r4
   26ef0:	10800084 	addi	r2,r2,2
   26ef4:	2109883a 	add	r4,r4,r4
   26ef8:	20000316 	blt	r4,zero,26f08 <__hi0bits+0x54>
   26efc:	2110002c 	andhi	r4,r4,16384
   26f00:	2000041e 	bne	r4,zero,26f14 <__hi0bits+0x60>
   26f04:	00800804 	movi	r2,32
   26f08:	f800283a 	ret
   26f0c:	0005883a 	mov	r2,zero
   26f10:	003fec06 	br	26ec4 <__alt_data_end+0xfffe6ec4>
   26f14:	10800044 	addi	r2,r2,1
   26f18:	f800283a 	ret

00026f1c <__lo0bits>:
   26f1c:	20c00017 	ldw	r3,0(r4)
   26f20:	188001cc 	andi	r2,r3,7
   26f24:	10000826 	beq	r2,zero,26f48 <__lo0bits+0x2c>
   26f28:	1880004c 	andi	r2,r3,1
   26f2c:	1000211e 	bne	r2,zero,26fb4 <__lo0bits+0x98>
   26f30:	1880008c 	andi	r2,r3,2
   26f34:	1000211e 	bne	r2,zero,26fbc <__lo0bits+0xa0>
   26f38:	1806d0ba 	srli	r3,r3,2
   26f3c:	00800084 	movi	r2,2
   26f40:	20c00015 	stw	r3,0(r4)
   26f44:	f800283a 	ret
   26f48:	18bfffcc 	andi	r2,r3,65535
   26f4c:	10001326 	beq	r2,zero,26f9c <__lo0bits+0x80>
   26f50:	0005883a 	mov	r2,zero
   26f54:	19403fcc 	andi	r5,r3,255
   26f58:	2800021e 	bne	r5,zero,26f64 <__lo0bits+0x48>
   26f5c:	1806d23a 	srli	r3,r3,8
   26f60:	10800204 	addi	r2,r2,8
   26f64:	194003cc 	andi	r5,r3,15
   26f68:	2800021e 	bne	r5,zero,26f74 <__lo0bits+0x58>
   26f6c:	1806d13a 	srli	r3,r3,4
   26f70:	10800104 	addi	r2,r2,4
   26f74:	194000cc 	andi	r5,r3,3
   26f78:	2800021e 	bne	r5,zero,26f84 <__lo0bits+0x68>
   26f7c:	1806d0ba 	srli	r3,r3,2
   26f80:	10800084 	addi	r2,r2,2
   26f84:	1940004c 	andi	r5,r3,1
   26f88:	2800081e 	bne	r5,zero,26fac <__lo0bits+0x90>
   26f8c:	1806d07a 	srli	r3,r3,1
   26f90:	1800051e 	bne	r3,zero,26fa8 <__lo0bits+0x8c>
   26f94:	00800804 	movi	r2,32
   26f98:	f800283a 	ret
   26f9c:	1806d43a 	srli	r3,r3,16
   26fa0:	00800404 	movi	r2,16
   26fa4:	003feb06 	br	26f54 <__alt_data_end+0xfffe6f54>
   26fa8:	10800044 	addi	r2,r2,1
   26fac:	20c00015 	stw	r3,0(r4)
   26fb0:	f800283a 	ret
   26fb4:	0005883a 	mov	r2,zero
   26fb8:	f800283a 	ret
   26fbc:	1806d07a 	srli	r3,r3,1
   26fc0:	00800044 	movi	r2,1
   26fc4:	20c00015 	stw	r3,0(r4)
   26fc8:	f800283a 	ret

00026fcc <__i2b>:
   26fcc:	defffd04 	addi	sp,sp,-12
   26fd0:	dc000015 	stw	r16,0(sp)
   26fd4:	04000044 	movi	r16,1
   26fd8:	dc400115 	stw	r17,4(sp)
   26fdc:	2823883a 	mov	r17,r5
   26fe0:	800b883a 	mov	r5,r16
   26fe4:	dfc00215 	stw	ra,8(sp)
   26fe8:	0026b980 	call	26b98 <_Balloc>
   26fec:	14400515 	stw	r17,20(r2)
   26ff0:	14000415 	stw	r16,16(r2)
   26ff4:	dfc00217 	ldw	ra,8(sp)
   26ff8:	dc400117 	ldw	r17,4(sp)
   26ffc:	dc000017 	ldw	r16,0(sp)
   27000:	dec00304 	addi	sp,sp,12
   27004:	f800283a 	ret

00027008 <__multiply>:
   27008:	deffef04 	addi	sp,sp,-68
   2700c:	dc400815 	stw	r17,32(sp)
   27010:	dc000715 	stw	r16,28(sp)
   27014:	34400417 	ldw	r17,16(r6)
   27018:	2c000417 	ldw	r16,16(r5)
   2701c:	dd800d15 	stw	r22,52(sp)
   27020:	dc800915 	stw	r18,36(sp)
   27024:	dfc01015 	stw	ra,64(sp)
   27028:	df000f15 	stw	fp,60(sp)
   2702c:	ddc00e15 	stw	r23,56(sp)
   27030:	dd400c15 	stw	r21,48(sp)
   27034:	dd000b15 	stw	r20,44(sp)
   27038:	dcc00a15 	stw	r19,40(sp)
   2703c:	2825883a 	mov	r18,r5
   27040:	302d883a 	mov	r22,r6
   27044:	8440050e 	bge	r16,r17,2705c <__multiply+0x54>
   27048:	8007883a 	mov	r3,r16
   2704c:	3025883a 	mov	r18,r6
   27050:	8821883a 	mov	r16,r17
   27054:	282d883a 	mov	r22,r5
   27058:	1823883a 	mov	r17,r3
   2705c:	90800217 	ldw	r2,8(r18)
   27060:	8447883a 	add	r3,r16,r17
   27064:	d8c00215 	stw	r3,8(sp)
   27068:	91400117 	ldw	r5,4(r18)
   2706c:	10c0010e 	bge	r2,r3,27074 <__multiply+0x6c>
   27070:	29400044 	addi	r5,r5,1
   27074:	0026b980 	call	26b98 <_Balloc>
   27078:	d8c00217 	ldw	r3,8(sp)
   2707c:	d8800615 	stw	r2,24(sp)
   27080:	18eb883a 	add	r21,r3,r3
   27084:	ad6b883a 	add	r21,r21,r21
   27088:	10c00504 	addi	r3,r2,20
   2708c:	1d6b883a 	add	r21,r3,r21
   27090:	d8c00115 	stw	r3,4(sp)
   27094:	dd400315 	stw	r21,12(sp)
   27098:	1805883a 	mov	r2,r3
   2709c:	1d40042e 	bgeu	r3,r21,270b0 <__multiply+0xa8>
   270a0:	d8c00317 	ldw	r3,12(sp)
   270a4:	10000015 	stw	zero,0(r2)
   270a8:	10800104 	addi	r2,r2,4
   270ac:	10fffc36 	bltu	r2,r3,270a0 <__alt_data_end+0xfffe70a0>
   270b0:	8c63883a 	add	r17,r17,r17
   270b4:	b5800504 	addi	r22,r22,20
   270b8:	8c63883a 	add	r17,r17,r17
   270bc:	94800504 	addi	r18,r18,20
   270c0:	8421883a 	add	r16,r16,r16
   270c4:	b463883a 	add	r17,r22,r17
   270c8:	8421883a 	add	r16,r16,r16
   270cc:	dd800015 	stw	r22,0(sp)
   270d0:	dc800415 	stw	r18,16(sp)
   270d4:	dc400515 	stw	r17,20(sp)
   270d8:	9429883a 	add	r20,r18,r16
   270dc:	b4404f2e 	bgeu	r22,r17,2721c <__multiply+0x214>
   270e0:	d8c00017 	ldw	r3,0(sp)
   270e4:	1c800017 	ldw	r18,0(r3)
   270e8:	947fffcc 	andi	r17,r18,65535
   270ec:	88001e26 	beq	r17,zero,27168 <__multiply+0x160>
   270f0:	dd800117 	ldw	r22,4(sp)
   270f4:	dd400417 	ldw	r21,16(sp)
   270f8:	0027883a 	mov	r19,zero
   270fc:	ac800017 	ldw	r18,0(r21)
   27100:	b4000017 	ldw	r16,0(r22)
   27104:	880b883a 	mov	r5,r17
   27108:	913fffcc 	andi	r4,r18,65535
   2710c:	002b0980 	call	2b098 <__mulsi3>
   27110:	9008d43a 	srli	r4,r18,16
   27114:	84bfffcc 	andi	r18,r16,65535
   27118:	1485883a 	add	r2,r2,r18
   2711c:	14e5883a 	add	r18,r2,r19
   27120:	8020d43a 	srli	r16,r16,16
   27124:	9026d43a 	srli	r19,r18,16
   27128:	880b883a 	mov	r5,r17
   2712c:	002b0980 	call	2b098 <__mulsi3>
   27130:	1405883a 	add	r2,r2,r16
   27134:	14e1883a 	add	r16,r2,r19
   27138:	90ffffcc 	andi	r3,r18,65535
   2713c:	8024943a 	slli	r18,r16,16
   27140:	ad400104 	addi	r21,r21,4
   27144:	b005883a 	mov	r2,r22
   27148:	90c6b03a 	or	r3,r18,r3
   2714c:	b0c00015 	stw	r3,0(r22)
   27150:	8026d43a 	srli	r19,r16,16
   27154:	b5800104 	addi	r22,r22,4
   27158:	ad3fe836 	bltu	r21,r20,270fc <__alt_data_end+0xfffe70fc>
   2715c:	d8c00017 	ldw	r3,0(sp)
   27160:	14c00115 	stw	r19,4(r2)
   27164:	1c800017 	ldw	r18,0(r3)
   27168:	9024d43a 	srli	r18,r18,16
   2716c:	90002226 	beq	r18,zero,271f8 <__multiply+0x1f0>
   27170:	d8c00117 	ldw	r3,4(sp)
   27174:	dd800417 	ldw	r22,16(sp)
   27178:	002f883a 	mov	r23,zero
   2717c:	1f000017 	ldw	fp,0(r3)
   27180:	1823883a 	mov	r17,r3
   27184:	182b883a 	mov	r21,r3
   27188:	e021883a 	mov	r16,fp
   2718c:	00000106 	br	27194 <__multiply+0x18c>
   27190:	982b883a 	mov	r21,r19
   27194:	b100000b 	ldhu	r4,0(r22)
   27198:	8020d43a 	srli	r16,r16,16
   2719c:	900b883a 	mov	r5,r18
   271a0:	002b0980 	call	2b098 <__mulsi3>
   271a4:	1405883a 	add	r2,r2,r16
   271a8:	15ef883a 	add	r23,r2,r23
   271ac:	b804943a 	slli	r2,r23,16
   271b0:	e0ffffcc 	andi	r3,fp,65535
   271b4:	8c400104 	addi	r17,r17,4
   271b8:	10c6b03a 	or	r3,r2,r3
   271bc:	88ffff15 	stw	r3,-4(r17)
   271c0:	b5800104 	addi	r22,r22,4
   271c4:	b13fff17 	ldw	r4,-4(r22)
   271c8:	acc00104 	addi	r19,r21,4
   271cc:	900b883a 	mov	r5,r18
   271d0:	2008d43a 	srli	r4,r4,16
   271d4:	9c000017 	ldw	r16,0(r19)
   271d8:	002b0980 	call	2b098 <__mulsi3>
   271dc:	b806d43a 	srli	r3,r23,16
   271e0:	813fffcc 	andi	r4,r16,65535
   271e4:	1105883a 	add	r2,r2,r4
   271e8:	10f9883a 	add	fp,r2,r3
   271ec:	e02ed43a 	srli	r23,fp,16
   271f0:	b53fe736 	bltu	r22,r20,27190 <__alt_data_end+0xfffe7190>
   271f4:	af000115 	stw	fp,4(r21)
   271f8:	d8c00017 	ldw	r3,0(sp)
   271fc:	d9000517 	ldw	r4,20(sp)
   27200:	18c00104 	addi	r3,r3,4
   27204:	d8c00015 	stw	r3,0(sp)
   27208:	d8c00117 	ldw	r3,4(sp)
   2720c:	18c00104 	addi	r3,r3,4
   27210:	d8c00115 	stw	r3,4(sp)
   27214:	d8c00017 	ldw	r3,0(sp)
   27218:	193fb136 	bltu	r3,r4,270e0 <__alt_data_end+0xfffe70e0>
   2721c:	d8c00217 	ldw	r3,8(sp)
   27220:	00c00c0e 	bge	zero,r3,27254 <__multiply+0x24c>
   27224:	d8c00317 	ldw	r3,12(sp)
   27228:	18bfff17 	ldw	r2,-4(r3)
   2722c:	1d7fff04 	addi	r21,r3,-4
   27230:	10000326 	beq	r2,zero,27240 <__multiply+0x238>
   27234:	00000706 	br	27254 <__multiply+0x24c>
   27238:	a8800017 	ldw	r2,0(r21)
   2723c:	1000051e 	bne	r2,zero,27254 <__multiply+0x24c>
   27240:	d8c00217 	ldw	r3,8(sp)
   27244:	ad7fff04 	addi	r21,r21,-4
   27248:	18ffffc4 	addi	r3,r3,-1
   2724c:	d8c00215 	stw	r3,8(sp)
   27250:	183ff91e 	bne	r3,zero,27238 <__alt_data_end+0xfffe7238>
   27254:	d8c00617 	ldw	r3,24(sp)
   27258:	d9000217 	ldw	r4,8(sp)
   2725c:	1805883a 	mov	r2,r3
   27260:	19000415 	stw	r4,16(r3)
   27264:	dfc01017 	ldw	ra,64(sp)
   27268:	df000f17 	ldw	fp,60(sp)
   2726c:	ddc00e17 	ldw	r23,56(sp)
   27270:	dd800d17 	ldw	r22,52(sp)
   27274:	dd400c17 	ldw	r21,48(sp)
   27278:	dd000b17 	ldw	r20,44(sp)
   2727c:	dcc00a17 	ldw	r19,40(sp)
   27280:	dc800917 	ldw	r18,36(sp)
   27284:	dc400817 	ldw	r17,32(sp)
   27288:	dc000717 	ldw	r16,28(sp)
   2728c:	dec01104 	addi	sp,sp,68
   27290:	f800283a 	ret

00027294 <__pow5mult>:
   27294:	defffa04 	addi	sp,sp,-24
   27298:	dcc00315 	stw	r19,12(sp)
   2729c:	dc000015 	stw	r16,0(sp)
   272a0:	dfc00515 	stw	ra,20(sp)
   272a4:	dd000415 	stw	r20,16(sp)
   272a8:	dc800215 	stw	r18,8(sp)
   272ac:	dc400115 	stw	r17,4(sp)
   272b0:	308000cc 	andi	r2,r6,3
   272b4:	3021883a 	mov	r16,r6
   272b8:	2027883a 	mov	r19,r4
   272bc:	10002f1e 	bne	r2,zero,2737c <__pow5mult+0xe8>
   272c0:	2825883a 	mov	r18,r5
   272c4:	8021d0ba 	srai	r16,r16,2
   272c8:	80001a26 	beq	r16,zero,27334 <__pow5mult+0xa0>
   272cc:	9c401217 	ldw	r17,72(r19)
   272d0:	8800061e 	bne	r17,zero,272ec <__pow5mult+0x58>
   272d4:	00003406 	br	273a8 <__pow5mult+0x114>
   272d8:	8021d07a 	srai	r16,r16,1
   272dc:	80001526 	beq	r16,zero,27334 <__pow5mult+0xa0>
   272e0:	88800017 	ldw	r2,0(r17)
   272e4:	10001c26 	beq	r2,zero,27358 <__pow5mult+0xc4>
   272e8:	1023883a 	mov	r17,r2
   272ec:	8080004c 	andi	r2,r16,1
   272f0:	103ff926 	beq	r2,zero,272d8 <__alt_data_end+0xfffe72d8>
   272f4:	880d883a 	mov	r6,r17
   272f8:	900b883a 	mov	r5,r18
   272fc:	9809883a 	mov	r4,r19
   27300:	00270080 	call	27008 <__multiply>
   27304:	90001b26 	beq	r18,zero,27374 <__pow5mult+0xe0>
   27308:	91000117 	ldw	r4,4(r18)
   2730c:	98c01317 	ldw	r3,76(r19)
   27310:	8021d07a 	srai	r16,r16,1
   27314:	2109883a 	add	r4,r4,r4
   27318:	2109883a 	add	r4,r4,r4
   2731c:	1907883a 	add	r3,r3,r4
   27320:	19000017 	ldw	r4,0(r3)
   27324:	91000015 	stw	r4,0(r18)
   27328:	1c800015 	stw	r18,0(r3)
   2732c:	1025883a 	mov	r18,r2
   27330:	803feb1e 	bne	r16,zero,272e0 <__alt_data_end+0xfffe72e0>
   27334:	9005883a 	mov	r2,r18
   27338:	dfc00517 	ldw	ra,20(sp)
   2733c:	dd000417 	ldw	r20,16(sp)
   27340:	dcc00317 	ldw	r19,12(sp)
   27344:	dc800217 	ldw	r18,8(sp)
   27348:	dc400117 	ldw	r17,4(sp)
   2734c:	dc000017 	ldw	r16,0(sp)
   27350:	dec00604 	addi	sp,sp,24
   27354:	f800283a 	ret
   27358:	880d883a 	mov	r6,r17
   2735c:	880b883a 	mov	r5,r17
   27360:	9809883a 	mov	r4,r19
   27364:	00270080 	call	27008 <__multiply>
   27368:	88800015 	stw	r2,0(r17)
   2736c:	10000015 	stw	zero,0(r2)
   27370:	003fdd06 	br	272e8 <__alt_data_end+0xfffe72e8>
   27374:	1025883a 	mov	r18,r2
   27378:	003fd706 	br	272d8 <__alt_data_end+0xfffe72d8>
   2737c:	10bfffc4 	addi	r2,r2,-1
   27380:	1085883a 	add	r2,r2,r2
   27384:	00c000f4 	movhi	r3,3
   27388:	18c2da04 	addi	r3,r3,2920
   2738c:	1085883a 	add	r2,r2,r2
   27390:	1885883a 	add	r2,r3,r2
   27394:	11800017 	ldw	r6,0(r2)
   27398:	000f883a 	mov	r7,zero
   2739c:	0026c680 	call	26c68 <__multadd>
   273a0:	1025883a 	mov	r18,r2
   273a4:	003fc706 	br	272c4 <__alt_data_end+0xfffe72c4>
   273a8:	05000044 	movi	r20,1
   273ac:	a00b883a 	mov	r5,r20
   273b0:	9809883a 	mov	r4,r19
   273b4:	0026b980 	call	26b98 <_Balloc>
   273b8:	1023883a 	mov	r17,r2
   273bc:	00809c44 	movi	r2,625
   273c0:	88800515 	stw	r2,20(r17)
   273c4:	8d000415 	stw	r20,16(r17)
   273c8:	9c401215 	stw	r17,72(r19)
   273cc:	88000015 	stw	zero,0(r17)
   273d0:	003fc606 	br	272ec <__alt_data_end+0xfffe72ec>

000273d4 <__lshift>:
   273d4:	defff904 	addi	sp,sp,-28
   273d8:	dd400515 	stw	r21,20(sp)
   273dc:	dcc00315 	stw	r19,12(sp)
   273e0:	302bd17a 	srai	r21,r6,5
   273e4:	2cc00417 	ldw	r19,16(r5)
   273e8:	28800217 	ldw	r2,8(r5)
   273ec:	dd000415 	stw	r20,16(sp)
   273f0:	ace7883a 	add	r19,r21,r19
   273f4:	dc800215 	stw	r18,8(sp)
   273f8:	dc400115 	stw	r17,4(sp)
   273fc:	dc000015 	stw	r16,0(sp)
   27400:	dfc00615 	stw	ra,24(sp)
   27404:	9c000044 	addi	r16,r19,1
   27408:	2823883a 	mov	r17,r5
   2740c:	3029883a 	mov	r20,r6
   27410:	2025883a 	mov	r18,r4
   27414:	29400117 	ldw	r5,4(r5)
   27418:	1400030e 	bge	r2,r16,27428 <__lshift+0x54>
   2741c:	1085883a 	add	r2,r2,r2
   27420:	29400044 	addi	r5,r5,1
   27424:	143ffd16 	blt	r2,r16,2741c <__alt_data_end+0xfffe741c>
   27428:	9009883a 	mov	r4,r18
   2742c:	0026b980 	call	26b98 <_Balloc>
   27430:	10c00504 	addi	r3,r2,20
   27434:	0540070e 	bge	zero,r21,27454 <__lshift+0x80>
   27438:	ad6b883a 	add	r21,r21,r21
   2743c:	ad6b883a 	add	r21,r21,r21
   27440:	1809883a 	mov	r4,r3
   27444:	1d47883a 	add	r3,r3,r21
   27448:	20000015 	stw	zero,0(r4)
   2744c:	21000104 	addi	r4,r4,4
   27450:	193ffd1e 	bne	r3,r4,27448 <__alt_data_end+0xfffe7448>
   27454:	8a000417 	ldw	r8,16(r17)
   27458:	89000504 	addi	r4,r17,20
   2745c:	a18007cc 	andi	r6,r20,31
   27460:	4211883a 	add	r8,r8,r8
   27464:	4211883a 	add	r8,r8,r8
   27468:	2211883a 	add	r8,r4,r8
   2746c:	30002326 	beq	r6,zero,274fc <__lshift+0x128>
   27470:	02400804 	movi	r9,32
   27474:	4993c83a 	sub	r9,r9,r6
   27478:	000b883a 	mov	r5,zero
   2747c:	21c00017 	ldw	r7,0(r4)
   27480:	1815883a 	mov	r10,r3
   27484:	18c00104 	addi	r3,r3,4
   27488:	398e983a 	sll	r7,r7,r6
   2748c:	21000104 	addi	r4,r4,4
   27490:	394ab03a 	or	r5,r7,r5
   27494:	197fff15 	stw	r5,-4(r3)
   27498:	217fff17 	ldw	r5,-4(r4)
   2749c:	2a4ad83a 	srl	r5,r5,r9
   274a0:	223ff636 	bltu	r4,r8,2747c <__alt_data_end+0xfffe747c>
   274a4:	51400115 	stw	r5,4(r10)
   274a8:	28001a1e 	bne	r5,zero,27514 <__lshift+0x140>
   274ac:	843fffc4 	addi	r16,r16,-1
   274b0:	14000415 	stw	r16,16(r2)
   274b4:	88000826 	beq	r17,zero,274d8 <__lshift+0x104>
   274b8:	89000117 	ldw	r4,4(r17)
   274bc:	90c01317 	ldw	r3,76(r18)
   274c0:	2109883a 	add	r4,r4,r4
   274c4:	2109883a 	add	r4,r4,r4
   274c8:	1907883a 	add	r3,r3,r4
   274cc:	19000017 	ldw	r4,0(r3)
   274d0:	89000015 	stw	r4,0(r17)
   274d4:	1c400015 	stw	r17,0(r3)
   274d8:	dfc00617 	ldw	ra,24(sp)
   274dc:	dd400517 	ldw	r21,20(sp)
   274e0:	dd000417 	ldw	r20,16(sp)
   274e4:	dcc00317 	ldw	r19,12(sp)
   274e8:	dc800217 	ldw	r18,8(sp)
   274ec:	dc400117 	ldw	r17,4(sp)
   274f0:	dc000017 	ldw	r16,0(sp)
   274f4:	dec00704 	addi	sp,sp,28
   274f8:	f800283a 	ret
   274fc:	21400017 	ldw	r5,0(r4)
   27500:	18c00104 	addi	r3,r3,4
   27504:	21000104 	addi	r4,r4,4
   27508:	197fff15 	stw	r5,-4(r3)
   2750c:	223ffb36 	bltu	r4,r8,274fc <__alt_data_end+0xfffe74fc>
   27510:	003fe606 	br	274ac <__alt_data_end+0xfffe74ac>
   27514:	9c000084 	addi	r16,r19,2
   27518:	003fe406 	br	274ac <__alt_data_end+0xfffe74ac>

0002751c <__mcmp>:
   2751c:	20800417 	ldw	r2,16(r4)
   27520:	28c00417 	ldw	r3,16(r5)
   27524:	10c5c83a 	sub	r2,r2,r3
   27528:	1000111e 	bne	r2,zero,27570 <__mcmp+0x54>
   2752c:	18c7883a 	add	r3,r3,r3
   27530:	18c7883a 	add	r3,r3,r3
   27534:	21000504 	addi	r4,r4,20
   27538:	29400504 	addi	r5,r5,20
   2753c:	20c5883a 	add	r2,r4,r3
   27540:	28cb883a 	add	r5,r5,r3
   27544:	00000106 	br	2754c <__mcmp+0x30>
   27548:	20800a2e 	bgeu	r4,r2,27574 <__mcmp+0x58>
   2754c:	10bfff04 	addi	r2,r2,-4
   27550:	297fff04 	addi	r5,r5,-4
   27554:	11800017 	ldw	r6,0(r2)
   27558:	28c00017 	ldw	r3,0(r5)
   2755c:	30fffa26 	beq	r6,r3,27548 <__alt_data_end+0xfffe7548>
   27560:	30c00236 	bltu	r6,r3,2756c <__mcmp+0x50>
   27564:	00800044 	movi	r2,1
   27568:	f800283a 	ret
   2756c:	00bfffc4 	movi	r2,-1
   27570:	f800283a 	ret
   27574:	0005883a 	mov	r2,zero
   27578:	f800283a 	ret

0002757c <__mdiff>:
   2757c:	28c00417 	ldw	r3,16(r5)
   27580:	30800417 	ldw	r2,16(r6)
   27584:	defffa04 	addi	sp,sp,-24
   27588:	dcc00315 	stw	r19,12(sp)
   2758c:	dc800215 	stw	r18,8(sp)
   27590:	dfc00515 	stw	ra,20(sp)
   27594:	dd000415 	stw	r20,16(sp)
   27598:	dc400115 	stw	r17,4(sp)
   2759c:	dc000015 	stw	r16,0(sp)
   275a0:	1887c83a 	sub	r3,r3,r2
   275a4:	2825883a 	mov	r18,r5
   275a8:	3027883a 	mov	r19,r6
   275ac:	1800141e 	bne	r3,zero,27600 <__mdiff+0x84>
   275b0:	1085883a 	add	r2,r2,r2
   275b4:	1085883a 	add	r2,r2,r2
   275b8:	2a000504 	addi	r8,r5,20
   275bc:	34000504 	addi	r16,r6,20
   275c0:	4087883a 	add	r3,r8,r2
   275c4:	8085883a 	add	r2,r16,r2
   275c8:	00000106 	br	275d0 <__mdiff+0x54>
   275cc:	40c0592e 	bgeu	r8,r3,27734 <__mdiff+0x1b8>
   275d0:	18ffff04 	addi	r3,r3,-4
   275d4:	10bfff04 	addi	r2,r2,-4
   275d8:	19c00017 	ldw	r7,0(r3)
   275dc:	11400017 	ldw	r5,0(r2)
   275e0:	397ffa26 	beq	r7,r5,275cc <__alt_data_end+0xfffe75cc>
   275e4:	3940592e 	bgeu	r7,r5,2774c <__mdiff+0x1d0>
   275e8:	9005883a 	mov	r2,r18
   275ec:	4023883a 	mov	r17,r8
   275f0:	9825883a 	mov	r18,r19
   275f4:	05000044 	movi	r20,1
   275f8:	1027883a 	mov	r19,r2
   275fc:	00000406 	br	27610 <__mdiff+0x94>
   27600:	18005616 	blt	r3,zero,2775c <__mdiff+0x1e0>
   27604:	34400504 	addi	r17,r6,20
   27608:	2c000504 	addi	r16,r5,20
   2760c:	0029883a 	mov	r20,zero
   27610:	91400117 	ldw	r5,4(r18)
   27614:	0026b980 	call	26b98 <_Balloc>
   27618:	92400417 	ldw	r9,16(r18)
   2761c:	9b000417 	ldw	r12,16(r19)
   27620:	12c00504 	addi	r11,r2,20
   27624:	4a51883a 	add	r8,r9,r9
   27628:	6319883a 	add	r12,r12,r12
   2762c:	4211883a 	add	r8,r8,r8
   27630:	6319883a 	add	r12,r12,r12
   27634:	15000315 	stw	r20,12(r2)
   27638:	8211883a 	add	r8,r16,r8
   2763c:	8b19883a 	add	r12,r17,r12
   27640:	0007883a 	mov	r3,zero
   27644:	81400017 	ldw	r5,0(r16)
   27648:	89c00017 	ldw	r7,0(r17)
   2764c:	59800104 	addi	r6,r11,4
   27650:	293fffcc 	andi	r4,r5,65535
   27654:	20c7883a 	add	r3,r4,r3
   27658:	393fffcc 	andi	r4,r7,65535
   2765c:	1909c83a 	sub	r4,r3,r4
   27660:	280ad43a 	srli	r5,r5,16
   27664:	380ed43a 	srli	r7,r7,16
   27668:	2007d43a 	srai	r3,r4,16
   2766c:	213fffcc 	andi	r4,r4,65535
   27670:	29cbc83a 	sub	r5,r5,r7
   27674:	28c7883a 	add	r3,r5,r3
   27678:	180a943a 	slli	r5,r3,16
   2767c:	8c400104 	addi	r17,r17,4
   27680:	84000104 	addi	r16,r16,4
   27684:	2908b03a 	or	r4,r5,r4
   27688:	59000015 	stw	r4,0(r11)
   2768c:	1807d43a 	srai	r3,r3,16
   27690:	3015883a 	mov	r10,r6
   27694:	3017883a 	mov	r11,r6
   27698:	8b3fea36 	bltu	r17,r12,27644 <__alt_data_end+0xfffe7644>
   2769c:	8200162e 	bgeu	r16,r8,276f8 <__mdiff+0x17c>
   276a0:	8017883a 	mov	r11,r16
   276a4:	59400017 	ldw	r5,0(r11)
   276a8:	31800104 	addi	r6,r6,4
   276ac:	5ac00104 	addi	r11,r11,4
   276b0:	293fffcc 	andi	r4,r5,65535
   276b4:	20c7883a 	add	r3,r4,r3
   276b8:	280ed43a 	srli	r7,r5,16
   276bc:	180bd43a 	srai	r5,r3,16
   276c0:	193fffcc 	andi	r4,r3,65535
   276c4:	3947883a 	add	r3,r7,r5
   276c8:	180a943a 	slli	r5,r3,16
   276cc:	1807d43a 	srai	r3,r3,16
   276d0:	2908b03a 	or	r4,r5,r4
   276d4:	313fff15 	stw	r4,-4(r6)
   276d8:	5a3ff236 	bltu	r11,r8,276a4 <__alt_data_end+0xfffe76a4>
   276dc:	0406303a 	nor	r3,zero,r16
   276e0:	1a07883a 	add	r3,r3,r8
   276e4:	1806d0ba 	srli	r3,r3,2
   276e8:	18c00044 	addi	r3,r3,1
   276ec:	18c7883a 	add	r3,r3,r3
   276f0:	18c7883a 	add	r3,r3,r3
   276f4:	50d5883a 	add	r10,r10,r3
   276f8:	50ffff04 	addi	r3,r10,-4
   276fc:	2000041e 	bne	r4,zero,27710 <__mdiff+0x194>
   27700:	18ffff04 	addi	r3,r3,-4
   27704:	19000017 	ldw	r4,0(r3)
   27708:	4a7fffc4 	addi	r9,r9,-1
   2770c:	203ffc26 	beq	r4,zero,27700 <__alt_data_end+0xfffe7700>
   27710:	12400415 	stw	r9,16(r2)
   27714:	dfc00517 	ldw	ra,20(sp)
   27718:	dd000417 	ldw	r20,16(sp)
   2771c:	dcc00317 	ldw	r19,12(sp)
   27720:	dc800217 	ldw	r18,8(sp)
   27724:	dc400117 	ldw	r17,4(sp)
   27728:	dc000017 	ldw	r16,0(sp)
   2772c:	dec00604 	addi	sp,sp,24
   27730:	f800283a 	ret
   27734:	000b883a 	mov	r5,zero
   27738:	0026b980 	call	26b98 <_Balloc>
   2773c:	00c00044 	movi	r3,1
   27740:	10c00415 	stw	r3,16(r2)
   27744:	10000515 	stw	zero,20(r2)
   27748:	003ff206 	br	27714 <__alt_data_end+0xfffe7714>
   2774c:	8023883a 	mov	r17,r16
   27750:	0029883a 	mov	r20,zero
   27754:	4021883a 	mov	r16,r8
   27758:	003fad06 	br	27610 <__alt_data_end+0xfffe7610>
   2775c:	9005883a 	mov	r2,r18
   27760:	94400504 	addi	r17,r18,20
   27764:	9c000504 	addi	r16,r19,20
   27768:	9825883a 	mov	r18,r19
   2776c:	05000044 	movi	r20,1
   27770:	1027883a 	mov	r19,r2
   27774:	003fa606 	br	27610 <__alt_data_end+0xfffe7610>

00027778 <__ulp>:
   27778:	295ffc2c 	andhi	r5,r5,32752
   2777c:	00bf3034 	movhi	r2,64704
   27780:	2887883a 	add	r3,r5,r2
   27784:	00c0020e 	bge	zero,r3,27790 <__ulp+0x18>
   27788:	0005883a 	mov	r2,zero
   2778c:	f800283a 	ret
   27790:	00c7c83a 	sub	r3,zero,r3
   27794:	1807d53a 	srai	r3,r3,20
   27798:	008004c4 	movi	r2,19
   2779c:	10c00b0e 	bge	r2,r3,277cc <__ulp+0x54>
   277a0:	18bffb04 	addi	r2,r3,-20
   277a4:	01000784 	movi	r4,30
   277a8:	0007883a 	mov	r3,zero
   277ac:	20800516 	blt	r4,r2,277c4 <__ulp+0x4c>
   277b0:	010007c4 	movi	r4,31
   277b4:	2089c83a 	sub	r4,r4,r2
   277b8:	00800044 	movi	r2,1
   277bc:	1104983a 	sll	r2,r2,r4
   277c0:	f800283a 	ret
   277c4:	00800044 	movi	r2,1
   277c8:	f800283a 	ret
   277cc:	01400234 	movhi	r5,8
   277d0:	28c7d83a 	sra	r3,r5,r3
   277d4:	0005883a 	mov	r2,zero
   277d8:	f800283a 	ret

000277dc <__b2d>:
   277dc:	defffa04 	addi	sp,sp,-24
   277e0:	dc000015 	stw	r16,0(sp)
   277e4:	24000417 	ldw	r16,16(r4)
   277e8:	dc400115 	stw	r17,4(sp)
   277ec:	24400504 	addi	r17,r4,20
   277f0:	8421883a 	add	r16,r16,r16
   277f4:	8421883a 	add	r16,r16,r16
   277f8:	8c21883a 	add	r16,r17,r16
   277fc:	dc800215 	stw	r18,8(sp)
   27800:	84bfff17 	ldw	r18,-4(r16)
   27804:	dd000415 	stw	r20,16(sp)
   27808:	dcc00315 	stw	r19,12(sp)
   2780c:	9009883a 	mov	r4,r18
   27810:	2829883a 	mov	r20,r5
   27814:	dfc00515 	stw	ra,20(sp)
   27818:	0026eb40 	call	26eb4 <__hi0bits>
   2781c:	00c00804 	movi	r3,32
   27820:	1889c83a 	sub	r4,r3,r2
   27824:	a1000015 	stw	r4,0(r20)
   27828:	01000284 	movi	r4,10
   2782c:	84ffff04 	addi	r19,r16,-4
   27830:	20801216 	blt	r4,r2,2787c <__b2d+0xa0>
   27834:	018002c4 	movi	r6,11
   27838:	308dc83a 	sub	r6,r6,r2
   2783c:	9186d83a 	srl	r3,r18,r6
   27840:	18cffc34 	orhi	r3,r3,16368
   27844:	8cc0212e 	bgeu	r17,r19,278cc <__b2d+0xf0>
   27848:	813ffe17 	ldw	r4,-8(r16)
   2784c:	218cd83a 	srl	r6,r4,r6
   27850:	10800544 	addi	r2,r2,21
   27854:	9084983a 	sll	r2,r18,r2
   27858:	1184b03a 	or	r2,r2,r6
   2785c:	dfc00517 	ldw	ra,20(sp)
   27860:	dd000417 	ldw	r20,16(sp)
   27864:	dcc00317 	ldw	r19,12(sp)
   27868:	dc800217 	ldw	r18,8(sp)
   2786c:	dc400117 	ldw	r17,4(sp)
   27870:	dc000017 	ldw	r16,0(sp)
   27874:	dec00604 	addi	sp,sp,24
   27878:	f800283a 	ret
   2787c:	8cc00f2e 	bgeu	r17,r19,278bc <__b2d+0xe0>
   27880:	117ffd44 	addi	r5,r2,-11
   27884:	80bffe17 	ldw	r2,-8(r16)
   27888:	28000e26 	beq	r5,zero,278c4 <__b2d+0xe8>
   2788c:	1949c83a 	sub	r4,r3,r5
   27890:	9164983a 	sll	r18,r18,r5
   27894:	1106d83a 	srl	r3,r2,r4
   27898:	81bffe04 	addi	r6,r16,-8
   2789c:	948ffc34 	orhi	r18,r18,16368
   278a0:	90c6b03a 	or	r3,r18,r3
   278a4:	89800e2e 	bgeu	r17,r6,278e0 <__b2d+0x104>
   278a8:	81bffd17 	ldw	r6,-12(r16)
   278ac:	1144983a 	sll	r2,r2,r5
   278b0:	310ad83a 	srl	r5,r6,r4
   278b4:	2884b03a 	or	r2,r5,r2
   278b8:	003fe806 	br	2785c <__alt_data_end+0xfffe785c>
   278bc:	10bffd44 	addi	r2,r2,-11
   278c0:	1000041e 	bne	r2,zero,278d4 <__b2d+0xf8>
   278c4:	90cffc34 	orhi	r3,r18,16368
   278c8:	003fe406 	br	2785c <__alt_data_end+0xfffe785c>
   278cc:	000d883a 	mov	r6,zero
   278d0:	003fdf06 	br	27850 <__alt_data_end+0xfffe7850>
   278d4:	90a4983a 	sll	r18,r18,r2
   278d8:	0005883a 	mov	r2,zero
   278dc:	003ff906 	br	278c4 <__alt_data_end+0xfffe78c4>
   278e0:	1144983a 	sll	r2,r2,r5
   278e4:	003fdd06 	br	2785c <__alt_data_end+0xfffe785c>

000278e8 <__d2b>:
   278e8:	defff804 	addi	sp,sp,-32
   278ec:	dc000215 	stw	r16,8(sp)
   278f0:	3021883a 	mov	r16,r6
   278f4:	dc400315 	stw	r17,12(sp)
   278f8:	8022907a 	slli	r17,r16,1
   278fc:	dd000615 	stw	r20,24(sp)
   27900:	2829883a 	mov	r20,r5
   27904:	01400044 	movi	r5,1
   27908:	dcc00515 	stw	r19,20(sp)
   2790c:	dc800415 	stw	r18,16(sp)
   27910:	dfc00715 	stw	ra,28(sp)
   27914:	3825883a 	mov	r18,r7
   27918:	8822d57a 	srli	r17,r17,21
   2791c:	0026b980 	call	26b98 <_Balloc>
   27920:	1027883a 	mov	r19,r2
   27924:	00800434 	movhi	r2,16
   27928:	10bfffc4 	addi	r2,r2,-1
   2792c:	808c703a 	and	r6,r16,r2
   27930:	88000126 	beq	r17,zero,27938 <__d2b+0x50>
   27934:	31800434 	orhi	r6,r6,16
   27938:	d9800015 	stw	r6,0(sp)
   2793c:	a0002426 	beq	r20,zero,279d0 <__d2b+0xe8>
   27940:	d9000104 	addi	r4,sp,4
   27944:	dd000115 	stw	r20,4(sp)
   27948:	0026f1c0 	call	26f1c <__lo0bits>
   2794c:	d8c00017 	ldw	r3,0(sp)
   27950:	10002f1e 	bne	r2,zero,27a10 <__d2b+0x128>
   27954:	d9000117 	ldw	r4,4(sp)
   27958:	99000515 	stw	r4,20(r19)
   2795c:	1821003a 	cmpeq	r16,r3,zero
   27960:	01000084 	movi	r4,2
   27964:	2421c83a 	sub	r16,r4,r16
   27968:	98c00615 	stw	r3,24(r19)
   2796c:	9c000415 	stw	r16,16(r19)
   27970:	88001f1e 	bne	r17,zero,279f0 <__d2b+0x108>
   27974:	10bef384 	addi	r2,r2,-1074
   27978:	90800015 	stw	r2,0(r18)
   2797c:	00900034 	movhi	r2,16384
   27980:	10bfffc4 	addi	r2,r2,-1
   27984:	8085883a 	add	r2,r16,r2
   27988:	1085883a 	add	r2,r2,r2
   2798c:	1085883a 	add	r2,r2,r2
   27990:	9885883a 	add	r2,r19,r2
   27994:	11000517 	ldw	r4,20(r2)
   27998:	8020917a 	slli	r16,r16,5
   2799c:	0026eb40 	call	26eb4 <__hi0bits>
   279a0:	d8c00817 	ldw	r3,32(sp)
   279a4:	8085c83a 	sub	r2,r16,r2
   279a8:	18800015 	stw	r2,0(r3)
   279ac:	9805883a 	mov	r2,r19
   279b0:	dfc00717 	ldw	ra,28(sp)
   279b4:	dd000617 	ldw	r20,24(sp)
   279b8:	dcc00517 	ldw	r19,20(sp)
   279bc:	dc800417 	ldw	r18,16(sp)
   279c0:	dc400317 	ldw	r17,12(sp)
   279c4:	dc000217 	ldw	r16,8(sp)
   279c8:	dec00804 	addi	sp,sp,32
   279cc:	f800283a 	ret
   279d0:	d809883a 	mov	r4,sp
   279d4:	0026f1c0 	call	26f1c <__lo0bits>
   279d8:	d8c00017 	ldw	r3,0(sp)
   279dc:	04000044 	movi	r16,1
   279e0:	9c000415 	stw	r16,16(r19)
   279e4:	98c00515 	stw	r3,20(r19)
   279e8:	10800804 	addi	r2,r2,32
   279ec:	883fe126 	beq	r17,zero,27974 <__alt_data_end+0xfffe7974>
   279f0:	00c00d44 	movi	r3,53
   279f4:	8c7ef344 	addi	r17,r17,-1075
   279f8:	88a3883a 	add	r17,r17,r2
   279fc:	1885c83a 	sub	r2,r3,r2
   27a00:	d8c00817 	ldw	r3,32(sp)
   27a04:	94400015 	stw	r17,0(r18)
   27a08:	18800015 	stw	r2,0(r3)
   27a0c:	003fe706 	br	279ac <__alt_data_end+0xfffe79ac>
   27a10:	01000804 	movi	r4,32
   27a14:	2089c83a 	sub	r4,r4,r2
   27a18:	1908983a 	sll	r4,r3,r4
   27a1c:	d9400117 	ldw	r5,4(sp)
   27a20:	1886d83a 	srl	r3,r3,r2
   27a24:	2148b03a 	or	r4,r4,r5
   27a28:	99000515 	stw	r4,20(r19)
   27a2c:	d8c00015 	stw	r3,0(sp)
   27a30:	003fca06 	br	2795c <__alt_data_end+0xfffe795c>

00027a34 <__ratio>:
   27a34:	defff904 	addi	sp,sp,-28
   27a38:	dc400315 	stw	r17,12(sp)
   27a3c:	2823883a 	mov	r17,r5
   27a40:	d9400104 	addi	r5,sp,4
   27a44:	dfc00615 	stw	ra,24(sp)
   27a48:	dcc00515 	stw	r19,20(sp)
   27a4c:	dc800415 	stw	r18,16(sp)
   27a50:	2027883a 	mov	r19,r4
   27a54:	dc000215 	stw	r16,8(sp)
   27a58:	00277dc0 	call	277dc <__b2d>
   27a5c:	d80b883a 	mov	r5,sp
   27a60:	8809883a 	mov	r4,r17
   27a64:	1025883a 	mov	r18,r2
   27a68:	1821883a 	mov	r16,r3
   27a6c:	00277dc0 	call	277dc <__b2d>
   27a70:	8a000417 	ldw	r8,16(r17)
   27a74:	99000417 	ldw	r4,16(r19)
   27a78:	d9400117 	ldw	r5,4(sp)
   27a7c:	2209c83a 	sub	r4,r4,r8
   27a80:	2010917a 	slli	r8,r4,5
   27a84:	d9000017 	ldw	r4,0(sp)
   27a88:	2909c83a 	sub	r4,r5,r4
   27a8c:	4109883a 	add	r4,r8,r4
   27a90:	01000e0e 	bge	zero,r4,27acc <__ratio+0x98>
   27a94:	2008953a 	slli	r4,r4,20
   27a98:	2421883a 	add	r16,r4,r16
   27a9c:	100d883a 	mov	r6,r2
   27aa0:	180f883a 	mov	r7,r3
   27aa4:	9009883a 	mov	r4,r18
   27aa8:	800b883a 	mov	r5,r16
   27aac:	002b96c0 	call	2b96c <__divdf3>
   27ab0:	dfc00617 	ldw	ra,24(sp)
   27ab4:	dcc00517 	ldw	r19,20(sp)
   27ab8:	dc800417 	ldw	r18,16(sp)
   27abc:	dc400317 	ldw	r17,12(sp)
   27ac0:	dc000217 	ldw	r16,8(sp)
   27ac4:	dec00704 	addi	sp,sp,28
   27ac8:	f800283a 	ret
   27acc:	2008953a 	slli	r4,r4,20
   27ad0:	1907c83a 	sub	r3,r3,r4
   27ad4:	003ff106 	br	27a9c <__alt_data_end+0xfffe7a9c>

00027ad8 <_mprec_log10>:
   27ad8:	defffe04 	addi	sp,sp,-8
   27adc:	dc000015 	stw	r16,0(sp)
   27ae0:	dfc00115 	stw	ra,4(sp)
   27ae4:	008005c4 	movi	r2,23
   27ae8:	2021883a 	mov	r16,r4
   27aec:	11000d0e 	bge	r2,r4,27b24 <_mprec_log10+0x4c>
   27af0:	0005883a 	mov	r2,zero
   27af4:	00cffc34 	movhi	r3,16368
   27af8:	843fffc4 	addi	r16,r16,-1
   27afc:	000d883a 	mov	r6,zero
   27b00:	01d00934 	movhi	r7,16420
   27b04:	1009883a 	mov	r4,r2
   27b08:	180b883a 	mov	r5,r3
   27b0c:	002c5940 	call	2c594 <__muldf3>
   27b10:	803ff91e 	bne	r16,zero,27af8 <__alt_data_end+0xfffe7af8>
   27b14:	dfc00117 	ldw	ra,4(sp)
   27b18:	dc000017 	ldw	r16,0(sp)
   27b1c:	dec00204 	addi	sp,sp,8
   27b20:	f800283a 	ret
   27b24:	202090fa 	slli	r16,r4,3
   27b28:	008000f4 	movhi	r2,3
   27b2c:	1082f104 	addi	r2,r2,3012
   27b30:	1421883a 	add	r16,r2,r16
   27b34:	80800017 	ldw	r2,0(r16)
   27b38:	80c00117 	ldw	r3,4(r16)
   27b3c:	dfc00117 	ldw	ra,4(sp)
   27b40:	dc000017 	ldw	r16,0(sp)
   27b44:	dec00204 	addi	sp,sp,8
   27b48:	f800283a 	ret

00027b4c <__copybits>:
   27b4c:	297fffc4 	addi	r5,r5,-1
   27b50:	280fd17a 	srai	r7,r5,5
   27b54:	30c00417 	ldw	r3,16(r6)
   27b58:	30800504 	addi	r2,r6,20
   27b5c:	39c00044 	addi	r7,r7,1
   27b60:	18c7883a 	add	r3,r3,r3
   27b64:	39cf883a 	add	r7,r7,r7
   27b68:	18c7883a 	add	r3,r3,r3
   27b6c:	39cf883a 	add	r7,r7,r7
   27b70:	10c7883a 	add	r3,r2,r3
   27b74:	21cf883a 	add	r7,r4,r7
   27b78:	10c00d2e 	bgeu	r2,r3,27bb0 <__copybits+0x64>
   27b7c:	200b883a 	mov	r5,r4
   27b80:	12000017 	ldw	r8,0(r2)
   27b84:	29400104 	addi	r5,r5,4
   27b88:	10800104 	addi	r2,r2,4
   27b8c:	2a3fff15 	stw	r8,-4(r5)
   27b90:	10fffb36 	bltu	r2,r3,27b80 <__alt_data_end+0xfffe7b80>
   27b94:	1985c83a 	sub	r2,r3,r6
   27b98:	10bffac4 	addi	r2,r2,-21
   27b9c:	1004d0ba 	srli	r2,r2,2
   27ba0:	10800044 	addi	r2,r2,1
   27ba4:	1085883a 	add	r2,r2,r2
   27ba8:	1085883a 	add	r2,r2,r2
   27bac:	2089883a 	add	r4,r4,r2
   27bb0:	21c0032e 	bgeu	r4,r7,27bc0 <__copybits+0x74>
   27bb4:	20000015 	stw	zero,0(r4)
   27bb8:	21000104 	addi	r4,r4,4
   27bbc:	21fffd36 	bltu	r4,r7,27bb4 <__alt_data_end+0xfffe7bb4>
   27bc0:	f800283a 	ret

00027bc4 <__any_on>:
   27bc4:	20c00417 	ldw	r3,16(r4)
   27bc8:	2805d17a 	srai	r2,r5,5
   27bcc:	21000504 	addi	r4,r4,20
   27bd0:	18800d0e 	bge	r3,r2,27c08 <__any_on+0x44>
   27bd4:	18c7883a 	add	r3,r3,r3
   27bd8:	18c7883a 	add	r3,r3,r3
   27bdc:	20c7883a 	add	r3,r4,r3
   27be0:	20c0192e 	bgeu	r4,r3,27c48 <__any_on+0x84>
   27be4:	18bfff17 	ldw	r2,-4(r3)
   27be8:	18ffff04 	addi	r3,r3,-4
   27bec:	1000041e 	bne	r2,zero,27c00 <__any_on+0x3c>
   27bf0:	20c0142e 	bgeu	r4,r3,27c44 <__any_on+0x80>
   27bf4:	18ffff04 	addi	r3,r3,-4
   27bf8:	19400017 	ldw	r5,0(r3)
   27bfc:	283ffc26 	beq	r5,zero,27bf0 <__alt_data_end+0xfffe7bf0>
   27c00:	00800044 	movi	r2,1
   27c04:	f800283a 	ret
   27c08:	10c00a0e 	bge	r2,r3,27c34 <__any_on+0x70>
   27c0c:	1085883a 	add	r2,r2,r2
   27c10:	1085883a 	add	r2,r2,r2
   27c14:	294007cc 	andi	r5,r5,31
   27c18:	2087883a 	add	r3,r4,r2
   27c1c:	283ff026 	beq	r5,zero,27be0 <__alt_data_end+0xfffe7be0>
   27c20:	19800017 	ldw	r6,0(r3)
   27c24:	3144d83a 	srl	r2,r6,r5
   27c28:	114a983a 	sll	r5,r2,r5
   27c2c:	317ff41e 	bne	r6,r5,27c00 <__alt_data_end+0xfffe7c00>
   27c30:	003feb06 	br	27be0 <__alt_data_end+0xfffe7be0>
   27c34:	1085883a 	add	r2,r2,r2
   27c38:	1085883a 	add	r2,r2,r2
   27c3c:	2087883a 	add	r3,r4,r2
   27c40:	003fe706 	br	27be0 <__alt_data_end+0xfffe7be0>
   27c44:	f800283a 	ret
   27c48:	0005883a 	mov	r2,zero
   27c4c:	f800283a 	ret

00027c50 <_realloc_r>:
   27c50:	defff604 	addi	sp,sp,-40
   27c54:	dc800215 	stw	r18,8(sp)
   27c58:	dfc00915 	stw	ra,36(sp)
   27c5c:	df000815 	stw	fp,32(sp)
   27c60:	ddc00715 	stw	r23,28(sp)
   27c64:	dd800615 	stw	r22,24(sp)
   27c68:	dd400515 	stw	r21,20(sp)
   27c6c:	dd000415 	stw	r20,16(sp)
   27c70:	dcc00315 	stw	r19,12(sp)
   27c74:	dc400115 	stw	r17,4(sp)
   27c78:	dc000015 	stw	r16,0(sp)
   27c7c:	3025883a 	mov	r18,r6
   27c80:	2800b726 	beq	r5,zero,27f60 <_realloc_r+0x310>
   27c84:	282b883a 	mov	r21,r5
   27c88:	2029883a 	mov	r20,r4
   27c8c:	002e1a00 	call	2e1a0 <__malloc_lock>
   27c90:	a8bfff17 	ldw	r2,-4(r21)
   27c94:	043fff04 	movi	r16,-4
   27c98:	90c002c4 	addi	r3,r18,11
   27c9c:	01000584 	movi	r4,22
   27ca0:	acfffe04 	addi	r19,r21,-8
   27ca4:	1420703a 	and	r16,r2,r16
   27ca8:	20c0332e 	bgeu	r4,r3,27d78 <_realloc_r+0x128>
   27cac:	047ffe04 	movi	r17,-8
   27cb0:	1c62703a 	and	r17,r3,r17
   27cb4:	8807883a 	mov	r3,r17
   27cb8:	88005816 	blt	r17,zero,27e1c <_realloc_r+0x1cc>
   27cbc:	8c805736 	bltu	r17,r18,27e1c <_realloc_r+0x1cc>
   27cc0:	80c0300e 	bge	r16,r3,27d84 <_realloc_r+0x134>
   27cc4:	070000f4 	movhi	fp,3
   27cc8:	e704a304 	addi	fp,fp,4748
   27ccc:	e1c00217 	ldw	r7,8(fp)
   27cd0:	9c09883a 	add	r4,r19,r16
   27cd4:	22000117 	ldw	r8,4(r4)
   27cd8:	21c06326 	beq	r4,r7,27e68 <_realloc_r+0x218>
   27cdc:	017fff84 	movi	r5,-2
   27ce0:	414a703a 	and	r5,r8,r5
   27ce4:	214b883a 	add	r5,r4,r5
   27ce8:	29800117 	ldw	r6,4(r5)
   27cec:	3180004c 	andi	r6,r6,1
   27cf0:	30003f26 	beq	r6,zero,27df0 <_realloc_r+0x1a0>
   27cf4:	1080004c 	andi	r2,r2,1
   27cf8:	10008326 	beq	r2,zero,27f08 <_realloc_r+0x2b8>
   27cfc:	900b883a 	mov	r5,r18
   27d00:	a009883a 	mov	r4,r20
   27d04:	0025edc0 	call	25edc <_malloc_r>
   27d08:	1025883a 	mov	r18,r2
   27d0c:	10011e26 	beq	r2,zero,28188 <_realloc_r+0x538>
   27d10:	a93fff17 	ldw	r4,-4(r21)
   27d14:	10fffe04 	addi	r3,r2,-8
   27d18:	00bfff84 	movi	r2,-2
   27d1c:	2084703a 	and	r2,r4,r2
   27d20:	9885883a 	add	r2,r19,r2
   27d24:	1880ee26 	beq	r3,r2,280e0 <_realloc_r+0x490>
   27d28:	81bfff04 	addi	r6,r16,-4
   27d2c:	00800904 	movi	r2,36
   27d30:	1180b836 	bltu	r2,r6,28014 <_realloc_r+0x3c4>
   27d34:	00c004c4 	movi	r3,19
   27d38:	19809636 	bltu	r3,r6,27f94 <_realloc_r+0x344>
   27d3c:	9005883a 	mov	r2,r18
   27d40:	a807883a 	mov	r3,r21
   27d44:	19000017 	ldw	r4,0(r3)
   27d48:	11000015 	stw	r4,0(r2)
   27d4c:	19000117 	ldw	r4,4(r3)
   27d50:	11000115 	stw	r4,4(r2)
   27d54:	18c00217 	ldw	r3,8(r3)
   27d58:	10c00215 	stw	r3,8(r2)
   27d5c:	a80b883a 	mov	r5,r21
   27d60:	a009883a 	mov	r4,r20
   27d64:	00252e40 	call	252e4 <_free_r>
   27d68:	a009883a 	mov	r4,r20
   27d6c:	002e1c40 	call	2e1c4 <__malloc_unlock>
   27d70:	9005883a 	mov	r2,r18
   27d74:	00001206 	br	27dc0 <_realloc_r+0x170>
   27d78:	00c00404 	movi	r3,16
   27d7c:	1823883a 	mov	r17,r3
   27d80:	003fce06 	br	27cbc <__alt_data_end+0xfffe7cbc>
   27d84:	a825883a 	mov	r18,r21
   27d88:	8445c83a 	sub	r2,r16,r17
   27d8c:	00c003c4 	movi	r3,15
   27d90:	18802636 	bltu	r3,r2,27e2c <_realloc_r+0x1dc>
   27d94:	99800117 	ldw	r6,4(r19)
   27d98:	9c07883a 	add	r3,r19,r16
   27d9c:	3180004c 	andi	r6,r6,1
   27da0:	3420b03a 	or	r16,r6,r16
   27da4:	9c000115 	stw	r16,4(r19)
   27da8:	18800117 	ldw	r2,4(r3)
   27dac:	10800054 	ori	r2,r2,1
   27db0:	18800115 	stw	r2,4(r3)
   27db4:	a009883a 	mov	r4,r20
   27db8:	002e1c40 	call	2e1c4 <__malloc_unlock>
   27dbc:	9005883a 	mov	r2,r18
   27dc0:	dfc00917 	ldw	ra,36(sp)
   27dc4:	df000817 	ldw	fp,32(sp)
   27dc8:	ddc00717 	ldw	r23,28(sp)
   27dcc:	dd800617 	ldw	r22,24(sp)
   27dd0:	dd400517 	ldw	r21,20(sp)
   27dd4:	dd000417 	ldw	r20,16(sp)
   27dd8:	dcc00317 	ldw	r19,12(sp)
   27ddc:	dc800217 	ldw	r18,8(sp)
   27de0:	dc400117 	ldw	r17,4(sp)
   27de4:	dc000017 	ldw	r16,0(sp)
   27de8:	dec00a04 	addi	sp,sp,40
   27dec:	f800283a 	ret
   27df0:	017fff04 	movi	r5,-4
   27df4:	414a703a 	and	r5,r8,r5
   27df8:	814d883a 	add	r6,r16,r5
   27dfc:	30c01f16 	blt	r6,r3,27e7c <_realloc_r+0x22c>
   27e00:	20800317 	ldw	r2,12(r4)
   27e04:	20c00217 	ldw	r3,8(r4)
   27e08:	a825883a 	mov	r18,r21
   27e0c:	3021883a 	mov	r16,r6
   27e10:	18800315 	stw	r2,12(r3)
   27e14:	10c00215 	stw	r3,8(r2)
   27e18:	003fdb06 	br	27d88 <__alt_data_end+0xfffe7d88>
   27e1c:	00800304 	movi	r2,12
   27e20:	a0800015 	stw	r2,0(r20)
   27e24:	0005883a 	mov	r2,zero
   27e28:	003fe506 	br	27dc0 <__alt_data_end+0xfffe7dc0>
   27e2c:	98c00117 	ldw	r3,4(r19)
   27e30:	9c4b883a 	add	r5,r19,r17
   27e34:	11000054 	ori	r4,r2,1
   27e38:	18c0004c 	andi	r3,r3,1
   27e3c:	1c62b03a 	or	r17,r3,r17
   27e40:	9c400115 	stw	r17,4(r19)
   27e44:	29000115 	stw	r4,4(r5)
   27e48:	2885883a 	add	r2,r5,r2
   27e4c:	10c00117 	ldw	r3,4(r2)
   27e50:	29400204 	addi	r5,r5,8
   27e54:	a009883a 	mov	r4,r20
   27e58:	18c00054 	ori	r3,r3,1
   27e5c:	10c00115 	stw	r3,4(r2)
   27e60:	00252e40 	call	252e4 <_free_r>
   27e64:	003fd306 	br	27db4 <__alt_data_end+0xfffe7db4>
   27e68:	017fff04 	movi	r5,-4
   27e6c:	414a703a 	and	r5,r8,r5
   27e70:	89800404 	addi	r6,r17,16
   27e74:	8151883a 	add	r8,r16,r5
   27e78:	4180590e 	bge	r8,r6,27fe0 <_realloc_r+0x390>
   27e7c:	1080004c 	andi	r2,r2,1
   27e80:	103f9e1e 	bne	r2,zero,27cfc <__alt_data_end+0xfffe7cfc>
   27e84:	adbffe17 	ldw	r22,-8(r21)
   27e88:	00bfff04 	movi	r2,-4
   27e8c:	9dadc83a 	sub	r22,r19,r22
   27e90:	b1800117 	ldw	r6,4(r22)
   27e94:	3084703a 	and	r2,r6,r2
   27e98:	20002026 	beq	r4,zero,27f1c <_realloc_r+0x2cc>
   27e9c:	80af883a 	add	r23,r16,r2
   27ea0:	b96f883a 	add	r23,r23,r5
   27ea4:	21c05f26 	beq	r4,r7,28024 <_realloc_r+0x3d4>
   27ea8:	b8c01c16 	blt	r23,r3,27f1c <_realloc_r+0x2cc>
   27eac:	20800317 	ldw	r2,12(r4)
   27eb0:	20c00217 	ldw	r3,8(r4)
   27eb4:	81bfff04 	addi	r6,r16,-4
   27eb8:	01000904 	movi	r4,36
   27ebc:	18800315 	stw	r2,12(r3)
   27ec0:	10c00215 	stw	r3,8(r2)
   27ec4:	b0c00217 	ldw	r3,8(r22)
   27ec8:	b0800317 	ldw	r2,12(r22)
   27ecc:	b4800204 	addi	r18,r22,8
   27ed0:	18800315 	stw	r2,12(r3)
   27ed4:	10c00215 	stw	r3,8(r2)
   27ed8:	21801b36 	bltu	r4,r6,27f48 <_realloc_r+0x2f8>
   27edc:	008004c4 	movi	r2,19
   27ee0:	1180352e 	bgeu	r2,r6,27fb8 <_realloc_r+0x368>
   27ee4:	a8800017 	ldw	r2,0(r21)
   27ee8:	b0800215 	stw	r2,8(r22)
   27eec:	a8800117 	ldw	r2,4(r21)
   27ef0:	b0800315 	stw	r2,12(r22)
   27ef4:	008006c4 	movi	r2,27
   27ef8:	11807f36 	bltu	r2,r6,280f8 <_realloc_r+0x4a8>
   27efc:	b0800404 	addi	r2,r22,16
   27f00:	ad400204 	addi	r21,r21,8
   27f04:	00002d06 	br	27fbc <_realloc_r+0x36c>
   27f08:	adbffe17 	ldw	r22,-8(r21)
   27f0c:	00bfff04 	movi	r2,-4
   27f10:	9dadc83a 	sub	r22,r19,r22
   27f14:	b1000117 	ldw	r4,4(r22)
   27f18:	2084703a 	and	r2,r4,r2
   27f1c:	b03f7726 	beq	r22,zero,27cfc <__alt_data_end+0xfffe7cfc>
   27f20:	80af883a 	add	r23,r16,r2
   27f24:	b8ff7516 	blt	r23,r3,27cfc <__alt_data_end+0xfffe7cfc>
   27f28:	b0800317 	ldw	r2,12(r22)
   27f2c:	b0c00217 	ldw	r3,8(r22)
   27f30:	81bfff04 	addi	r6,r16,-4
   27f34:	01000904 	movi	r4,36
   27f38:	18800315 	stw	r2,12(r3)
   27f3c:	10c00215 	stw	r3,8(r2)
   27f40:	b4800204 	addi	r18,r22,8
   27f44:	21bfe52e 	bgeu	r4,r6,27edc <__alt_data_end+0xfffe7edc>
   27f48:	a80b883a 	mov	r5,r21
   27f4c:	9009883a 	mov	r4,r18
   27f50:	00269140 	call	26914 <memmove>
   27f54:	b821883a 	mov	r16,r23
   27f58:	b027883a 	mov	r19,r22
   27f5c:	003f8a06 	br	27d88 <__alt_data_end+0xfffe7d88>
   27f60:	300b883a 	mov	r5,r6
   27f64:	dfc00917 	ldw	ra,36(sp)
   27f68:	df000817 	ldw	fp,32(sp)
   27f6c:	ddc00717 	ldw	r23,28(sp)
   27f70:	dd800617 	ldw	r22,24(sp)
   27f74:	dd400517 	ldw	r21,20(sp)
   27f78:	dd000417 	ldw	r20,16(sp)
   27f7c:	dcc00317 	ldw	r19,12(sp)
   27f80:	dc800217 	ldw	r18,8(sp)
   27f84:	dc400117 	ldw	r17,4(sp)
   27f88:	dc000017 	ldw	r16,0(sp)
   27f8c:	dec00a04 	addi	sp,sp,40
   27f90:	0025edc1 	jmpi	25edc <_malloc_r>
   27f94:	a8c00017 	ldw	r3,0(r21)
   27f98:	90c00015 	stw	r3,0(r18)
   27f9c:	a8c00117 	ldw	r3,4(r21)
   27fa0:	90c00115 	stw	r3,4(r18)
   27fa4:	00c006c4 	movi	r3,27
   27fa8:	19804536 	bltu	r3,r6,280c0 <_realloc_r+0x470>
   27fac:	90800204 	addi	r2,r18,8
   27fb0:	a8c00204 	addi	r3,r21,8
   27fb4:	003f6306 	br	27d44 <__alt_data_end+0xfffe7d44>
   27fb8:	9005883a 	mov	r2,r18
   27fbc:	a8c00017 	ldw	r3,0(r21)
   27fc0:	b821883a 	mov	r16,r23
   27fc4:	b027883a 	mov	r19,r22
   27fc8:	10c00015 	stw	r3,0(r2)
   27fcc:	a8c00117 	ldw	r3,4(r21)
   27fd0:	10c00115 	stw	r3,4(r2)
   27fd4:	a8c00217 	ldw	r3,8(r21)
   27fd8:	10c00215 	stw	r3,8(r2)
   27fdc:	003f6a06 	br	27d88 <__alt_data_end+0xfffe7d88>
   27fe0:	9c67883a 	add	r19,r19,r17
   27fe4:	4445c83a 	sub	r2,r8,r17
   27fe8:	e4c00215 	stw	r19,8(fp)
   27fec:	10800054 	ori	r2,r2,1
   27ff0:	98800115 	stw	r2,4(r19)
   27ff4:	a8bfff17 	ldw	r2,-4(r21)
   27ff8:	a009883a 	mov	r4,r20
   27ffc:	1080004c 	andi	r2,r2,1
   28000:	1462b03a 	or	r17,r2,r17
   28004:	ac7fff15 	stw	r17,-4(r21)
   28008:	002e1c40 	call	2e1c4 <__malloc_unlock>
   2800c:	a805883a 	mov	r2,r21
   28010:	003f6b06 	br	27dc0 <__alt_data_end+0xfffe7dc0>
   28014:	a80b883a 	mov	r5,r21
   28018:	9009883a 	mov	r4,r18
   2801c:	00269140 	call	26914 <memmove>
   28020:	003f4e06 	br	27d5c <__alt_data_end+0xfffe7d5c>
   28024:	89000404 	addi	r4,r17,16
   28028:	b93fbc16 	blt	r23,r4,27f1c <__alt_data_end+0xfffe7f1c>
   2802c:	b0800317 	ldw	r2,12(r22)
   28030:	b0c00217 	ldw	r3,8(r22)
   28034:	81bfff04 	addi	r6,r16,-4
   28038:	01000904 	movi	r4,36
   2803c:	18800315 	stw	r2,12(r3)
   28040:	10c00215 	stw	r3,8(r2)
   28044:	b4800204 	addi	r18,r22,8
   28048:	21804336 	bltu	r4,r6,28158 <_realloc_r+0x508>
   2804c:	008004c4 	movi	r2,19
   28050:	11803f2e 	bgeu	r2,r6,28150 <_realloc_r+0x500>
   28054:	a8800017 	ldw	r2,0(r21)
   28058:	b0800215 	stw	r2,8(r22)
   2805c:	a8800117 	ldw	r2,4(r21)
   28060:	b0800315 	stw	r2,12(r22)
   28064:	008006c4 	movi	r2,27
   28068:	11803f36 	bltu	r2,r6,28168 <_realloc_r+0x518>
   2806c:	b0800404 	addi	r2,r22,16
   28070:	ad400204 	addi	r21,r21,8
   28074:	a8c00017 	ldw	r3,0(r21)
   28078:	10c00015 	stw	r3,0(r2)
   2807c:	a8c00117 	ldw	r3,4(r21)
   28080:	10c00115 	stw	r3,4(r2)
   28084:	a8c00217 	ldw	r3,8(r21)
   28088:	10c00215 	stw	r3,8(r2)
   2808c:	b447883a 	add	r3,r22,r17
   28090:	bc45c83a 	sub	r2,r23,r17
   28094:	e0c00215 	stw	r3,8(fp)
   28098:	10800054 	ori	r2,r2,1
   2809c:	18800115 	stw	r2,4(r3)
   280a0:	b0800117 	ldw	r2,4(r22)
   280a4:	a009883a 	mov	r4,r20
   280a8:	1080004c 	andi	r2,r2,1
   280ac:	1462b03a 	or	r17,r2,r17
   280b0:	b4400115 	stw	r17,4(r22)
   280b4:	002e1c40 	call	2e1c4 <__malloc_unlock>
   280b8:	9005883a 	mov	r2,r18
   280bc:	003f4006 	br	27dc0 <__alt_data_end+0xfffe7dc0>
   280c0:	a8c00217 	ldw	r3,8(r21)
   280c4:	90c00215 	stw	r3,8(r18)
   280c8:	a8c00317 	ldw	r3,12(r21)
   280cc:	90c00315 	stw	r3,12(r18)
   280d0:	30801126 	beq	r6,r2,28118 <_realloc_r+0x4c8>
   280d4:	90800404 	addi	r2,r18,16
   280d8:	a8c00404 	addi	r3,r21,16
   280dc:	003f1906 	br	27d44 <__alt_data_end+0xfffe7d44>
   280e0:	90ffff17 	ldw	r3,-4(r18)
   280e4:	00bfff04 	movi	r2,-4
   280e8:	a825883a 	mov	r18,r21
   280ec:	1884703a 	and	r2,r3,r2
   280f0:	80a1883a 	add	r16,r16,r2
   280f4:	003f2406 	br	27d88 <__alt_data_end+0xfffe7d88>
   280f8:	a8800217 	ldw	r2,8(r21)
   280fc:	b0800415 	stw	r2,16(r22)
   28100:	a8800317 	ldw	r2,12(r21)
   28104:	b0800515 	stw	r2,20(r22)
   28108:	31000a26 	beq	r6,r4,28134 <_realloc_r+0x4e4>
   2810c:	b0800604 	addi	r2,r22,24
   28110:	ad400404 	addi	r21,r21,16
   28114:	003fa906 	br	27fbc <__alt_data_end+0xfffe7fbc>
   28118:	a9000417 	ldw	r4,16(r21)
   2811c:	90800604 	addi	r2,r18,24
   28120:	a8c00604 	addi	r3,r21,24
   28124:	91000415 	stw	r4,16(r18)
   28128:	a9000517 	ldw	r4,20(r21)
   2812c:	91000515 	stw	r4,20(r18)
   28130:	003f0406 	br	27d44 <__alt_data_end+0xfffe7d44>
   28134:	a8c00417 	ldw	r3,16(r21)
   28138:	ad400604 	addi	r21,r21,24
   2813c:	b0800804 	addi	r2,r22,32
   28140:	b0c00615 	stw	r3,24(r22)
   28144:	a8ffff17 	ldw	r3,-4(r21)
   28148:	b0c00715 	stw	r3,28(r22)
   2814c:	003f9b06 	br	27fbc <__alt_data_end+0xfffe7fbc>
   28150:	9005883a 	mov	r2,r18
   28154:	003fc706 	br	28074 <__alt_data_end+0xfffe8074>
   28158:	a80b883a 	mov	r5,r21
   2815c:	9009883a 	mov	r4,r18
   28160:	00269140 	call	26914 <memmove>
   28164:	003fc906 	br	2808c <__alt_data_end+0xfffe808c>
   28168:	a8800217 	ldw	r2,8(r21)
   2816c:	b0800415 	stw	r2,16(r22)
   28170:	a8800317 	ldw	r2,12(r21)
   28174:	b0800515 	stw	r2,20(r22)
   28178:	31000726 	beq	r6,r4,28198 <_realloc_r+0x548>
   2817c:	b0800604 	addi	r2,r22,24
   28180:	ad400404 	addi	r21,r21,16
   28184:	003fbb06 	br	28074 <__alt_data_end+0xfffe8074>
   28188:	a009883a 	mov	r4,r20
   2818c:	002e1c40 	call	2e1c4 <__malloc_unlock>
   28190:	0005883a 	mov	r2,zero
   28194:	003f0a06 	br	27dc0 <__alt_data_end+0xfffe7dc0>
   28198:	a8c00417 	ldw	r3,16(r21)
   2819c:	ad400604 	addi	r21,r21,24
   281a0:	b0800804 	addi	r2,r22,32
   281a4:	b0c00615 	stw	r3,24(r22)
   281a8:	a8ffff17 	ldw	r3,-4(r21)
   281ac:	b0c00715 	stw	r3,28(r22)
   281b0:	003fb006 	br	28074 <__alt_data_end+0xfffe8074>

000281b4 <__fpclassifyd>:
   281b4:	00a00034 	movhi	r2,32768
   281b8:	10bfffc4 	addi	r2,r2,-1
   281bc:	2884703a 	and	r2,r5,r2
   281c0:	10000726 	beq	r2,zero,281e0 <__fpclassifyd+0x2c>
   281c4:	00fffc34 	movhi	r3,65520
   281c8:	019ff834 	movhi	r6,32736
   281cc:	28c7883a 	add	r3,r5,r3
   281d0:	31bfffc4 	addi	r6,r6,-1
   281d4:	30c00536 	bltu	r6,r3,281ec <__fpclassifyd+0x38>
   281d8:	00800104 	movi	r2,4
   281dc:	f800283a 	ret
   281e0:	2000021e 	bne	r4,zero,281ec <__fpclassifyd+0x38>
   281e4:	00800084 	movi	r2,2
   281e8:	f800283a 	ret
   281ec:	00dffc34 	movhi	r3,32752
   281f0:	019ff834 	movhi	r6,32736
   281f4:	28cb883a 	add	r5,r5,r3
   281f8:	31bfffc4 	addi	r6,r6,-1
   281fc:	317ff62e 	bgeu	r6,r5,281d8 <__alt_data_end+0xfffe81d8>
   28200:	01400434 	movhi	r5,16
   28204:	297fffc4 	addi	r5,r5,-1
   28208:	28800236 	bltu	r5,r2,28214 <__fpclassifyd+0x60>
   2820c:	008000c4 	movi	r2,3
   28210:	f800283a 	ret
   28214:	10c00226 	beq	r2,r3,28220 <__fpclassifyd+0x6c>
   28218:	0005883a 	mov	r2,zero
   2821c:	f800283a 	ret
   28220:	2005003a 	cmpeq	r2,r4,zero
   28224:	f800283a 	ret

00028228 <_sbrk_r>:
   28228:	defffd04 	addi	sp,sp,-12
   2822c:	dc000015 	stw	r16,0(sp)
   28230:	040000f4 	movhi	r16,3
   28234:	dc400115 	stw	r17,4(sp)
   28238:	8411c004 	addi	r16,r16,18176
   2823c:	2023883a 	mov	r17,r4
   28240:	2809883a 	mov	r4,r5
   28244:	dfc00215 	stw	ra,8(sp)
   28248:	80000015 	stw	zero,0(r16)
   2824c:	002e3ac0 	call	2e3ac <sbrk>
   28250:	00ffffc4 	movi	r3,-1
   28254:	10c00526 	beq	r2,r3,2826c <_sbrk_r+0x44>
   28258:	dfc00217 	ldw	ra,8(sp)
   2825c:	dc400117 	ldw	r17,4(sp)
   28260:	dc000017 	ldw	r16,0(sp)
   28264:	dec00304 	addi	sp,sp,12
   28268:	f800283a 	ret
   2826c:	80c00017 	ldw	r3,0(r16)
   28270:	183ff926 	beq	r3,zero,28258 <__alt_data_end+0xfffe8258>
   28274:	88c00015 	stw	r3,0(r17)
   28278:	003ff706 	br	28258 <__alt_data_end+0xfffe8258>

0002827c <__sread>:
   2827c:	defffe04 	addi	sp,sp,-8
   28280:	dc000015 	stw	r16,0(sp)
   28284:	2821883a 	mov	r16,r5
   28288:	2940038f 	ldh	r5,14(r5)
   2828c:	dfc00115 	stw	ra,4(sp)
   28290:	002a1380 	call	2a138 <_read_r>
   28294:	10000716 	blt	r2,zero,282b4 <__sread+0x38>
   28298:	80c01417 	ldw	r3,80(r16)
   2829c:	1887883a 	add	r3,r3,r2
   282a0:	80c01415 	stw	r3,80(r16)
   282a4:	dfc00117 	ldw	ra,4(sp)
   282a8:	dc000017 	ldw	r16,0(sp)
   282ac:	dec00204 	addi	sp,sp,8
   282b0:	f800283a 	ret
   282b4:	80c0030b 	ldhu	r3,12(r16)
   282b8:	18fbffcc 	andi	r3,r3,61439
   282bc:	80c0030d 	sth	r3,12(r16)
   282c0:	dfc00117 	ldw	ra,4(sp)
   282c4:	dc000017 	ldw	r16,0(sp)
   282c8:	dec00204 	addi	sp,sp,8
   282cc:	f800283a 	ret

000282d0 <__seofread>:
   282d0:	0005883a 	mov	r2,zero
   282d4:	f800283a 	ret

000282d8 <__swrite>:
   282d8:	2880030b 	ldhu	r2,12(r5)
   282dc:	defffb04 	addi	sp,sp,-20
   282e0:	dcc00315 	stw	r19,12(sp)
   282e4:	dc800215 	stw	r18,8(sp)
   282e8:	dc400115 	stw	r17,4(sp)
   282ec:	dc000015 	stw	r16,0(sp)
   282f0:	dfc00415 	stw	ra,16(sp)
   282f4:	10c0400c 	andi	r3,r2,256
   282f8:	2821883a 	mov	r16,r5
   282fc:	2023883a 	mov	r17,r4
   28300:	3025883a 	mov	r18,r6
   28304:	3827883a 	mov	r19,r7
   28308:	18000526 	beq	r3,zero,28320 <__swrite+0x48>
   2830c:	2940038f 	ldh	r5,14(r5)
   28310:	01c00084 	movi	r7,2
   28314:	000d883a 	mov	r6,zero
   28318:	002a0d80 	call	2a0d8 <_lseek_r>
   2831c:	8080030b 	ldhu	r2,12(r16)
   28320:	8140038f 	ldh	r5,14(r16)
   28324:	10bbffcc 	andi	r2,r2,61439
   28328:	980f883a 	mov	r7,r19
   2832c:	900d883a 	mov	r6,r18
   28330:	8809883a 	mov	r4,r17
   28334:	8080030d 	sth	r2,12(r16)
   28338:	dfc00417 	ldw	ra,16(sp)
   2833c:	dcc00317 	ldw	r19,12(sp)
   28340:	dc800217 	ldw	r18,8(sp)
   28344:	dc400117 	ldw	r17,4(sp)
   28348:	dc000017 	ldw	r16,0(sp)
   2834c:	dec00504 	addi	sp,sp,20
   28350:	0029b8c1 	jmpi	29b8c <_write_r>

00028354 <__sseek>:
   28354:	defffe04 	addi	sp,sp,-8
   28358:	dc000015 	stw	r16,0(sp)
   2835c:	2821883a 	mov	r16,r5
   28360:	2940038f 	ldh	r5,14(r5)
   28364:	dfc00115 	stw	ra,4(sp)
   28368:	002a0d80 	call	2a0d8 <_lseek_r>
   2836c:	00ffffc4 	movi	r3,-1
   28370:	10c00826 	beq	r2,r3,28394 <__sseek+0x40>
   28374:	80c0030b 	ldhu	r3,12(r16)
   28378:	80801415 	stw	r2,80(r16)
   2837c:	18c40014 	ori	r3,r3,4096
   28380:	80c0030d 	sth	r3,12(r16)
   28384:	dfc00117 	ldw	ra,4(sp)
   28388:	dc000017 	ldw	r16,0(sp)
   2838c:	dec00204 	addi	sp,sp,8
   28390:	f800283a 	ret
   28394:	80c0030b 	ldhu	r3,12(r16)
   28398:	18fbffcc 	andi	r3,r3,61439
   2839c:	80c0030d 	sth	r3,12(r16)
   283a0:	dfc00117 	ldw	ra,4(sp)
   283a4:	dc000017 	ldw	r16,0(sp)
   283a8:	dec00204 	addi	sp,sp,8
   283ac:	f800283a 	ret

000283b0 <__sclose>:
   283b0:	2940038f 	ldh	r5,14(r5)
   283b4:	0029bec1 	jmpi	29bec <_close_r>

000283b8 <strcmp>:
   283b8:	2144b03a 	or	r2,r4,r5
   283bc:	108000cc 	andi	r2,r2,3
   283c0:	1000171e 	bne	r2,zero,28420 <strcmp+0x68>
   283c4:	20800017 	ldw	r2,0(r4)
   283c8:	28c00017 	ldw	r3,0(r5)
   283cc:	10c0141e 	bne	r2,r3,28420 <strcmp+0x68>
   283d0:	027fbff4 	movhi	r9,65279
   283d4:	4a7fbfc4 	addi	r9,r9,-257
   283d8:	0086303a 	nor	r3,zero,r2
   283dc:	02202074 	movhi	r8,32897
   283e0:	1245883a 	add	r2,r2,r9
   283e4:	42202004 	addi	r8,r8,-32640
   283e8:	10c4703a 	and	r2,r2,r3
   283ec:	1204703a 	and	r2,r2,r8
   283f0:	10000226 	beq	r2,zero,283fc <strcmp+0x44>
   283f4:	00002306 	br	28484 <strcmp+0xcc>
   283f8:	1000221e 	bne	r2,zero,28484 <strcmp+0xcc>
   283fc:	21000104 	addi	r4,r4,4
   28400:	20c00017 	ldw	r3,0(r4)
   28404:	29400104 	addi	r5,r5,4
   28408:	29800017 	ldw	r6,0(r5)
   2840c:	1a4f883a 	add	r7,r3,r9
   28410:	00c4303a 	nor	r2,zero,r3
   28414:	3884703a 	and	r2,r7,r2
   28418:	1204703a 	and	r2,r2,r8
   2841c:	19bff626 	beq	r3,r6,283f8 <__alt_data_end+0xfffe83f8>
   28420:	20800003 	ldbu	r2,0(r4)
   28424:	10c03fcc 	andi	r3,r2,255
   28428:	18c0201c 	xori	r3,r3,128
   2842c:	18ffe004 	addi	r3,r3,-128
   28430:	18000c26 	beq	r3,zero,28464 <strcmp+0xac>
   28434:	29800007 	ldb	r6,0(r5)
   28438:	19800326 	beq	r3,r6,28448 <strcmp+0x90>
   2843c:	00001306 	br	2848c <strcmp+0xd4>
   28440:	29800007 	ldb	r6,0(r5)
   28444:	11800b1e 	bne	r2,r6,28474 <strcmp+0xbc>
   28448:	21000044 	addi	r4,r4,1
   2844c:	20c00003 	ldbu	r3,0(r4)
   28450:	29400044 	addi	r5,r5,1
   28454:	18803fcc 	andi	r2,r3,255
   28458:	1080201c 	xori	r2,r2,128
   2845c:	10bfe004 	addi	r2,r2,-128
   28460:	103ff71e 	bne	r2,zero,28440 <__alt_data_end+0xfffe8440>
   28464:	0007883a 	mov	r3,zero
   28468:	28800003 	ldbu	r2,0(r5)
   2846c:	1885c83a 	sub	r2,r3,r2
   28470:	f800283a 	ret
   28474:	28800003 	ldbu	r2,0(r5)
   28478:	18c03fcc 	andi	r3,r3,255
   2847c:	1885c83a 	sub	r2,r3,r2
   28480:	f800283a 	ret
   28484:	0005883a 	mov	r2,zero
   28488:	f800283a 	ret
   2848c:	10c03fcc 	andi	r3,r2,255
   28490:	003ff506 	br	28468 <__alt_data_end+0xfffe8468>

00028494 <__sprint_r.part.0>:
   28494:	28801917 	ldw	r2,100(r5)
   28498:	defff604 	addi	sp,sp,-40
   2849c:	dd400515 	stw	r21,20(sp)
   284a0:	dfc00915 	stw	ra,36(sp)
   284a4:	df000815 	stw	fp,32(sp)
   284a8:	ddc00715 	stw	r23,28(sp)
   284ac:	dd800615 	stw	r22,24(sp)
   284b0:	dd000415 	stw	r20,16(sp)
   284b4:	dcc00315 	stw	r19,12(sp)
   284b8:	dc800215 	stw	r18,8(sp)
   284bc:	dc400115 	stw	r17,4(sp)
   284c0:	dc000015 	stw	r16,0(sp)
   284c4:	1088000c 	andi	r2,r2,8192
   284c8:	302b883a 	mov	r21,r6
   284cc:	10002e26 	beq	r2,zero,28588 <__sprint_r.part.0+0xf4>
   284d0:	30800217 	ldw	r2,8(r6)
   284d4:	35800017 	ldw	r22,0(r6)
   284d8:	10002926 	beq	r2,zero,28580 <__sprint_r.part.0+0xec>
   284dc:	2827883a 	mov	r19,r5
   284e0:	2029883a 	mov	r20,r4
   284e4:	b5c00104 	addi	r23,r22,4
   284e8:	04bfffc4 	movi	r18,-1
   284ec:	bc400017 	ldw	r17,0(r23)
   284f0:	b4000017 	ldw	r16,0(r22)
   284f4:	0039883a 	mov	fp,zero
   284f8:	8822d0ba 	srli	r17,r17,2
   284fc:	8800031e 	bne	r17,zero,2850c <__sprint_r.part.0+0x78>
   28500:	00001806 	br	28564 <__sprint_r.part.0+0xd0>
   28504:	84000104 	addi	r16,r16,4
   28508:	8f001526 	beq	r17,fp,28560 <__sprint_r.part.0+0xcc>
   2850c:	81400017 	ldw	r5,0(r16)
   28510:	980d883a 	mov	r6,r19
   28514:	a009883a 	mov	r4,r20
   28518:	0029f840 	call	29f84 <_fputwc_r>
   2851c:	e7000044 	addi	fp,fp,1
   28520:	14bff81e 	bne	r2,r18,28504 <__alt_data_end+0xfffe8504>
   28524:	9005883a 	mov	r2,r18
   28528:	a8000215 	stw	zero,8(r21)
   2852c:	a8000115 	stw	zero,4(r21)
   28530:	dfc00917 	ldw	ra,36(sp)
   28534:	df000817 	ldw	fp,32(sp)
   28538:	ddc00717 	ldw	r23,28(sp)
   2853c:	dd800617 	ldw	r22,24(sp)
   28540:	dd400517 	ldw	r21,20(sp)
   28544:	dd000417 	ldw	r20,16(sp)
   28548:	dcc00317 	ldw	r19,12(sp)
   2854c:	dc800217 	ldw	r18,8(sp)
   28550:	dc400117 	ldw	r17,4(sp)
   28554:	dc000017 	ldw	r16,0(sp)
   28558:	dec00a04 	addi	sp,sp,40
   2855c:	f800283a 	ret
   28560:	a8800217 	ldw	r2,8(r21)
   28564:	8c63883a 	add	r17,r17,r17
   28568:	8c63883a 	add	r17,r17,r17
   2856c:	1445c83a 	sub	r2,r2,r17
   28570:	a8800215 	stw	r2,8(r21)
   28574:	b5800204 	addi	r22,r22,8
   28578:	bdc00204 	addi	r23,r23,8
   2857c:	103fdb1e 	bne	r2,zero,284ec <__alt_data_end+0xfffe84ec>
   28580:	0005883a 	mov	r2,zero
   28584:	003fe806 	br	28528 <__alt_data_end+0xfffe8528>
   28588:	00255f40 	call	255f4 <__sfvwrite_r>
   2858c:	003fe606 	br	28528 <__alt_data_end+0xfffe8528>

00028590 <__sprint_r>:
   28590:	30c00217 	ldw	r3,8(r6)
   28594:	18000126 	beq	r3,zero,2859c <__sprint_r+0xc>
   28598:	00284941 	jmpi	28494 <__sprint_r.part.0>
   2859c:	30000115 	stw	zero,4(r6)
   285a0:	0005883a 	mov	r2,zero
   285a4:	f800283a 	ret

000285a8 <___vfiprintf_internal_r>:
   285a8:	deffca04 	addi	sp,sp,-216
   285ac:	dd403115 	stw	r21,196(sp)
   285b0:	dfc03515 	stw	ra,212(sp)
   285b4:	df003415 	stw	fp,208(sp)
   285b8:	ddc03315 	stw	r23,204(sp)
   285bc:	dd803215 	stw	r22,200(sp)
   285c0:	dd003015 	stw	r20,192(sp)
   285c4:	dcc02f15 	stw	r19,188(sp)
   285c8:	dc802e15 	stw	r18,184(sp)
   285cc:	dc402d15 	stw	r17,180(sp)
   285d0:	dc002c15 	stw	r16,176(sp)
   285d4:	d9002115 	stw	r4,132(sp)
   285d8:	d9402015 	stw	r5,128(sp)
   285dc:	d9c02215 	stw	r7,136(sp)
   285e0:	302b883a 	mov	r21,r6
   285e4:	20000226 	beq	r4,zero,285f0 <___vfiprintf_internal_r+0x48>
   285e8:	20800e17 	ldw	r2,56(r4)
   285ec:	1000cf26 	beq	r2,zero,2892c <___vfiprintf_internal_r+0x384>
   285f0:	d8c02017 	ldw	r3,128(sp)
   285f4:	1880030b 	ldhu	r2,12(r3)
   285f8:	10c8000c 	andi	r3,r2,8192
   285fc:	1800071e 	bne	r3,zero,2861c <___vfiprintf_internal_r+0x74>
   28600:	d9402017 	ldw	r5,128(sp)
   28604:	00f7ffc4 	movi	r3,-8193
   28608:	10880014 	ori	r2,r2,8192
   2860c:	29001917 	ldw	r4,100(r5)
   28610:	2880030d 	sth	r2,12(r5)
   28614:	20c6703a 	and	r3,r4,r3
   28618:	28c01915 	stw	r3,100(r5)
   2861c:	10c0020c 	andi	r3,r2,8
   28620:	1800a526 	beq	r3,zero,288b8 <___vfiprintf_internal_r+0x310>
   28624:	d9002017 	ldw	r4,128(sp)
   28628:	20c00417 	ldw	r3,16(r4)
   2862c:	1800a226 	beq	r3,zero,288b8 <___vfiprintf_internal_r+0x310>
   28630:	1080068c 	andi	r2,r2,26
   28634:	00c00284 	movi	r3,10
   28638:	10c0a826 	beq	r2,r3,288dc <___vfiprintf_internal_r+0x334>
   2863c:	d9001a04 	addi	r4,sp,104
   28640:	d94019c4 	addi	r5,sp,103
   28644:	048000f4 	movhi	r18,3
   28648:	2145c83a 	sub	r2,r4,r5
   2864c:	94832304 	addi	r18,r18,3212
   28650:	d9001e15 	stw	r4,120(sp)
   28654:	d9401f15 	stw	r5,124(sp)
   28658:	dec01a15 	stw	sp,104(sp)
   2865c:	d8001c15 	stw	zero,112(sp)
   28660:	d8001b15 	stw	zero,108(sp)
   28664:	d811883a 	mov	r8,sp
   28668:	d8002615 	stw	zero,152(sp)
   2866c:	d8002415 	stw	zero,144(sp)
   28670:	d8802815 	stw	r2,160(sp)
   28674:	a82d883a 	mov	r22,r21
   28678:	b0800007 	ldb	r2,0(r22)
   2867c:	10040d26 	beq	r2,zero,296b4 <___vfiprintf_internal_r+0x110c>
   28680:	00c00944 	movi	r3,37
   28684:	b029883a 	mov	r20,r22
   28688:	10c0021e 	bne	r2,r3,28694 <___vfiprintf_internal_r+0xec>
   2868c:	00001606 	br	286e8 <___vfiprintf_internal_r+0x140>
   28690:	10c00326 	beq	r2,r3,286a0 <___vfiprintf_internal_r+0xf8>
   28694:	a5000044 	addi	r20,r20,1
   28698:	a0800007 	ldb	r2,0(r20)
   2869c:	103ffc1e 	bne	r2,zero,28690 <__alt_data_end+0xfffe8690>
   286a0:	a5a1c83a 	sub	r16,r20,r22
   286a4:	80001026 	beq	r16,zero,286e8 <___vfiprintf_internal_r+0x140>
   286a8:	d8c01c17 	ldw	r3,112(sp)
   286ac:	d8801b17 	ldw	r2,108(sp)
   286b0:	45800015 	stw	r22,0(r8)
   286b4:	80c7883a 	add	r3,r16,r3
   286b8:	10800044 	addi	r2,r2,1
   286bc:	44000115 	stw	r16,4(r8)
   286c0:	d8c01c15 	stw	r3,112(sp)
   286c4:	d8801b15 	stw	r2,108(sp)
   286c8:	010001c4 	movi	r4,7
   286cc:	2080750e 	bge	r4,r2,288a4 <___vfiprintf_internal_r+0x2fc>
   286d0:	1803951e 	bne	r3,zero,29528 <___vfiprintf_internal_r+0xf80>
   286d4:	d8c02417 	ldw	r3,144(sp)
   286d8:	d8001b15 	stw	zero,108(sp)
   286dc:	d811883a 	mov	r8,sp
   286e0:	1c07883a 	add	r3,r3,r16
   286e4:	d8c02415 	stw	r3,144(sp)
   286e8:	a0800007 	ldb	r2,0(r20)
   286ec:	1002e026 	beq	r2,zero,29270 <___vfiprintf_internal_r+0xcc8>
   286f0:	a5800044 	addi	r22,r20,1
   286f4:	a0c00047 	ldb	r3,1(r20)
   286f8:	d8001d85 	stb	zero,118(sp)
   286fc:	0027883a 	mov	r19,zero
   28700:	d8002305 	stb	zero,140(sp)
   28704:	043fffc4 	movi	r16,-1
   28708:	d8002515 	stw	zero,148(sp)
   2870c:	0023883a 	mov	r17,zero
   28710:	05001604 	movi	r20,88
   28714:	05400244 	movi	r21,9
   28718:	402f883a 	mov	r23,r8
   2871c:	b5800044 	addi	r22,r22,1
   28720:	18bff804 	addi	r2,r3,-32
   28724:	a0827736 	bltu	r20,r2,29104 <___vfiprintf_internal_r+0xb5c>
   28728:	100490ba 	slli	r2,r2,2
   2872c:	010000f4 	movhi	r4,3
   28730:	2121d004 	addi	r4,r4,-30912
   28734:	1105883a 	add	r2,r2,r4
   28738:	10800017 	ldw	r2,0(r2)
   2873c:	1000683a 	jmp	r2
   28740:	00028e04 	movi	zero,2616
   28744:	00029104 	movi	zero,2628
   28748:	00029104 	movi	zero,2628
   2874c:	00028e20 	cmpeqi	zero,zero,2616
   28750:	00029104 	movi	zero,2628
   28754:	00029104 	movi	zero,2628
   28758:	00029104 	movi	zero,2628
   2875c:	00029104 	movi	zero,2628
   28760:	00029104 	movi	zero,2628
   28764:	00029104 	movi	zero,2628
   28768:	00029028 	cmpgeui	zero,zero,2624
   2876c:	0002904c 	andi	zero,zero,2625
   28770:	00029104 	movi	zero,2628
   28774:	00028944 	movi	zero,2597
   28778:	00029060 	cmpeqi	zero,zero,2625
   2877c:	00029104 	movi	zero,2628
   28780:	00028e2c 	andhi	zero,zero,2616
   28784:	00028e38 	rdprs	zero,zero,2616
   28788:	00028e38 	rdprs	zero,zero,2616
   2878c:	00028e38 	rdprs	zero,zero,2616
   28790:	00028e38 	rdprs	zero,zero,2616
   28794:	00028e38 	rdprs	zero,zero,2616
   28798:	00028e38 	rdprs	zero,zero,2616
   2879c:	00028e38 	rdprs	zero,zero,2616
   287a0:	00028e38 	rdprs	zero,zero,2616
   287a4:	00028e38 	rdprs	zero,zero,2616
   287a8:	00029104 	movi	zero,2628
   287ac:	00029104 	movi	zero,2628
   287b0:	00029104 	movi	zero,2628
   287b4:	00029104 	movi	zero,2628
   287b8:	00029104 	movi	zero,2628
   287bc:	00029104 	movi	zero,2628
   287c0:	00029104 	movi	zero,2628
   287c4:	00029104 	movi	zero,2628
   287c8:	00029104 	movi	zero,2628
   287cc:	00029104 	movi	zero,2628
   287d0:	00028e78 	rdprs	zero,zero,2617
   287d4:	00029104 	movi	zero,2628
   287d8:	00029104 	movi	zero,2628
   287dc:	00029104 	movi	zero,2628
   287e0:	00029104 	movi	zero,2628
   287e4:	00029104 	movi	zero,2628
   287e8:	00029104 	movi	zero,2628
   287ec:	00029104 	movi	zero,2628
   287f0:	00029104 	movi	zero,2628
   287f4:	00029104 	movi	zero,2628
   287f8:	00029104 	movi	zero,2628
   287fc:	00028eb4 	movhi	zero,2618
   28800:	00029104 	movi	zero,2628
   28804:	00029104 	movi	zero,2628
   28808:	00029104 	movi	zero,2628
   2880c:	00029104 	movi	zero,2628
   28810:	00029104 	movi	zero,2628
   28814:	00028f10 	cmplti	zero,zero,2620
   28818:	00029104 	movi	zero,2628
   2881c:	00029104 	movi	zero,2628
   28820:	00028f84 	movi	zero,2622
   28824:	00029104 	movi	zero,2628
   28828:	00029104 	movi	zero,2628
   2882c:	00029104 	movi	zero,2628
   28830:	00029104 	movi	zero,2628
   28834:	00029104 	movi	zero,2628
   28838:	00029104 	movi	zero,2628
   2883c:	00029104 	movi	zero,2628
   28840:	00029104 	movi	zero,2628
   28844:	00029104 	movi	zero,2628
   28848:	00029104 	movi	zero,2628
   2884c:	00028d2c 	andhi	zero,zero,2612
   28850:	00028d5c 	xori	zero,zero,2613
   28854:	00029104 	movi	zero,2628
   28858:	00029104 	movi	zero,2628
   2885c:	00029104 	movi	zero,2628
   28860:	000290ac 	andhi	zero,zero,2626
   28864:	00028d5c 	xori	zero,zero,2613
   28868:	00029104 	movi	zero,2628
   2886c:	00029104 	movi	zero,2628
   28870:	00028c04 	movi	zero,2608
   28874:	00029104 	movi	zero,2628
   28878:	00028c18 	cmpnei	zero,zero,2608
   2887c:	00028c50 	cmplti	zero,zero,2609
   28880:	00028950 	cmplti	zero,zero,2597
   28884:	00028bf8 	rdprs	zero,zero,2607
   28888:	00029104 	movi	zero,2628
   2888c:	00028fc4 	movi	zero,2623
   28890:	00029104 	movi	zero,2628
   28894:	00029010 	cmplti	zero,zero,2624
   28898:	00029104 	movi	zero,2628
   2889c:	00029104 	movi	zero,2628
   288a0:	00028cd4 	movui	zero,2611
   288a4:	42000204 	addi	r8,r8,8
   288a8:	d8c02417 	ldw	r3,144(sp)
   288ac:	1c07883a 	add	r3,r3,r16
   288b0:	d8c02415 	stw	r3,144(sp)
   288b4:	003f8c06 	br	286e8 <__alt_data_end+0xfffe86e8>
   288b8:	d9402017 	ldw	r5,128(sp)
   288bc:	d9002117 	ldw	r4,132(sp)
   288c0:	00231640 	call	23164 <__swsetup_r>
   288c4:	1003c11e 	bne	r2,zero,297cc <___vfiprintf_internal_r+0x1224>
   288c8:	d9402017 	ldw	r5,128(sp)
   288cc:	00c00284 	movi	r3,10
   288d0:	2880030b 	ldhu	r2,12(r5)
   288d4:	1080068c 	andi	r2,r2,26
   288d8:	10ff581e 	bne	r2,r3,2863c <__alt_data_end+0xfffe863c>
   288dc:	d8c02017 	ldw	r3,128(sp)
   288e0:	1880038f 	ldh	r2,14(r3)
   288e4:	103f5516 	blt	r2,zero,2863c <__alt_data_end+0xfffe863c>
   288e8:	d9c02217 	ldw	r7,136(sp)
   288ec:	d9002117 	ldw	r4,132(sp)
   288f0:	a80d883a 	mov	r6,r21
   288f4:	180b883a 	mov	r5,r3
   288f8:	0029ad00 	call	29ad0 <__sbprintf>
   288fc:	dfc03517 	ldw	ra,212(sp)
   28900:	df003417 	ldw	fp,208(sp)
   28904:	ddc03317 	ldw	r23,204(sp)
   28908:	dd803217 	ldw	r22,200(sp)
   2890c:	dd403117 	ldw	r21,196(sp)
   28910:	dd003017 	ldw	r20,192(sp)
   28914:	dcc02f17 	ldw	r19,188(sp)
   28918:	dc802e17 	ldw	r18,184(sp)
   2891c:	dc402d17 	ldw	r17,180(sp)
   28920:	dc002c17 	ldw	r16,176(sp)
   28924:	dec03604 	addi	sp,sp,216
   28928:	f800283a 	ret
   2892c:	00251700 	call	25170 <__sinit>
   28930:	003f2f06 	br	285f0 <__alt_data_end+0xfffe85f0>
   28934:	d8c02517 	ldw	r3,148(sp)
   28938:	d8802215 	stw	r2,136(sp)
   2893c:	00c7c83a 	sub	r3,zero,r3
   28940:	d8c02515 	stw	r3,148(sp)
   28944:	8c400114 	ori	r17,r17,4
   28948:	b0c00007 	ldb	r3,0(r22)
   2894c:	003f7306 	br	2871c <__alt_data_end+0xfffe871c>
   28950:	00800c04 	movi	r2,48
   28954:	d9402217 	ldw	r5,136(sp)
   28958:	d8801d05 	stb	r2,116(sp)
   2895c:	00801e04 	movi	r2,120
   28960:	d8801d45 	stb	r2,117(sp)
   28964:	d8001d85 	stb	zero,118(sp)
   28968:	b811883a 	mov	r8,r23
   2896c:	28c00104 	addi	r3,r5,4
   28970:	2cc00017 	ldw	r19,0(r5)
   28974:	0029883a 	mov	r20,zero
   28978:	88800094 	ori	r2,r17,2
   2897c:	80032516 	blt	r16,zero,29614 <___vfiprintf_internal_r+0x106c>
   28980:	00bfdfc4 	movi	r2,-129
   28984:	88a2703a 	and	r17,r17,r2
   28988:	d8c02215 	stw	r3,136(sp)
   2898c:	8c400094 	ori	r17,r17,2
   28990:	98032a1e 	bne	r19,zero,2963c <___vfiprintf_internal_r+0x1094>
   28994:	008000f4 	movhi	r2,3
   28998:	1082c204 	addi	r2,r2,2824
   2899c:	d8802615 	stw	r2,152(sp)
   289a0:	002b883a 	mov	r21,zero
   289a4:	8001741e 	bne	r16,zero,28f78 <___vfiprintf_internal_r+0x9d0>
   289a8:	0021883a 	mov	r16,zero
   289ac:	0029883a 	mov	r20,zero
   289b0:	ddc01a04 	addi	r23,sp,104
   289b4:	8027883a 	mov	r19,r16
   289b8:	8500010e 	bge	r16,r20,289c0 <___vfiprintf_internal_r+0x418>
   289bc:	a027883a 	mov	r19,r20
   289c0:	ad403fcc 	andi	r21,r21,255
   289c4:	ad40201c 	xori	r21,r21,128
   289c8:	ad7fe004 	addi	r21,r21,-128
   289cc:	a8000126 	beq	r21,zero,289d4 <___vfiprintf_internal_r+0x42c>
   289d0:	9cc00044 	addi	r19,r19,1
   289d4:	89c0008c 	andi	r7,r17,2
   289d8:	38000126 	beq	r7,zero,289e0 <___vfiprintf_internal_r+0x438>
   289dc:	9cc00084 	addi	r19,r19,2
   289e0:	88c0210c 	andi	r3,r17,132
   289e4:	1801dd1e 	bne	r3,zero,2915c <___vfiprintf_internal_r+0xbb4>
   289e8:	d9402517 	ldw	r5,148(sp)
   289ec:	2cebc83a 	sub	r21,r5,r19
   289f0:	0541da0e 	bge	zero,r21,2915c <___vfiprintf_internal_r+0xbb4>
   289f4:	07000404 	movi	fp,16
   289f8:	d8801c17 	ldw	r2,112(sp)
   289fc:	e543be0e 	bge	fp,r21,298f8 <___vfiprintf_internal_r+0x1350>
   28a00:	014000f4 	movhi	r5,3
   28a04:	29432704 	addi	r5,r5,3228
   28a08:	dc002715 	stw	r16,156(sp)
   28a0c:	d9801b17 	ldw	r6,108(sp)
   28a10:	a821883a 	mov	r16,r21
   28a14:	d9402315 	stw	r5,140(sp)
   28a18:	028001c4 	movi	r10,7
   28a1c:	d9c02915 	stw	r7,164(sp)
   28a20:	182b883a 	mov	r21,r3
   28a24:	00000506 	br	28a3c <___vfiprintf_internal_r+0x494>
   28a28:	31000084 	addi	r4,r6,2
   28a2c:	42000204 	addi	r8,r8,8
   28a30:	180d883a 	mov	r6,r3
   28a34:	843ffc04 	addi	r16,r16,-16
   28a38:	e4000f0e 	bge	fp,r16,28a78 <___vfiprintf_internal_r+0x4d0>
   28a3c:	010000f4 	movhi	r4,3
   28a40:	10800404 	addi	r2,r2,16
   28a44:	30c00044 	addi	r3,r6,1
   28a48:	21032704 	addi	r4,r4,3228
   28a4c:	41000015 	stw	r4,0(r8)
   28a50:	47000115 	stw	fp,4(r8)
   28a54:	d8801c15 	stw	r2,112(sp)
   28a58:	d8c01b15 	stw	r3,108(sp)
   28a5c:	50fff20e 	bge	r10,r3,28a28 <__alt_data_end+0xfffe8a28>
   28a60:	1001b21e 	bne	r2,zero,2912c <___vfiprintf_internal_r+0xb84>
   28a64:	843ffc04 	addi	r16,r16,-16
   28a68:	000d883a 	mov	r6,zero
   28a6c:	01000044 	movi	r4,1
   28a70:	d811883a 	mov	r8,sp
   28a74:	e43ff116 	blt	fp,r16,28a3c <__alt_data_end+0xfffe8a3c>
   28a78:	a807883a 	mov	r3,r21
   28a7c:	d9c02917 	ldw	r7,164(sp)
   28a80:	802b883a 	mov	r21,r16
   28a84:	dc002717 	ldw	r16,156(sp)
   28a88:	d9402317 	ldw	r5,140(sp)
   28a8c:	a885883a 	add	r2,r21,r2
   28a90:	45400115 	stw	r21,4(r8)
   28a94:	41400015 	stw	r5,0(r8)
   28a98:	d8801c15 	stw	r2,112(sp)
   28a9c:	d9001b15 	stw	r4,108(sp)
   28aa0:	014001c4 	movi	r5,7
   28aa4:	29026216 	blt	r5,r4,29430 <___vfiprintf_internal_r+0xe88>
   28aa8:	d9801d87 	ldb	r6,118(sp)
   28aac:	42000204 	addi	r8,r8,8
   28ab0:	21400044 	addi	r5,r4,1
   28ab4:	3001ae1e 	bne	r6,zero,29170 <___vfiprintf_internal_r+0xbc8>
   28ab8:	3801bb26 	beq	r7,zero,291a8 <___vfiprintf_internal_r+0xc00>
   28abc:	d9001d04 	addi	r4,sp,116
   28ac0:	10800084 	addi	r2,r2,2
   28ac4:	41000015 	stw	r4,0(r8)
   28ac8:	01000084 	movi	r4,2
   28acc:	41000115 	stw	r4,4(r8)
   28ad0:	d8801c15 	stw	r2,112(sp)
   28ad4:	d9401b15 	stw	r5,108(sp)
   28ad8:	010001c4 	movi	r4,7
   28adc:	2142680e 	bge	r4,r5,29480 <___vfiprintf_internal_r+0xed8>
   28ae0:	1002b11e 	bne	r2,zero,295a8 <___vfiprintf_internal_r+0x1000>
   28ae4:	01802004 	movi	r6,128
   28ae8:	01400044 	movi	r5,1
   28aec:	0009883a 	mov	r4,zero
   28af0:	d811883a 	mov	r8,sp
   28af4:	1981ae1e 	bne	r3,r6,291b0 <___vfiprintf_internal_r+0xc08>
   28af8:	d8c02517 	ldw	r3,148(sp)
   28afc:	1cf9c83a 	sub	fp,r3,r19
   28b00:	0701ab0e 	bge	zero,fp,291b0 <___vfiprintf_internal_r+0xc08>
   28b04:	05400404 	movi	r21,16
   28b08:	af03a90e 	bge	r21,fp,299b0 <___vfiprintf_internal_r+0x1408>
   28b0c:	014000f4 	movhi	r5,3
   28b10:	29432304 	addi	r5,r5,3212
   28b14:	d9402315 	stw	r5,140(sp)
   28b18:	01c001c4 	movi	r7,7
   28b1c:	00000506 	br	28b34 <___vfiprintf_internal_r+0x58c>
   28b20:	21800084 	addi	r6,r4,2
   28b24:	42000204 	addi	r8,r8,8
   28b28:	1809883a 	mov	r4,r3
   28b2c:	e73ffc04 	addi	fp,fp,-16
   28b30:	af000d0e 	bge	r21,fp,28b68 <___vfiprintf_internal_r+0x5c0>
   28b34:	10800404 	addi	r2,r2,16
   28b38:	20c00044 	addi	r3,r4,1
   28b3c:	44800015 	stw	r18,0(r8)
   28b40:	45400115 	stw	r21,4(r8)
   28b44:	d8801c15 	stw	r2,112(sp)
   28b48:	d8c01b15 	stw	r3,108(sp)
   28b4c:	38fff40e 	bge	r7,r3,28b20 <__alt_data_end+0xfffe8b20>
   28b50:	10022b1e 	bne	r2,zero,29400 <___vfiprintf_internal_r+0xe58>
   28b54:	e73ffc04 	addi	fp,fp,-16
   28b58:	01800044 	movi	r6,1
   28b5c:	0009883a 	mov	r4,zero
   28b60:	d811883a 	mov	r8,sp
   28b64:	af3ff316 	blt	r21,fp,28b34 <__alt_data_end+0xfffe8b34>
   28b68:	d8c02317 	ldw	r3,140(sp)
   28b6c:	1705883a 	add	r2,r2,fp
   28b70:	47000115 	stw	fp,4(r8)
   28b74:	40c00015 	stw	r3,0(r8)
   28b78:	d8801c15 	stw	r2,112(sp)
   28b7c:	d9801b15 	stw	r6,108(sp)
   28b80:	00c001c4 	movi	r3,7
   28b84:	19829416 	blt	r3,r6,295d8 <___vfiprintf_internal_r+0x1030>
   28b88:	8521c83a 	sub	r16,r16,r20
   28b8c:	42000204 	addi	r8,r8,8
   28b90:	31400044 	addi	r5,r6,1
   28b94:	3009883a 	mov	r4,r6
   28b98:	04018716 	blt	zero,r16,291b8 <___vfiprintf_internal_r+0xc10>
   28b9c:	a085883a 	add	r2,r20,r2
   28ba0:	45c00015 	stw	r23,0(r8)
   28ba4:	45000115 	stw	r20,4(r8)
   28ba8:	d8801c15 	stw	r2,112(sp)
   28bac:	d9401b15 	stw	r5,108(sp)
   28bb0:	00c001c4 	movi	r3,7
   28bb4:	1941c20e 	bge	r3,r5,292c0 <___vfiprintf_internal_r+0xd18>
   28bb8:	1002531e 	bne	r2,zero,29508 <___vfiprintf_internal_r+0xf60>
   28bbc:	d8001b15 	stw	zero,108(sp)
   28bc0:	8c40010c 	andi	r17,r17,4
   28bc4:	88023226 	beq	r17,zero,29490 <___vfiprintf_internal_r+0xee8>
   28bc8:	d9002517 	ldw	r4,148(sp)
   28bcc:	24e3c83a 	sub	r17,r4,r19
   28bd0:	04432916 	blt	zero,r17,29878 <___vfiprintf_internal_r+0x12d0>
   28bd4:	d8802517 	ldw	r2,148(sp)
   28bd8:	14c0010e 	bge	r2,r19,28be0 <___vfiprintf_internal_r+0x638>
   28bdc:	9805883a 	mov	r2,r19
   28be0:	d8c02417 	ldw	r3,144(sp)
   28be4:	1887883a 	add	r3,r3,r2
   28be8:	d8c02415 	stw	r3,144(sp)
   28bec:	d8001b15 	stw	zero,108(sp)
   28bf0:	d811883a 	mov	r8,sp
   28bf4:	003ea006 	br	28678 <__alt_data_end+0xfffe8678>
   28bf8:	8c400814 	ori	r17,r17,32
   28bfc:	b0c00007 	ldb	r3,0(r22)
   28c00:	003ec606 	br	2871c <__alt_data_end+0xfffe871c>
   28c04:	b0c00007 	ldb	r3,0(r22)
   28c08:	00801b04 	movi	r2,108
   28c0c:	18832026 	beq	r3,r2,29890 <___vfiprintf_internal_r+0x12e8>
   28c10:	8c400414 	ori	r17,r17,16
   28c14:	003ec106 	br	2871c <__alt_data_end+0xfffe871c>
   28c18:	9cc03fcc 	andi	r19,r19,255
   28c1c:	b811883a 	mov	r8,r23
   28c20:	9803981e 	bne	r19,zero,29a84 <___vfiprintf_internal_r+0x14dc>
   28c24:	8880080c 	andi	r2,r17,32
   28c28:	1002be26 	beq	r2,zero,29724 <___vfiprintf_internal_r+0x117c>
   28c2c:	d9002217 	ldw	r4,136(sp)
   28c30:	d9402417 	ldw	r5,144(sp)
   28c34:	20800017 	ldw	r2,0(r4)
   28c38:	2807d7fa 	srai	r3,r5,31
   28c3c:	21000104 	addi	r4,r4,4
   28c40:	d9002215 	stw	r4,136(sp)
   28c44:	11400015 	stw	r5,0(r2)
   28c48:	10c00115 	stw	r3,4(r2)
   28c4c:	003e8a06 	br	28678 <__alt_data_end+0xfffe8678>
   28c50:	9cc03fcc 	andi	r19,r19,255
   28c54:	b811883a 	mov	r8,r23
   28c58:	9803871e 	bne	r19,zero,29a78 <___vfiprintf_internal_r+0x14d0>
   28c5c:	8880080c 	andi	r2,r17,32
   28c60:	10009a26 	beq	r2,zero,28ecc <___vfiprintf_internal_r+0x924>
   28c64:	d9002217 	ldw	r4,136(sp)
   28c68:	d8001d85 	stb	zero,118(sp)
   28c6c:	20800204 	addi	r2,r4,8
   28c70:	24c00017 	ldw	r19,0(r4)
   28c74:	25000117 	ldw	r20,4(r4)
   28c78:	8002a416 	blt	r16,zero,2970c <___vfiprintf_internal_r+0x1164>
   28c7c:	013fdfc4 	movi	r4,-129
   28c80:	9d06b03a 	or	r3,r19,r20
   28c84:	d8802215 	stw	r2,136(sp)
   28c88:	8922703a 	and	r17,r17,r4
   28c8c:	18009b26 	beq	r3,zero,28efc <___vfiprintf_internal_r+0x954>
   28c90:	002b883a 	mov	r21,zero
   28c94:	ddc01a04 	addi	r23,sp,104
   28c98:	9806d0fa 	srli	r3,r19,3
   28c9c:	a008977a 	slli	r4,r20,29
   28ca0:	a028d0fa 	srli	r20,r20,3
   28ca4:	9cc001cc 	andi	r19,r19,7
   28ca8:	98800c04 	addi	r2,r19,48
   28cac:	bdffffc4 	addi	r23,r23,-1
   28cb0:	20e6b03a 	or	r19,r4,r3
   28cb4:	b8800005 	stb	r2,0(r23)
   28cb8:	9d06b03a 	or	r3,r19,r20
   28cbc:	183ff61e 	bne	r3,zero,28c98 <__alt_data_end+0xfffe8c98>
   28cc0:	88c0004c 	andi	r3,r17,1
   28cc4:	18021f1e 	bne	r3,zero,29544 <___vfiprintf_internal_r+0xf9c>
   28cc8:	d9401e17 	ldw	r5,120(sp)
   28ccc:	2de9c83a 	sub	r20,r5,r23
   28cd0:	003f3806 	br	289b4 <__alt_data_end+0xfffe89b4>
   28cd4:	9cc03fcc 	andi	r19,r19,255
   28cd8:	b811883a 	mov	r8,r23
   28cdc:	98034f1e 	bne	r19,zero,29a1c <___vfiprintf_internal_r+0x1474>
   28ce0:	008000f4 	movhi	r2,3
   28ce4:	1082c204 	addi	r2,r2,2824
   28ce8:	d8802615 	stw	r2,152(sp)
   28cec:	8880080c 	andi	r2,r17,32
   28cf0:	1000ac26 	beq	r2,zero,28fa4 <___vfiprintf_internal_r+0x9fc>
   28cf4:	d9002217 	ldw	r4,136(sp)
   28cf8:	24c00017 	ldw	r19,0(r4)
   28cfc:	25000117 	ldw	r20,4(r4)
   28d00:	21000204 	addi	r4,r4,8
   28d04:	d9002215 	stw	r4,136(sp)
   28d08:	8880004c 	andi	r2,r17,1
   28d0c:	1001e726 	beq	r2,zero,294ac <___vfiprintf_internal_r+0xf04>
   28d10:	9d04b03a 	or	r2,r19,r20
   28d14:	10025c1e 	bne	r2,zero,29688 <___vfiprintf_internal_r+0x10e0>
   28d18:	d8001d85 	stb	zero,118(sp)
   28d1c:	80024416 	blt	r16,zero,29630 <___vfiprintf_internal_r+0x1088>
   28d20:	00bfdfc4 	movi	r2,-129
   28d24:	88a2703a 	and	r17,r17,r2
   28d28:	003f1d06 	br	289a0 <__alt_data_end+0xfffe89a0>
   28d2c:	d8c02217 	ldw	r3,136(sp)
   28d30:	04c00044 	movi	r19,1
   28d34:	b811883a 	mov	r8,r23
   28d38:	18800017 	ldw	r2,0(r3)
   28d3c:	18c00104 	addi	r3,r3,4
   28d40:	d8001d85 	stb	zero,118(sp)
   28d44:	d8801005 	stb	r2,64(sp)
   28d48:	d8c02215 	stw	r3,136(sp)
   28d4c:	9829883a 	mov	r20,r19
   28d50:	ddc01004 	addi	r23,sp,64
   28d54:	0021883a 	mov	r16,zero
   28d58:	003f1e06 	br	289d4 <__alt_data_end+0xfffe89d4>
   28d5c:	9cc03fcc 	andi	r19,r19,255
   28d60:	b811883a 	mov	r8,r23
   28d64:	9803331e 	bne	r19,zero,29a34 <___vfiprintf_internal_r+0x148c>
   28d68:	8880080c 	andi	r2,r17,32
   28d6c:	10004826 	beq	r2,zero,28e90 <___vfiprintf_internal_r+0x8e8>
   28d70:	d9002217 	ldw	r4,136(sp)
   28d74:	20800117 	ldw	r2,4(r4)
   28d78:	24c00017 	ldw	r19,0(r4)
   28d7c:	21000204 	addi	r4,r4,8
   28d80:	d9002215 	stw	r4,136(sp)
   28d84:	1029883a 	mov	r20,r2
   28d88:	10024c16 	blt	r2,zero,296bc <___vfiprintf_internal_r+0x1114>
   28d8c:	dd401d83 	ldbu	r21,118(sp)
   28d90:	80007116 	blt	r16,zero,28f58 <___vfiprintf_internal_r+0x9b0>
   28d94:	00ffdfc4 	movi	r3,-129
   28d98:	9d04b03a 	or	r2,r19,r20
   28d9c:	88e2703a 	and	r17,r17,r3
   28da0:	1000d126 	beq	r2,zero,290e8 <___vfiprintf_internal_r+0xb40>
   28da4:	a0023526 	beq	r20,zero,2967c <___vfiprintf_internal_r+0x10d4>
   28da8:	ddc01a04 	addi	r23,sp,104
   28dac:	4039883a 	mov	fp,r8
   28db0:	9809883a 	mov	r4,r19
   28db4:	a00b883a 	mov	r5,r20
   28db8:	01800284 	movi	r6,10
   28dbc:	000f883a 	mov	r7,zero
   28dc0:	002aad40 	call	2aad4 <__umoddi3>
   28dc4:	10800c04 	addi	r2,r2,48
   28dc8:	bdffffc4 	addi	r23,r23,-1
   28dcc:	9809883a 	mov	r4,r19
   28dd0:	a00b883a 	mov	r5,r20
   28dd4:	b8800005 	stb	r2,0(r23)
   28dd8:	01800284 	movi	r6,10
   28ddc:	000f883a 	mov	r7,zero
   28de0:	002a4d80 	call	2a4d8 <__udivdi3>
   28de4:	1027883a 	mov	r19,r2
   28de8:	10c4b03a 	or	r2,r2,r3
   28dec:	1829883a 	mov	r20,r3
   28df0:	103fef1e 	bne	r2,zero,28db0 <__alt_data_end+0xfffe8db0>
   28df4:	d9001e17 	ldw	r4,120(sp)
   28df8:	e011883a 	mov	r8,fp
   28dfc:	25e9c83a 	sub	r20,r4,r23
   28e00:	003eec06 	br	289b4 <__alt_data_end+0xfffe89b4>
   28e04:	d8802307 	ldb	r2,140(sp)
   28e08:	1002361e 	bne	r2,zero,296e4 <___vfiprintf_internal_r+0x113c>
   28e0c:	00c00804 	movi	r3,32
   28e10:	d8c02305 	stb	r3,140(sp)
   28e14:	04c00044 	movi	r19,1
   28e18:	b0c00007 	ldb	r3,0(r22)
   28e1c:	003e3f06 	br	2871c <__alt_data_end+0xfffe871c>
   28e20:	8c400054 	ori	r17,r17,1
   28e24:	b0c00007 	ldb	r3,0(r22)
   28e28:	003e3c06 	br	2871c <__alt_data_end+0xfffe871c>
   28e2c:	8c402014 	ori	r17,r17,128
   28e30:	b0c00007 	ldb	r3,0(r22)
   28e34:	003e3906 	br	2871c <__alt_data_end+0xfffe871c>
   28e38:	dc002715 	stw	r16,156(sp)
   28e3c:	d8002515 	stw	zero,148(sp)
   28e40:	1f3ff404 	addi	fp,r3,-48
   28e44:	0009883a 	mov	r4,zero
   28e48:	b021883a 	mov	r16,r22
   28e4c:	01400284 	movi	r5,10
   28e50:	002b0980 	call	2b098 <__mulsi3>
   28e54:	80c00007 	ldb	r3,0(r16)
   28e58:	e089883a 	add	r4,fp,r2
   28e5c:	b5800044 	addi	r22,r22,1
   28e60:	1f3ff404 	addi	fp,r3,-48
   28e64:	b021883a 	mov	r16,r22
   28e68:	af3ff82e 	bgeu	r21,fp,28e4c <__alt_data_end+0xfffe8e4c>
   28e6c:	d9002515 	stw	r4,148(sp)
   28e70:	dc002717 	ldw	r16,156(sp)
   28e74:	003e2a06 	br	28720 <__alt_data_end+0xfffe8720>
   28e78:	9cc03fcc 	andi	r19,r19,255
   28e7c:	b811883a 	mov	r8,r23
   28e80:	9802e91e 	bne	r19,zero,29a28 <___vfiprintf_internal_r+0x1480>
   28e84:	8c400414 	ori	r17,r17,16
   28e88:	8880080c 	andi	r2,r17,32
   28e8c:	103fb81e 	bne	r2,zero,28d70 <__alt_data_end+0xfffe8d70>
   28e90:	8880040c 	andi	r2,r17,16
   28e94:	10022e26 	beq	r2,zero,29750 <___vfiprintf_internal_r+0x11a8>
   28e98:	d9402217 	ldw	r5,136(sp)
   28e9c:	2cc00017 	ldw	r19,0(r5)
   28ea0:	29400104 	addi	r5,r5,4
   28ea4:	d9402215 	stw	r5,136(sp)
   28ea8:	9829d7fa 	srai	r20,r19,31
   28eac:	a005883a 	mov	r2,r20
   28eb0:	003fb506 	br	28d88 <__alt_data_end+0xfffe8d88>
   28eb4:	9cc03fcc 	andi	r19,r19,255
   28eb8:	b811883a 	mov	r8,r23
   28ebc:	9802fa1e 	bne	r19,zero,29aa8 <___vfiprintf_internal_r+0x1500>
   28ec0:	8c400414 	ori	r17,r17,16
   28ec4:	8880080c 	andi	r2,r17,32
   28ec8:	103f661e 	bne	r2,zero,28c64 <__alt_data_end+0xfffe8c64>
   28ecc:	8880040c 	andi	r2,r17,16
   28ed0:	10020626 	beq	r2,zero,296ec <___vfiprintf_internal_r+0x1144>
   28ed4:	d9402217 	ldw	r5,136(sp)
   28ed8:	d8001d85 	stb	zero,118(sp)
   28edc:	0029883a 	mov	r20,zero
   28ee0:	28800104 	addi	r2,r5,4
   28ee4:	2cc00017 	ldw	r19,0(r5)
   28ee8:	80020816 	blt	r16,zero,2970c <___vfiprintf_internal_r+0x1164>
   28eec:	00ffdfc4 	movi	r3,-129
   28ef0:	d8802215 	stw	r2,136(sp)
   28ef4:	88e2703a 	and	r17,r17,r3
   28ef8:	983f651e 	bne	r19,zero,28c90 <__alt_data_end+0xfffe8c90>
   28efc:	002b883a 	mov	r21,zero
   28f00:	8002cf26 	beq	r16,zero,29a40 <___vfiprintf_internal_r+0x1498>
   28f04:	0027883a 	mov	r19,zero
   28f08:	0029883a 	mov	r20,zero
   28f0c:	003f6106 	br	28c94 <__alt_data_end+0xfffe8c94>
   28f10:	9cc03fcc 	andi	r19,r19,255
   28f14:	b811883a 	mov	r8,r23
   28f18:	9802e01e 	bne	r19,zero,29a9c <___vfiprintf_internal_r+0x14f4>
   28f1c:	8c400414 	ori	r17,r17,16
   28f20:	8880080c 	andi	r2,r17,32
   28f24:	1000641e 	bne	r2,zero,290b8 <___vfiprintf_internal_r+0xb10>
   28f28:	8880040c 	andi	r2,r17,16
   28f2c:	1001c81e 	bne	r2,zero,29650 <___vfiprintf_internal_r+0x10a8>
   28f30:	8880100c 	andi	r2,r17,64
   28f34:	d8001d85 	stb	zero,118(sp)
   28f38:	1002281e 	bne	r2,zero,297dc <___vfiprintf_internal_r+0x1234>
   28f3c:	d9002217 	ldw	r4,136(sp)
   28f40:	0029883a 	mov	r20,zero
   28f44:	20800104 	addi	r2,r4,4
   28f48:	24c00017 	ldw	r19,0(r4)
   28f4c:	8001c60e 	bge	r16,zero,29668 <___vfiprintf_internal_r+0x10c0>
   28f50:	d8802215 	stw	r2,136(sp)
   28f54:	002b883a 	mov	r21,zero
   28f58:	9d04b03a 	or	r2,r19,r20
   28f5c:	103f911e 	bne	r2,zero,28da4 <__alt_data_end+0xfffe8da4>
   28f60:	00800044 	movi	r2,1
   28f64:	10803fcc 	andi	r2,r2,255
   28f68:	00c00044 	movi	r3,1
   28f6c:	10c05f26 	beq	r2,r3,290ec <___vfiprintf_internal_r+0xb44>
   28f70:	00c00084 	movi	r3,2
   28f74:	10ffe31e 	bne	r2,r3,28f04 <__alt_data_end+0xfffe8f04>
   28f78:	0027883a 	mov	r19,zero
   28f7c:	0029883a 	mov	r20,zero
   28f80:	00015106 	br	294c8 <___vfiprintf_internal_r+0xf20>
   28f84:	9cc03fcc 	andi	r19,r19,255
   28f88:	b811883a 	mov	r8,r23
   28f8c:	9802c01e 	bne	r19,zero,29a90 <___vfiprintf_internal_r+0x14e8>
   28f90:	014000f4 	movhi	r5,3
   28f94:	2942bd04 	addi	r5,r5,2804
   28f98:	d9402615 	stw	r5,152(sp)
   28f9c:	8880080c 	andi	r2,r17,32
   28fa0:	103f541e 	bne	r2,zero,28cf4 <__alt_data_end+0xfffe8cf4>
   28fa4:	8880040c 	andi	r2,r17,16
   28fa8:	1001f226 	beq	r2,zero,29774 <___vfiprintf_internal_r+0x11cc>
   28fac:	d9402217 	ldw	r5,136(sp)
   28fb0:	0029883a 	mov	r20,zero
   28fb4:	2cc00017 	ldw	r19,0(r5)
   28fb8:	29400104 	addi	r5,r5,4
   28fbc:	d9402215 	stw	r5,136(sp)
   28fc0:	003f5106 	br	28d08 <__alt_data_end+0xfffe8d08>
   28fc4:	d8c02217 	ldw	r3,136(sp)
   28fc8:	b811883a 	mov	r8,r23
   28fcc:	d8001d85 	stb	zero,118(sp)
   28fd0:	1dc00017 	ldw	r23,0(r3)
   28fd4:	1f000104 	addi	fp,r3,4
   28fd8:	b8025926 	beq	r23,zero,29940 <___vfiprintf_internal_r+0x1398>
   28fdc:	80023316 	blt	r16,zero,298ac <___vfiprintf_internal_r+0x1304>
   28fe0:	800d883a 	mov	r6,r16
   28fe4:	000b883a 	mov	r5,zero
   28fe8:	b809883a 	mov	r4,r23
   28fec:	da002a15 	stw	r8,168(sp)
   28ff0:	00266e80 	call	266e8 <memchr>
   28ff4:	da002a17 	ldw	r8,168(sp)
   28ff8:	10026826 	beq	r2,zero,2999c <___vfiprintf_internal_r+0x13f4>
   28ffc:	15e9c83a 	sub	r20,r2,r23
   29000:	dd401d83 	ldbu	r21,118(sp)
   29004:	df002215 	stw	fp,136(sp)
   29008:	0021883a 	mov	r16,zero
   2900c:	003e6906 	br	289b4 <__alt_data_end+0xfffe89b4>
   29010:	9cc03fcc 	andi	r19,r19,255
   29014:	b811883a 	mov	r8,r23
   29018:	983fc126 	beq	r19,zero,28f20 <__alt_data_end+0xfffe8f20>
   2901c:	d8c02303 	ldbu	r3,140(sp)
   29020:	d8c01d85 	stb	r3,118(sp)
   29024:	003fbe06 	br	28f20 <__alt_data_end+0xfffe8f20>
   29028:	d9002217 	ldw	r4,136(sp)
   2902c:	d9402217 	ldw	r5,136(sp)
   29030:	21000017 	ldw	r4,0(r4)
   29034:	28800104 	addi	r2,r5,4
   29038:	d9002515 	stw	r4,148(sp)
   2903c:	203e3d16 	blt	r4,zero,28934 <__alt_data_end+0xfffe8934>
   29040:	d8802215 	stw	r2,136(sp)
   29044:	b0c00007 	ldb	r3,0(r22)
   29048:	003db406 	br	2871c <__alt_data_end+0xfffe871c>
   2904c:	00c00ac4 	movi	r3,43
   29050:	d8c02305 	stb	r3,140(sp)
   29054:	04c00044 	movi	r19,1
   29058:	b0c00007 	ldb	r3,0(r22)
   2905c:	003daf06 	br	2871c <__alt_data_end+0xfffe871c>
   29060:	b0c00007 	ldb	r3,0(r22)
   29064:	01000a84 	movi	r4,42
   29068:	b4000044 	addi	r16,r22,1
   2906c:	19025e26 	beq	r3,r4,299e8 <___vfiprintf_internal_r+0x1440>
   29070:	1f3ff404 	addi	fp,r3,-48
   29074:	0009883a 	mov	r4,zero
   29078:	af025236 	bltu	r21,fp,299c4 <___vfiprintf_internal_r+0x141c>
   2907c:	01400284 	movi	r5,10
   29080:	002b0980 	call	2b098 <__mulsi3>
   29084:	80c00007 	ldb	r3,0(r16)
   29088:	1709883a 	add	r4,r2,fp
   2908c:	85800044 	addi	r22,r16,1
   29090:	1f3ff404 	addi	fp,r3,-48
   29094:	b021883a 	mov	r16,r22
   29098:	af3ff82e 	bgeu	r21,fp,2907c <__alt_data_end+0xfffe907c>
   2909c:	2021883a 	mov	r16,r4
   290a0:	203d9f0e 	bge	r4,zero,28720 <__alt_data_end+0xfffe8720>
   290a4:	043fffc4 	movi	r16,-1
   290a8:	003d9d06 	br	28720 <__alt_data_end+0xfffe8720>
   290ac:	8c401014 	ori	r17,r17,64
   290b0:	b0c00007 	ldb	r3,0(r22)
   290b4:	003d9906 	br	2871c <__alt_data_end+0xfffe871c>
   290b8:	d9002217 	ldw	r4,136(sp)
   290bc:	d8001d85 	stb	zero,118(sp)
   290c0:	20c00204 	addi	r3,r4,8
   290c4:	24c00017 	ldw	r19,0(r4)
   290c8:	25000117 	ldw	r20,4(r4)
   290cc:	8001e716 	blt	r16,zero,2986c <___vfiprintf_internal_r+0x12c4>
   290d0:	013fdfc4 	movi	r4,-129
   290d4:	9d04b03a 	or	r2,r19,r20
   290d8:	d8c02215 	stw	r3,136(sp)
   290dc:	8922703a 	and	r17,r17,r4
   290e0:	002b883a 	mov	r21,zero
   290e4:	103f2f1e 	bne	r2,zero,28da4 <__alt_data_end+0xfffe8da4>
   290e8:	803e2f26 	beq	r16,zero,289a8 <__alt_data_end+0xfffe89a8>
   290ec:	0027883a 	mov	r19,zero
   290f0:	9cc00c04 	addi	r19,r19,48
   290f4:	dcc019c5 	stb	r19,103(sp)
   290f8:	dd002817 	ldw	r20,160(sp)
   290fc:	ddc019c4 	addi	r23,sp,103
   29100:	003e2c06 	br	289b4 <__alt_data_end+0xfffe89b4>
   29104:	9cc03fcc 	andi	r19,r19,255
   29108:	b811883a 	mov	r8,r23
   2910c:	9802571e 	bne	r19,zero,29a6c <___vfiprintf_internal_r+0x14c4>
   29110:	18005726 	beq	r3,zero,29270 <___vfiprintf_internal_r+0xcc8>
   29114:	04c00044 	movi	r19,1
   29118:	d8c01005 	stb	r3,64(sp)
   2911c:	d8001d85 	stb	zero,118(sp)
   29120:	9829883a 	mov	r20,r19
   29124:	ddc01004 	addi	r23,sp,64
   29128:	003f0a06 	br	28d54 <__alt_data_end+0xfffe8d54>
   2912c:	d9402017 	ldw	r5,128(sp)
   29130:	d9002117 	ldw	r4,132(sp)
   29134:	d9801a04 	addi	r6,sp,104
   29138:	da802a15 	stw	r10,168(sp)
   2913c:	00284940 	call	28494 <__sprint_r.part.0>
   29140:	da802a17 	ldw	r10,168(sp)
   29144:	1000501e 	bne	r2,zero,29288 <___vfiprintf_internal_r+0xce0>
   29148:	d9801b17 	ldw	r6,108(sp)
   2914c:	d8801c17 	ldw	r2,112(sp)
   29150:	d811883a 	mov	r8,sp
   29154:	31000044 	addi	r4,r6,1
   29158:	003e3606 	br	28a34 <__alt_data_end+0xfffe8a34>
   2915c:	d9001b17 	ldw	r4,108(sp)
   29160:	d8801c17 	ldw	r2,112(sp)
   29164:	21400044 	addi	r5,r4,1
   29168:	d9801d87 	ldb	r6,118(sp)
   2916c:	303e5226 	beq	r6,zero,28ab8 <__alt_data_end+0xfffe8ab8>
   29170:	01800044 	movi	r6,1
   29174:	d9001d84 	addi	r4,sp,118
   29178:	1185883a 	add	r2,r2,r6
   2917c:	41000015 	stw	r4,0(r8)
   29180:	41800115 	stw	r6,4(r8)
   29184:	d8801c15 	stw	r2,112(sp)
   29188:	d9401b15 	stw	r5,108(sp)
   2918c:	010001c4 	movi	r4,7
   29190:	2140b00e 	bge	r4,r5,29454 <___vfiprintf_internal_r+0xeac>
   29194:	1000f61e 	bne	r2,zero,29570 <___vfiprintf_internal_r+0xfc8>
   29198:	3800b31e 	bne	r7,zero,29468 <___vfiprintf_internal_r+0xec0>
   2919c:	0009883a 	mov	r4,zero
   291a0:	300b883a 	mov	r5,r6
   291a4:	d811883a 	mov	r8,sp
   291a8:	01802004 	movi	r6,128
   291ac:	19be5226 	beq	r3,r6,28af8 <__alt_data_end+0xfffe8af8>
   291b0:	8521c83a 	sub	r16,r16,r20
   291b4:	043e790e 	bge	zero,r16,28b9c <__alt_data_end+0xfffe8b9c>
   291b8:	05400404 	movi	r21,16
   291bc:	ac01b00e 	bge	r21,r16,29880 <___vfiprintf_internal_r+0x12d8>
   291c0:	014000f4 	movhi	r5,3
   291c4:	29432304 	addi	r5,r5,3212
   291c8:	d9402315 	stw	r5,140(sp)
   291cc:	070001c4 	movi	fp,7
   291d0:	00000506 	br	291e8 <___vfiprintf_internal_r+0xc40>
   291d4:	21400084 	addi	r5,r4,2
   291d8:	42000204 	addi	r8,r8,8
   291dc:	1809883a 	mov	r4,r3
   291e0:	843ffc04 	addi	r16,r16,-16
   291e4:	ac000d0e 	bge	r21,r16,2921c <___vfiprintf_internal_r+0xc74>
   291e8:	10800404 	addi	r2,r2,16
   291ec:	20c00044 	addi	r3,r4,1
   291f0:	44800015 	stw	r18,0(r8)
   291f4:	45400115 	stw	r21,4(r8)
   291f8:	d8801c15 	stw	r2,112(sp)
   291fc:	d8c01b15 	stw	r3,108(sp)
   29200:	e0fff40e 	bge	fp,r3,291d4 <__alt_data_end+0xfffe91d4>
   29204:	1000101e 	bne	r2,zero,29248 <___vfiprintf_internal_r+0xca0>
   29208:	843ffc04 	addi	r16,r16,-16
   2920c:	01400044 	movi	r5,1
   29210:	0009883a 	mov	r4,zero
   29214:	d811883a 	mov	r8,sp
   29218:	ac3ff316 	blt	r21,r16,291e8 <__alt_data_end+0xfffe91e8>
   2921c:	d8c02317 	ldw	r3,140(sp)
   29220:	1405883a 	add	r2,r2,r16
   29224:	44000115 	stw	r16,4(r8)
   29228:	40c00015 	stw	r3,0(r8)
   2922c:	d8801c15 	stw	r2,112(sp)
   29230:	d9401b15 	stw	r5,108(sp)
   29234:	00c001c4 	movi	r3,7
   29238:	19401916 	blt	r3,r5,292a0 <___vfiprintf_internal_r+0xcf8>
   2923c:	42000204 	addi	r8,r8,8
   29240:	29400044 	addi	r5,r5,1
   29244:	003e5506 	br	28b9c <__alt_data_end+0xfffe8b9c>
   29248:	d9402017 	ldw	r5,128(sp)
   2924c:	d9002117 	ldw	r4,132(sp)
   29250:	d9801a04 	addi	r6,sp,104
   29254:	00284940 	call	28494 <__sprint_r.part.0>
   29258:	10000b1e 	bne	r2,zero,29288 <___vfiprintf_internal_r+0xce0>
   2925c:	d9001b17 	ldw	r4,108(sp)
   29260:	d8801c17 	ldw	r2,112(sp)
   29264:	d811883a 	mov	r8,sp
   29268:	21400044 	addi	r5,r4,1
   2926c:	003fdc06 	br	291e0 <__alt_data_end+0xfffe91e0>
   29270:	d8801c17 	ldw	r2,112(sp)
   29274:	10000426 	beq	r2,zero,29288 <___vfiprintf_internal_r+0xce0>
   29278:	d9402017 	ldw	r5,128(sp)
   2927c:	d9002117 	ldw	r4,132(sp)
   29280:	d9801a04 	addi	r6,sp,104
   29284:	00284940 	call	28494 <__sprint_r.part.0>
   29288:	d9402017 	ldw	r5,128(sp)
   2928c:	2880030b 	ldhu	r2,12(r5)
   29290:	1080100c 	andi	r2,r2,64
   29294:	10014d1e 	bne	r2,zero,297cc <___vfiprintf_internal_r+0x1224>
   29298:	d8802417 	ldw	r2,144(sp)
   2929c:	003d9706 	br	288fc <__alt_data_end+0xfffe88fc>
   292a0:	1000d21e 	bne	r2,zero,295ec <___vfiprintf_internal_r+0x1044>
   292a4:	00c00044 	movi	r3,1
   292a8:	a005883a 	mov	r2,r20
   292ac:	ddc00015 	stw	r23,0(sp)
   292b0:	dd000115 	stw	r20,4(sp)
   292b4:	dd001c15 	stw	r20,112(sp)
   292b8:	d8c01b15 	stw	r3,108(sp)
   292bc:	d811883a 	mov	r8,sp
   292c0:	42000204 	addi	r8,r8,8
   292c4:	8c40010c 	andi	r17,r17,4
   292c8:	88004026 	beq	r17,zero,293cc <___vfiprintf_internal_r+0xe24>
   292cc:	d9002517 	ldw	r4,148(sp)
   292d0:	24e3c83a 	sub	r17,r4,r19
   292d4:	04403d0e 	bge	zero,r17,293cc <___vfiprintf_internal_r+0xe24>
   292d8:	04000404 	movi	r16,16
   292dc:	8441a90e 	bge	r16,r17,29984 <___vfiprintf_internal_r+0x13dc>
   292e0:	00c000f4 	movhi	r3,3
   292e4:	18c32704 	addi	r3,r3,3228
   292e8:	d9001b17 	ldw	r4,108(sp)
   292ec:	d8c02315 	stw	r3,140(sp)
   292f0:	050001c4 	movi	r20,7
   292f4:	dd402117 	ldw	r21,132(sp)
   292f8:	ddc02017 	ldw	r23,128(sp)
   292fc:	00000506 	br	29314 <___vfiprintf_internal_r+0xd6c>
   29300:	21400084 	addi	r5,r4,2
   29304:	42000204 	addi	r8,r8,8
   29308:	1809883a 	mov	r4,r3
   2930c:	8c7ffc04 	addi	r17,r17,-16
   29310:	84400f0e 	bge	r16,r17,29350 <___vfiprintf_internal_r+0xda8>
   29314:	014000f4 	movhi	r5,3
   29318:	10800404 	addi	r2,r2,16
   2931c:	20c00044 	addi	r3,r4,1
   29320:	29432704 	addi	r5,r5,3228
   29324:	41400015 	stw	r5,0(r8)
   29328:	44000115 	stw	r16,4(r8)
   2932c:	d8801c15 	stw	r2,112(sp)
   29330:	d8c01b15 	stw	r3,108(sp)
   29334:	a0fff20e 	bge	r20,r3,29300 <__alt_data_end+0xfffe9300>
   29338:	1000141e 	bne	r2,zero,2938c <___vfiprintf_internal_r+0xde4>
   2933c:	8c7ffc04 	addi	r17,r17,-16
   29340:	01400044 	movi	r5,1
   29344:	0009883a 	mov	r4,zero
   29348:	d811883a 	mov	r8,sp
   2934c:	847ff116 	blt	r16,r17,29314 <__alt_data_end+0xfffe9314>
   29350:	d8c02317 	ldw	r3,140(sp)
   29354:	1445883a 	add	r2,r2,r17
   29358:	44400115 	stw	r17,4(r8)
   2935c:	40c00015 	stw	r3,0(r8)
   29360:	d8801c15 	stw	r2,112(sp)
   29364:	d9401b15 	stw	r5,108(sp)
   29368:	00c001c4 	movi	r3,7
   2936c:	1940170e 	bge	r3,r5,293cc <___vfiprintf_internal_r+0xe24>
   29370:	1000101e 	bne	r2,zero,293b4 <___vfiprintf_internal_r+0xe0c>
   29374:	d8802517 	ldw	r2,148(sp)
   29378:	14c11616 	blt	r2,r19,297d4 <___vfiprintf_internal_r+0x122c>
   2937c:	d9002417 	ldw	r4,144(sp)
   29380:	2089883a 	add	r4,r4,r2
   29384:	d9002415 	stw	r4,144(sp)
   29388:	003e1806 	br	28bec <__alt_data_end+0xfffe8bec>
   2938c:	d9801a04 	addi	r6,sp,104
   29390:	b80b883a 	mov	r5,r23
   29394:	a809883a 	mov	r4,r21
   29398:	00284940 	call	28494 <__sprint_r.part.0>
   2939c:	103fba1e 	bne	r2,zero,29288 <__alt_data_end+0xfffe9288>
   293a0:	d9001b17 	ldw	r4,108(sp)
   293a4:	d8801c17 	ldw	r2,112(sp)
   293a8:	d811883a 	mov	r8,sp
   293ac:	21400044 	addi	r5,r4,1
   293b0:	003fd606 	br	2930c <__alt_data_end+0xfffe930c>
   293b4:	d9402017 	ldw	r5,128(sp)
   293b8:	d9002117 	ldw	r4,132(sp)
   293bc:	d9801a04 	addi	r6,sp,104
   293c0:	00284940 	call	28494 <__sprint_r.part.0>
   293c4:	103fb01e 	bne	r2,zero,29288 <__alt_data_end+0xfffe9288>
   293c8:	d8801c17 	ldw	r2,112(sp)
   293cc:	d8c02517 	ldw	r3,148(sp)
   293d0:	1cc0010e 	bge	r3,r19,293d8 <___vfiprintf_internal_r+0xe30>
   293d4:	9807883a 	mov	r3,r19
   293d8:	d9002417 	ldw	r4,144(sp)
   293dc:	20c9883a 	add	r4,r4,r3
   293e0:	d9002415 	stw	r4,144(sp)
   293e4:	103e0126 	beq	r2,zero,28bec <__alt_data_end+0xfffe8bec>
   293e8:	d9402017 	ldw	r5,128(sp)
   293ec:	d9002117 	ldw	r4,132(sp)
   293f0:	d9801a04 	addi	r6,sp,104
   293f4:	00284940 	call	28494 <__sprint_r.part.0>
   293f8:	103dfc26 	beq	r2,zero,28bec <__alt_data_end+0xfffe8bec>
   293fc:	003fa206 	br	29288 <__alt_data_end+0xfffe9288>
   29400:	d9402017 	ldw	r5,128(sp)
   29404:	d9002117 	ldw	r4,132(sp)
   29408:	d9801a04 	addi	r6,sp,104
   2940c:	d9c02b15 	stw	r7,172(sp)
   29410:	00284940 	call	28494 <__sprint_r.part.0>
   29414:	d9c02b17 	ldw	r7,172(sp)
   29418:	103f9b1e 	bne	r2,zero,29288 <__alt_data_end+0xfffe9288>
   2941c:	d9001b17 	ldw	r4,108(sp)
   29420:	d8801c17 	ldw	r2,112(sp)
   29424:	d811883a 	mov	r8,sp
   29428:	21800044 	addi	r6,r4,1
   2942c:	003dbf06 	br	28b2c <__alt_data_end+0xfffe8b2c>
   29430:	1000d81e 	bne	r2,zero,29794 <___vfiprintf_internal_r+0x11ec>
   29434:	d9001d87 	ldb	r4,118(sp)
   29438:	20000a26 	beq	r4,zero,29464 <___vfiprintf_internal_r+0xebc>
   2943c:	00800044 	movi	r2,1
   29440:	d9001d84 	addi	r4,sp,118
   29444:	100b883a 	mov	r5,r2
   29448:	d9000015 	stw	r4,0(sp)
   2944c:	d8800115 	stw	r2,4(sp)
   29450:	d811883a 	mov	r8,sp
   29454:	2809883a 	mov	r4,r5
   29458:	42000204 	addi	r8,r8,8
   2945c:	29400044 	addi	r5,r5,1
   29460:	003d9506 	br	28ab8 <__alt_data_end+0xfffe8ab8>
   29464:	3800fd26 	beq	r7,zero,2985c <___vfiprintf_internal_r+0x12b4>
   29468:	00800084 	movi	r2,2
   2946c:	d9001d04 	addi	r4,sp,116
   29470:	d9000015 	stw	r4,0(sp)
   29474:	d8800115 	stw	r2,4(sp)
   29478:	01400044 	movi	r5,1
   2947c:	d811883a 	mov	r8,sp
   29480:	2809883a 	mov	r4,r5
   29484:	42000204 	addi	r8,r8,8
   29488:	29400044 	addi	r5,r5,1
   2948c:	003f4606 	br	291a8 <__alt_data_end+0xfffe91a8>
   29490:	d8802517 	ldw	r2,148(sp)
   29494:	14c0010e 	bge	r2,r19,2949c <___vfiprintf_internal_r+0xef4>
   29498:	9805883a 	mov	r2,r19
   2949c:	d9402417 	ldw	r5,144(sp)
   294a0:	288b883a 	add	r5,r5,r2
   294a4:	d9402415 	stw	r5,144(sp)
   294a8:	003dd006 	br	28bec <__alt_data_end+0xfffe8bec>
   294ac:	d8001d85 	stb	zero,118(sp)
   294b0:	80005d16 	blt	r16,zero,29628 <___vfiprintf_internal_r+0x1080>
   294b4:	00ffdfc4 	movi	r3,-129
   294b8:	9d04b03a 	or	r2,r19,r20
   294bc:	88e2703a 	and	r17,r17,r3
   294c0:	103d3726 	beq	r2,zero,289a0 <__alt_data_end+0xfffe89a0>
   294c4:	002b883a 	mov	r21,zero
   294c8:	d9002617 	ldw	r4,152(sp)
   294cc:	ddc01a04 	addi	r23,sp,104
   294d0:	988003cc 	andi	r2,r19,15
   294d4:	a006973a 	slli	r3,r20,28
   294d8:	2085883a 	add	r2,r4,r2
   294dc:	9826d13a 	srli	r19,r19,4
   294e0:	10800003 	ldbu	r2,0(r2)
   294e4:	a028d13a 	srli	r20,r20,4
   294e8:	bdffffc4 	addi	r23,r23,-1
   294ec:	1ce6b03a 	or	r19,r3,r19
   294f0:	b8800005 	stb	r2,0(r23)
   294f4:	9d04b03a 	or	r2,r19,r20
   294f8:	103ff51e 	bne	r2,zero,294d0 <__alt_data_end+0xfffe94d0>
   294fc:	d8801e17 	ldw	r2,120(sp)
   29500:	15e9c83a 	sub	r20,r2,r23
   29504:	003d2b06 	br	289b4 <__alt_data_end+0xfffe89b4>
   29508:	d9402017 	ldw	r5,128(sp)
   2950c:	d9002117 	ldw	r4,132(sp)
   29510:	d9801a04 	addi	r6,sp,104
   29514:	00284940 	call	28494 <__sprint_r.part.0>
   29518:	103f5b1e 	bne	r2,zero,29288 <__alt_data_end+0xfffe9288>
   2951c:	d8801c17 	ldw	r2,112(sp)
   29520:	d811883a 	mov	r8,sp
   29524:	003f6706 	br	292c4 <__alt_data_end+0xfffe92c4>
   29528:	d9402017 	ldw	r5,128(sp)
   2952c:	d9002117 	ldw	r4,132(sp)
   29530:	d9801a04 	addi	r6,sp,104
   29534:	00284940 	call	28494 <__sprint_r.part.0>
   29538:	103f531e 	bne	r2,zero,29288 <__alt_data_end+0xfffe9288>
   2953c:	d811883a 	mov	r8,sp
   29540:	003cd906 	br	288a8 <__alt_data_end+0xfffe88a8>
   29544:	10803fcc 	andi	r2,r2,255
   29548:	1080201c 	xori	r2,r2,128
   2954c:	10bfe004 	addi	r2,r2,-128
   29550:	00c00c04 	movi	r3,48
   29554:	10ffe926 	beq	r2,r3,294fc <__alt_data_end+0xfffe94fc>
   29558:	b8ffffc5 	stb	r3,-1(r23)
   2955c:	d8c01e17 	ldw	r3,120(sp)
   29560:	b8bfffc4 	addi	r2,r23,-1
   29564:	102f883a 	mov	r23,r2
   29568:	18a9c83a 	sub	r20,r3,r2
   2956c:	003d1106 	br	289b4 <__alt_data_end+0xfffe89b4>
   29570:	d9402017 	ldw	r5,128(sp)
   29574:	d9002117 	ldw	r4,132(sp)
   29578:	d9801a04 	addi	r6,sp,104
   2957c:	d8c02a15 	stw	r3,168(sp)
   29580:	d9c02b15 	stw	r7,172(sp)
   29584:	00284940 	call	28494 <__sprint_r.part.0>
   29588:	d8c02a17 	ldw	r3,168(sp)
   2958c:	d9c02b17 	ldw	r7,172(sp)
   29590:	103f3d1e 	bne	r2,zero,29288 <__alt_data_end+0xfffe9288>
   29594:	d9001b17 	ldw	r4,108(sp)
   29598:	d8801c17 	ldw	r2,112(sp)
   2959c:	d811883a 	mov	r8,sp
   295a0:	21400044 	addi	r5,r4,1
   295a4:	003d4406 	br	28ab8 <__alt_data_end+0xfffe8ab8>
   295a8:	d9402017 	ldw	r5,128(sp)
   295ac:	d9002117 	ldw	r4,132(sp)
   295b0:	d9801a04 	addi	r6,sp,104
   295b4:	d8c02a15 	stw	r3,168(sp)
   295b8:	00284940 	call	28494 <__sprint_r.part.0>
   295bc:	d8c02a17 	ldw	r3,168(sp)
   295c0:	103f311e 	bne	r2,zero,29288 <__alt_data_end+0xfffe9288>
   295c4:	d9001b17 	ldw	r4,108(sp)
   295c8:	d8801c17 	ldw	r2,112(sp)
   295cc:	d811883a 	mov	r8,sp
   295d0:	21400044 	addi	r5,r4,1
   295d4:	003ef406 	br	291a8 <__alt_data_end+0xfffe91a8>
   295d8:	1000bd1e 	bne	r2,zero,298d0 <___vfiprintf_internal_r+0x1328>
   295dc:	01400044 	movi	r5,1
   295e0:	0009883a 	mov	r4,zero
   295e4:	d811883a 	mov	r8,sp
   295e8:	003ef106 	br	291b0 <__alt_data_end+0xfffe91b0>
   295ec:	d9402017 	ldw	r5,128(sp)
   295f0:	d9002117 	ldw	r4,132(sp)
   295f4:	d9801a04 	addi	r6,sp,104
   295f8:	00284940 	call	28494 <__sprint_r.part.0>
   295fc:	103f221e 	bne	r2,zero,29288 <__alt_data_end+0xfffe9288>
   29600:	d9401b17 	ldw	r5,108(sp)
   29604:	d8801c17 	ldw	r2,112(sp)
   29608:	d811883a 	mov	r8,sp
   2960c:	29400044 	addi	r5,r5,1
   29610:	003d6206 	br	28b9c <__alt_data_end+0xfffe8b9c>
   29614:	014000f4 	movhi	r5,3
   29618:	2942c204 	addi	r5,r5,2824
   2961c:	d9402615 	stw	r5,152(sp)
   29620:	d8c02215 	stw	r3,136(sp)
   29624:	1023883a 	mov	r17,r2
   29628:	9d04b03a 	or	r2,r19,r20
   2962c:	103fa51e 	bne	r2,zero,294c4 <__alt_data_end+0xfffe94c4>
   29630:	002b883a 	mov	r21,zero
   29634:	00800084 	movi	r2,2
   29638:	003e4a06 	br	28f64 <__alt_data_end+0xfffe8f64>
   2963c:	014000f4 	movhi	r5,3
   29640:	2942c204 	addi	r5,r5,2824
   29644:	002b883a 	mov	r21,zero
   29648:	d9402615 	stw	r5,152(sp)
   2964c:	003f9e06 	br	294c8 <__alt_data_end+0xfffe94c8>
   29650:	d9402217 	ldw	r5,136(sp)
   29654:	d8001d85 	stb	zero,118(sp)
   29658:	0029883a 	mov	r20,zero
   2965c:	28800104 	addi	r2,r5,4
   29660:	2cc00017 	ldw	r19,0(r5)
   29664:	803e3a16 	blt	r16,zero,28f50 <__alt_data_end+0xfffe8f50>
   29668:	00ffdfc4 	movi	r3,-129
   2966c:	d8802215 	stw	r2,136(sp)
   29670:	88e2703a 	and	r17,r17,r3
   29674:	002b883a 	mov	r21,zero
   29678:	983e9b26 	beq	r19,zero,290e8 <__alt_data_end+0xfffe90e8>
   2967c:	00800244 	movi	r2,9
   29680:	14fdc936 	bltu	r2,r19,28da8 <__alt_data_end+0xfffe8da8>
   29684:	003e9a06 	br	290f0 <__alt_data_end+0xfffe90f0>
   29688:	00800c04 	movi	r2,48
   2968c:	d8c01d45 	stb	r3,117(sp)
   29690:	d8801d05 	stb	r2,116(sp)
   29694:	d8001d85 	stb	zero,118(sp)
   29698:	88c00094 	ori	r3,r17,2
   2969c:	80009c16 	blt	r16,zero,29910 <___vfiprintf_internal_r+0x1368>
   296a0:	00bfdfc4 	movi	r2,-129
   296a4:	88a2703a 	and	r17,r17,r2
   296a8:	8c400094 	ori	r17,r17,2
   296ac:	002b883a 	mov	r21,zero
   296b0:	003f8506 	br	294c8 <__alt_data_end+0xfffe94c8>
   296b4:	b029883a 	mov	r20,r22
   296b8:	003c0b06 	br	286e8 <__alt_data_end+0xfffe86e8>
   296bc:	04e7c83a 	sub	r19,zero,r19
   296c0:	05400b44 	movi	r21,45
   296c4:	9804c03a 	cmpne	r2,r19,zero
   296c8:	0529c83a 	sub	r20,zero,r20
   296cc:	dd401d85 	stb	r21,118(sp)
   296d0:	a0a9c83a 	sub	r20,r20,r2
   296d4:	80009716 	blt	r16,zero,29934 <___vfiprintf_internal_r+0x138c>
   296d8:	00bfdfc4 	movi	r2,-129
   296dc:	88a2703a 	and	r17,r17,r2
   296e0:	003db006 	br	28da4 <__alt_data_end+0xfffe8da4>
   296e4:	b0c00007 	ldb	r3,0(r22)
   296e8:	003c0c06 	br	2871c <__alt_data_end+0xfffe871c>
   296ec:	8880100c 	andi	r2,r17,64
   296f0:	d8001d85 	stb	zero,118(sp)
   296f4:	1000461e 	bne	r2,zero,29810 <___vfiprintf_internal_r+0x1268>
   296f8:	d9002217 	ldw	r4,136(sp)
   296fc:	0029883a 	mov	r20,zero
   29700:	20800104 	addi	r2,r4,4
   29704:	24c00017 	ldw	r19,0(r4)
   29708:	803df80e 	bge	r16,zero,28eec <__alt_data_end+0xfffe8eec>
   2970c:	9d06b03a 	or	r3,r19,r20
   29710:	d8802215 	stw	r2,136(sp)
   29714:	183d5e1e 	bne	r3,zero,28c90 <__alt_data_end+0xfffe8c90>
   29718:	002b883a 	mov	r21,zero
   2971c:	0005883a 	mov	r2,zero
   29720:	003e1006 	br	28f64 <__alt_data_end+0xfffe8f64>
   29724:	8880040c 	andi	r2,r17,16
   29728:	1000321e 	bne	r2,zero,297f4 <___vfiprintf_internal_r+0x124c>
   2972c:	8c40100c 	andi	r17,r17,64
   29730:	88008d26 	beq	r17,zero,29968 <___vfiprintf_internal_r+0x13c0>
   29734:	d9402217 	ldw	r5,136(sp)
   29738:	d8c02417 	ldw	r3,144(sp)
   2973c:	28800017 	ldw	r2,0(r5)
   29740:	29400104 	addi	r5,r5,4
   29744:	d9402215 	stw	r5,136(sp)
   29748:	10c0000d 	sth	r3,0(r2)
   2974c:	003bca06 	br	28678 <__alt_data_end+0xfffe8678>
   29750:	8880100c 	andi	r2,r17,64
   29754:	10003a26 	beq	r2,zero,29840 <___vfiprintf_internal_r+0x1298>
   29758:	d8802217 	ldw	r2,136(sp)
   2975c:	14c0000f 	ldh	r19,0(r2)
   29760:	10800104 	addi	r2,r2,4
   29764:	d8802215 	stw	r2,136(sp)
   29768:	9829d7fa 	srai	r20,r19,31
   2976c:	a005883a 	mov	r2,r20
   29770:	003d8506 	br	28d88 <__alt_data_end+0xfffe8d88>
   29774:	8880100c 	andi	r2,r17,64
   29778:	10002b26 	beq	r2,zero,29828 <___vfiprintf_internal_r+0x1280>
   2977c:	d8802217 	ldw	r2,136(sp)
   29780:	0029883a 	mov	r20,zero
   29784:	14c0000b 	ldhu	r19,0(r2)
   29788:	10800104 	addi	r2,r2,4
   2978c:	d8802215 	stw	r2,136(sp)
   29790:	003d5d06 	br	28d08 <__alt_data_end+0xfffe8d08>
   29794:	d9402017 	ldw	r5,128(sp)
   29798:	d9002117 	ldw	r4,132(sp)
   2979c:	d9801a04 	addi	r6,sp,104
   297a0:	d8c02a15 	stw	r3,168(sp)
   297a4:	d9c02b15 	stw	r7,172(sp)
   297a8:	00284940 	call	28494 <__sprint_r.part.0>
   297ac:	d8c02a17 	ldw	r3,168(sp)
   297b0:	d9c02b17 	ldw	r7,172(sp)
   297b4:	103eb41e 	bne	r2,zero,29288 <__alt_data_end+0xfffe9288>
   297b8:	d9001b17 	ldw	r4,108(sp)
   297bc:	d8801c17 	ldw	r2,112(sp)
   297c0:	d811883a 	mov	r8,sp
   297c4:	21400044 	addi	r5,r4,1
   297c8:	003e6706 	br	29168 <__alt_data_end+0xfffe9168>
   297cc:	00bfffc4 	movi	r2,-1
   297d0:	003c4a06 	br	288fc <__alt_data_end+0xfffe88fc>
   297d4:	9805883a 	mov	r2,r19
   297d8:	003ee806 	br	2937c <__alt_data_end+0xfffe937c>
   297dc:	d8c02217 	ldw	r3,136(sp)
   297e0:	0029883a 	mov	r20,zero
   297e4:	18800104 	addi	r2,r3,4
   297e8:	1cc0000b 	ldhu	r19,0(r3)
   297ec:	803f9e0e 	bge	r16,zero,29668 <__alt_data_end+0xfffe9668>
   297f0:	003dd706 	br	28f50 <__alt_data_end+0xfffe8f50>
   297f4:	d8c02217 	ldw	r3,136(sp)
   297f8:	d9002417 	ldw	r4,144(sp)
   297fc:	18800017 	ldw	r2,0(r3)
   29800:	18c00104 	addi	r3,r3,4
   29804:	d8c02215 	stw	r3,136(sp)
   29808:	11000015 	stw	r4,0(r2)
   2980c:	003b9a06 	br	28678 <__alt_data_end+0xfffe8678>
   29810:	d8c02217 	ldw	r3,136(sp)
   29814:	0029883a 	mov	r20,zero
   29818:	18800104 	addi	r2,r3,4
   2981c:	1cc0000b 	ldhu	r19,0(r3)
   29820:	803db20e 	bge	r16,zero,28eec <__alt_data_end+0xfffe8eec>
   29824:	003fb906 	br	2970c <__alt_data_end+0xfffe970c>
   29828:	d9002217 	ldw	r4,136(sp)
   2982c:	0029883a 	mov	r20,zero
   29830:	24c00017 	ldw	r19,0(r4)
   29834:	21000104 	addi	r4,r4,4
   29838:	d9002215 	stw	r4,136(sp)
   2983c:	003d3206 	br	28d08 <__alt_data_end+0xfffe8d08>
   29840:	d8c02217 	ldw	r3,136(sp)
   29844:	1cc00017 	ldw	r19,0(r3)
   29848:	18c00104 	addi	r3,r3,4
   2984c:	d8c02215 	stw	r3,136(sp)
   29850:	9829d7fa 	srai	r20,r19,31
   29854:	a005883a 	mov	r2,r20
   29858:	003d4b06 	br	28d88 <__alt_data_end+0xfffe8d88>
   2985c:	0009883a 	mov	r4,zero
   29860:	01400044 	movi	r5,1
   29864:	d811883a 	mov	r8,sp
   29868:	003e4f06 	br	291a8 <__alt_data_end+0xfffe91a8>
   2986c:	d8c02215 	stw	r3,136(sp)
   29870:	002b883a 	mov	r21,zero
   29874:	003db806 	br	28f58 <__alt_data_end+0xfffe8f58>
   29878:	d811883a 	mov	r8,sp
   2987c:	003e9606 	br	292d8 <__alt_data_end+0xfffe92d8>
   29880:	010000f4 	movhi	r4,3
   29884:	21032304 	addi	r4,r4,3212
   29888:	d9002315 	stw	r4,140(sp)
   2988c:	003e6306 	br	2921c <__alt_data_end+0xfffe921c>
   29890:	b0c00043 	ldbu	r3,1(r22)
   29894:	8c400814 	ori	r17,r17,32
   29898:	b5800044 	addi	r22,r22,1
   2989c:	18c03fcc 	andi	r3,r3,255
   298a0:	18c0201c 	xori	r3,r3,128
   298a4:	18ffe004 	addi	r3,r3,-128
   298a8:	003b9c06 	br	2871c <__alt_data_end+0xfffe871c>
   298ac:	b809883a 	mov	r4,r23
   298b0:	da002a15 	stw	r8,168(sp)
   298b4:	0020d180 	call	20d18 <strlen>
   298b8:	1029883a 	mov	r20,r2
   298bc:	dd401d83 	ldbu	r21,118(sp)
   298c0:	df002215 	stw	fp,136(sp)
   298c4:	0021883a 	mov	r16,zero
   298c8:	da002a17 	ldw	r8,168(sp)
   298cc:	003c3906 	br	289b4 <__alt_data_end+0xfffe89b4>
   298d0:	d9402017 	ldw	r5,128(sp)
   298d4:	d9002117 	ldw	r4,132(sp)
   298d8:	d9801a04 	addi	r6,sp,104
   298dc:	00284940 	call	28494 <__sprint_r.part.0>
   298e0:	103e691e 	bne	r2,zero,29288 <__alt_data_end+0xfffe9288>
   298e4:	d9001b17 	ldw	r4,108(sp)
   298e8:	d8801c17 	ldw	r2,112(sp)
   298ec:	d811883a 	mov	r8,sp
   298f0:	21400044 	addi	r5,r4,1
   298f4:	003e2e06 	br	291b0 <__alt_data_end+0xfffe91b0>
   298f8:	010000f4 	movhi	r4,3
   298fc:	21032704 	addi	r4,r4,3228
   29900:	d9002315 	stw	r4,140(sp)
   29904:	d9001b17 	ldw	r4,108(sp)
   29908:	21000044 	addi	r4,r4,1
   2990c:	003c5e06 	br	28a88 <__alt_data_end+0xfffe8a88>
   29910:	002b883a 	mov	r21,zero
   29914:	00800084 	movi	r2,2
   29918:	10803fcc 	andi	r2,r2,255
   2991c:	01000044 	movi	r4,1
   29920:	11002b26 	beq	r2,r4,299d0 <___vfiprintf_internal_r+0x1428>
   29924:	01000084 	movi	r4,2
   29928:	11002b1e 	bne	r2,r4,299d8 <___vfiprintf_internal_r+0x1430>
   2992c:	1823883a 	mov	r17,r3
   29930:	003ee506 	br	294c8 <__alt_data_end+0xfffe94c8>
   29934:	8807883a 	mov	r3,r17
   29938:	00800044 	movi	r2,1
   2993c:	003ff606 	br	29918 <__alt_data_end+0xfffe9918>
   29940:	00800184 	movi	r2,6
   29944:	1400012e 	bgeu	r2,r16,2994c <___vfiprintf_internal_r+0x13a4>
   29948:	1021883a 	mov	r16,r2
   2994c:	8029883a 	mov	r20,r16
   29950:	8027883a 	mov	r19,r16
   29954:	80002216 	blt	r16,zero,299e0 <___vfiprintf_internal_r+0x1438>
   29958:	05c000f4 	movhi	r23,3
   2995c:	df002215 	stw	fp,136(sp)
   29960:	bdc2c704 	addi	r23,r23,2844
   29964:	003cfb06 	br	28d54 <__alt_data_end+0xfffe8d54>
   29968:	d9002217 	ldw	r4,136(sp)
   2996c:	d9402417 	ldw	r5,144(sp)
   29970:	20800017 	ldw	r2,0(r4)
   29974:	21000104 	addi	r4,r4,4
   29978:	d9002215 	stw	r4,136(sp)
   2997c:	11400015 	stw	r5,0(r2)
   29980:	003b3d06 	br	28678 <__alt_data_end+0xfffe8678>
   29984:	014000f4 	movhi	r5,3
   29988:	29432704 	addi	r5,r5,3228
   2998c:	d9402315 	stw	r5,140(sp)
   29990:	d9401b17 	ldw	r5,108(sp)
   29994:	29400044 	addi	r5,r5,1
   29998:	003e6d06 	br	29350 <__alt_data_end+0xfffe9350>
   2999c:	8029883a 	mov	r20,r16
   299a0:	dd401d83 	ldbu	r21,118(sp)
   299a4:	df002215 	stw	fp,136(sp)
   299a8:	0021883a 	mov	r16,zero
   299ac:	003c0106 	br	289b4 <__alt_data_end+0xfffe89b4>
   299b0:	00c000f4 	movhi	r3,3
   299b4:	18c32304 	addi	r3,r3,3212
   299b8:	d8c02315 	stw	r3,140(sp)
   299bc:	280d883a 	mov	r6,r5
   299c0:	003c6906 	br	28b68 <__alt_data_end+0xfffe8b68>
   299c4:	802d883a 	mov	r22,r16
   299c8:	0021883a 	mov	r16,zero
   299cc:	003b5406 	br	28720 <__alt_data_end+0xfffe8720>
   299d0:	1823883a 	mov	r17,r3
   299d4:	003cf306 	br	28da4 <__alt_data_end+0xfffe8da4>
   299d8:	1823883a 	mov	r17,r3
   299dc:	003cad06 	br	28c94 <__alt_data_end+0xfffe8c94>
   299e0:	0027883a 	mov	r19,zero
   299e4:	003fdc06 	br	29958 <__alt_data_end+0xfffe9958>
   299e8:	d9402217 	ldw	r5,136(sp)
   299ec:	8005883a 	mov	r2,r16
   299f0:	b0c00043 	ldbu	r3,1(r22)
   299f4:	2c000017 	ldw	r16,0(r5)
   299f8:	29000104 	addi	r4,r5,4
   299fc:	d9002215 	stw	r4,136(sp)
   29a00:	102d883a 	mov	r22,r2
   29a04:	803fa50e 	bge	r16,zero,2989c <__alt_data_end+0xfffe989c>
   29a08:	18c03fcc 	andi	r3,r3,255
   29a0c:	18c0201c 	xori	r3,r3,128
   29a10:	043fffc4 	movi	r16,-1
   29a14:	18ffe004 	addi	r3,r3,-128
   29a18:	003b4006 	br	2871c <__alt_data_end+0xfffe871c>
   29a1c:	d9402303 	ldbu	r5,140(sp)
   29a20:	d9401d85 	stb	r5,118(sp)
   29a24:	003cae06 	br	28ce0 <__alt_data_end+0xfffe8ce0>
   29a28:	d8c02303 	ldbu	r3,140(sp)
   29a2c:	d8c01d85 	stb	r3,118(sp)
   29a30:	003d1406 	br	28e84 <__alt_data_end+0xfffe8e84>
   29a34:	d8c02303 	ldbu	r3,140(sp)
   29a38:	d8c01d85 	stb	r3,118(sp)
   29a3c:	003cca06 	br	28d68 <__alt_data_end+0xfffe8d68>
   29a40:	8880004c 	andi	r2,r17,1
   29a44:	002b883a 	mov	r21,zero
   29a48:	10000526 	beq	r2,zero,29a60 <___vfiprintf_internal_r+0x14b8>
   29a4c:	00800c04 	movi	r2,48
   29a50:	d88019c5 	stb	r2,103(sp)
   29a54:	dd002817 	ldw	r20,160(sp)
   29a58:	ddc019c4 	addi	r23,sp,103
   29a5c:	003bd506 	br	289b4 <__alt_data_end+0xfffe89b4>
   29a60:	0029883a 	mov	r20,zero
   29a64:	ddc01a04 	addi	r23,sp,104
   29a68:	003bd206 	br	289b4 <__alt_data_end+0xfffe89b4>
   29a6c:	d9002303 	ldbu	r4,140(sp)
   29a70:	d9001d85 	stb	r4,118(sp)
   29a74:	003da606 	br	29110 <__alt_data_end+0xfffe9110>
   29a78:	d8c02303 	ldbu	r3,140(sp)
   29a7c:	d8c01d85 	stb	r3,118(sp)
   29a80:	003c7606 	br	28c5c <__alt_data_end+0xfffe8c5c>
   29a84:	d8c02303 	ldbu	r3,140(sp)
   29a88:	d8c01d85 	stb	r3,118(sp)
   29a8c:	003c6506 	br	28c24 <__alt_data_end+0xfffe8c24>
   29a90:	d9002303 	ldbu	r4,140(sp)
   29a94:	d9001d85 	stb	r4,118(sp)
   29a98:	003d3d06 	br	28f90 <__alt_data_end+0xfffe8f90>
   29a9c:	d8c02303 	ldbu	r3,140(sp)
   29aa0:	d8c01d85 	stb	r3,118(sp)
   29aa4:	003d1d06 	br	28f1c <__alt_data_end+0xfffe8f1c>
   29aa8:	d8c02303 	ldbu	r3,140(sp)
   29aac:	d8c01d85 	stb	r3,118(sp)
   29ab0:	003d0306 	br	28ec0 <__alt_data_end+0xfffe8ec0>

00029ab4 <__vfiprintf_internal>:
   29ab4:	008000f4 	movhi	r2,3
   29ab8:	108a8a04 	addi	r2,r2,10792
   29abc:	300f883a 	mov	r7,r6
   29ac0:	280d883a 	mov	r6,r5
   29ac4:	200b883a 	mov	r5,r4
   29ac8:	11000017 	ldw	r4,0(r2)
   29acc:	00285a81 	jmpi	285a8 <___vfiprintf_internal_r>

00029ad0 <__sbprintf>:
   29ad0:	2880030b 	ldhu	r2,12(r5)
   29ad4:	2ac01917 	ldw	r11,100(r5)
   29ad8:	2a80038b 	ldhu	r10,14(r5)
   29adc:	2a400717 	ldw	r9,28(r5)
   29ae0:	2a000917 	ldw	r8,36(r5)
   29ae4:	defee204 	addi	sp,sp,-1144
   29ae8:	00c10004 	movi	r3,1024
   29aec:	dc011a15 	stw	r16,1128(sp)
   29af0:	10bfff4c 	andi	r2,r2,65533
   29af4:	2821883a 	mov	r16,r5
   29af8:	d8cb883a 	add	r5,sp,r3
   29afc:	dc811c15 	stw	r18,1136(sp)
   29b00:	dc411b15 	stw	r17,1132(sp)
   29b04:	dfc11d15 	stw	ra,1140(sp)
   29b08:	2025883a 	mov	r18,r4
   29b0c:	d881030d 	sth	r2,1036(sp)
   29b10:	dac11915 	stw	r11,1124(sp)
   29b14:	da81038d 	sth	r10,1038(sp)
   29b18:	da410715 	stw	r9,1052(sp)
   29b1c:	da010915 	stw	r8,1060(sp)
   29b20:	dec10015 	stw	sp,1024(sp)
   29b24:	dec10415 	stw	sp,1040(sp)
   29b28:	d8c10215 	stw	r3,1032(sp)
   29b2c:	d8c10515 	stw	r3,1044(sp)
   29b30:	d8010615 	stw	zero,1048(sp)
   29b34:	00285a80 	call	285a8 <___vfiprintf_internal_r>
   29b38:	1023883a 	mov	r17,r2
   29b3c:	10000416 	blt	r2,zero,29b50 <__sbprintf+0x80>
   29b40:	d9410004 	addi	r5,sp,1024
   29b44:	9009883a 	mov	r4,r18
   29b48:	0024d840 	call	24d84 <_fflush_r>
   29b4c:	10000d1e 	bne	r2,zero,29b84 <__sbprintf+0xb4>
   29b50:	d881030b 	ldhu	r2,1036(sp)
   29b54:	1080100c 	andi	r2,r2,64
   29b58:	10000326 	beq	r2,zero,29b68 <__sbprintf+0x98>
   29b5c:	8080030b 	ldhu	r2,12(r16)
   29b60:	10801014 	ori	r2,r2,64
   29b64:	8080030d 	sth	r2,12(r16)
   29b68:	8805883a 	mov	r2,r17
   29b6c:	dfc11d17 	ldw	ra,1140(sp)
   29b70:	dc811c17 	ldw	r18,1136(sp)
   29b74:	dc411b17 	ldw	r17,1132(sp)
   29b78:	dc011a17 	ldw	r16,1128(sp)
   29b7c:	dec11e04 	addi	sp,sp,1144
   29b80:	f800283a 	ret
   29b84:	047fffc4 	movi	r17,-1
   29b88:	003ff106 	br	29b50 <__alt_data_end+0xfffe9b50>

00029b8c <_write_r>:
   29b8c:	defffd04 	addi	sp,sp,-12
   29b90:	2805883a 	mov	r2,r5
   29b94:	dc000015 	stw	r16,0(sp)
   29b98:	040000f4 	movhi	r16,3
   29b9c:	dc400115 	stw	r17,4(sp)
   29ba0:	300b883a 	mov	r5,r6
   29ba4:	8411c004 	addi	r16,r16,18176
   29ba8:	2023883a 	mov	r17,r4
   29bac:	380d883a 	mov	r6,r7
   29bb0:	1009883a 	mov	r4,r2
   29bb4:	dfc00215 	stw	ra,8(sp)
   29bb8:	80000015 	stw	zero,0(r16)
   29bbc:	002e4c80 	call	2e4c8 <write>
   29bc0:	00ffffc4 	movi	r3,-1
   29bc4:	10c00526 	beq	r2,r3,29bdc <_write_r+0x50>
   29bc8:	dfc00217 	ldw	ra,8(sp)
   29bcc:	dc400117 	ldw	r17,4(sp)
   29bd0:	dc000017 	ldw	r16,0(sp)
   29bd4:	dec00304 	addi	sp,sp,12
   29bd8:	f800283a 	ret
   29bdc:	80c00017 	ldw	r3,0(r16)
   29be0:	183ff926 	beq	r3,zero,29bc8 <__alt_data_end+0xfffe9bc8>
   29be4:	88c00015 	stw	r3,0(r17)
   29be8:	003ff706 	br	29bc8 <__alt_data_end+0xfffe9bc8>

00029bec <_close_r>:
   29bec:	defffd04 	addi	sp,sp,-12
   29bf0:	dc000015 	stw	r16,0(sp)
   29bf4:	040000f4 	movhi	r16,3
   29bf8:	dc400115 	stw	r17,4(sp)
   29bfc:	8411c004 	addi	r16,r16,18176
   29c00:	2023883a 	mov	r17,r4
   29c04:	2809883a 	mov	r4,r5
   29c08:	dfc00215 	stw	ra,8(sp)
   29c0c:	80000015 	stw	zero,0(r16)
   29c10:	002d9a00 	call	2d9a0 <close>
   29c14:	00ffffc4 	movi	r3,-1
   29c18:	10c00526 	beq	r2,r3,29c30 <_close_r+0x44>
   29c1c:	dfc00217 	ldw	ra,8(sp)
   29c20:	dc400117 	ldw	r17,4(sp)
   29c24:	dc000017 	ldw	r16,0(sp)
   29c28:	dec00304 	addi	sp,sp,12
   29c2c:	f800283a 	ret
   29c30:	80c00017 	ldw	r3,0(r16)
   29c34:	183ff926 	beq	r3,zero,29c1c <__alt_data_end+0xfffe9c1c>
   29c38:	88c00015 	stw	r3,0(r17)
   29c3c:	003ff706 	br	29c1c <__alt_data_end+0xfffe9c1c>

00029c40 <_calloc_r>:
   29c40:	defffe04 	addi	sp,sp,-8
   29c44:	2805883a 	mov	r2,r5
   29c48:	dc000015 	stw	r16,0(sp)
   29c4c:	300b883a 	mov	r5,r6
   29c50:	2021883a 	mov	r16,r4
   29c54:	1009883a 	mov	r4,r2
   29c58:	dfc00115 	stw	ra,4(sp)
   29c5c:	002b0980 	call	2b098 <__mulsi3>
   29c60:	100b883a 	mov	r5,r2
   29c64:	8009883a 	mov	r4,r16
   29c68:	0025edc0 	call	25edc <_malloc_r>
   29c6c:	10002926 	beq	r2,zero,29d14 <_calloc_r+0xd4>
   29c70:	11bfff17 	ldw	r6,-4(r2)
   29c74:	1021883a 	mov	r16,r2
   29c78:	00bfff04 	movi	r2,-4
   29c7c:	308c703a 	and	r6,r6,r2
   29c80:	00c00904 	movi	r3,36
   29c84:	308d883a 	add	r6,r6,r2
   29c88:	19801636 	bltu	r3,r6,29ce4 <_calloc_r+0xa4>
   29c8c:	008004c4 	movi	r2,19
   29c90:	11800b2e 	bgeu	r2,r6,29cc0 <_calloc_r+0x80>
   29c94:	80000015 	stw	zero,0(r16)
   29c98:	80000115 	stw	zero,4(r16)
   29c9c:	008006c4 	movi	r2,27
   29ca0:	11801a2e 	bgeu	r2,r6,29d0c <_calloc_r+0xcc>
   29ca4:	80000215 	stw	zero,8(r16)
   29ca8:	80000315 	stw	zero,12(r16)
   29cac:	30c0151e 	bne	r6,r3,29d04 <_calloc_r+0xc4>
   29cb0:	80000415 	stw	zero,16(r16)
   29cb4:	80800604 	addi	r2,r16,24
   29cb8:	80000515 	stw	zero,20(r16)
   29cbc:	00000106 	br	29cc4 <_calloc_r+0x84>
   29cc0:	8005883a 	mov	r2,r16
   29cc4:	10000015 	stw	zero,0(r2)
   29cc8:	10000115 	stw	zero,4(r2)
   29ccc:	10000215 	stw	zero,8(r2)
   29cd0:	8005883a 	mov	r2,r16
   29cd4:	dfc00117 	ldw	ra,4(sp)
   29cd8:	dc000017 	ldw	r16,0(sp)
   29cdc:	dec00204 	addi	sp,sp,8
   29ce0:	f800283a 	ret
   29ce4:	000b883a 	mov	r5,zero
   29ce8:	8009883a 	mov	r4,r16
   29cec:	0026a700 	call	26a70 <memset>
   29cf0:	8005883a 	mov	r2,r16
   29cf4:	dfc00117 	ldw	ra,4(sp)
   29cf8:	dc000017 	ldw	r16,0(sp)
   29cfc:	dec00204 	addi	sp,sp,8
   29d00:	f800283a 	ret
   29d04:	80800404 	addi	r2,r16,16
   29d08:	003fee06 	br	29cc4 <__alt_data_end+0xfffe9cc4>
   29d0c:	80800204 	addi	r2,r16,8
   29d10:	003fec06 	br	29cc4 <__alt_data_end+0xfffe9cc4>
   29d14:	0005883a 	mov	r2,zero
   29d18:	003fee06 	br	29cd4 <__alt_data_end+0xfffe9cd4>

00029d1c <_fclose_r>:
   29d1c:	28003926 	beq	r5,zero,29e04 <_fclose_r+0xe8>
   29d20:	defffc04 	addi	sp,sp,-16
   29d24:	dc400115 	stw	r17,4(sp)
   29d28:	dc000015 	stw	r16,0(sp)
   29d2c:	dfc00315 	stw	ra,12(sp)
   29d30:	dc800215 	stw	r18,8(sp)
   29d34:	2023883a 	mov	r17,r4
   29d38:	2821883a 	mov	r16,r5
   29d3c:	20000226 	beq	r4,zero,29d48 <_fclose_r+0x2c>
   29d40:	20800e17 	ldw	r2,56(r4)
   29d44:	10002726 	beq	r2,zero,29de4 <_fclose_r+0xc8>
   29d48:	8080030f 	ldh	r2,12(r16)
   29d4c:	1000071e 	bne	r2,zero,29d6c <_fclose_r+0x50>
   29d50:	0005883a 	mov	r2,zero
   29d54:	dfc00317 	ldw	ra,12(sp)
   29d58:	dc800217 	ldw	r18,8(sp)
   29d5c:	dc400117 	ldw	r17,4(sp)
   29d60:	dc000017 	ldw	r16,0(sp)
   29d64:	dec00404 	addi	sp,sp,16
   29d68:	f800283a 	ret
   29d6c:	800b883a 	mov	r5,r16
   29d70:	8809883a 	mov	r4,r17
   29d74:	0024b680 	call	24b68 <__sflush_r>
   29d78:	1025883a 	mov	r18,r2
   29d7c:	80800b17 	ldw	r2,44(r16)
   29d80:	10000426 	beq	r2,zero,29d94 <_fclose_r+0x78>
   29d84:	81400717 	ldw	r5,28(r16)
   29d88:	8809883a 	mov	r4,r17
   29d8c:	103ee83a 	callr	r2
   29d90:	10001616 	blt	r2,zero,29dec <_fclose_r+0xd0>
   29d94:	8080030b 	ldhu	r2,12(r16)
   29d98:	1080200c 	andi	r2,r2,128
   29d9c:	1000151e 	bne	r2,zero,29df4 <_fclose_r+0xd8>
   29da0:	81400c17 	ldw	r5,48(r16)
   29da4:	28000526 	beq	r5,zero,29dbc <_fclose_r+0xa0>
   29da8:	80801004 	addi	r2,r16,64
   29dac:	28800226 	beq	r5,r2,29db8 <_fclose_r+0x9c>
   29db0:	8809883a 	mov	r4,r17
   29db4:	00252e40 	call	252e4 <_free_r>
   29db8:	80000c15 	stw	zero,48(r16)
   29dbc:	81401117 	ldw	r5,68(r16)
   29dc0:	28000326 	beq	r5,zero,29dd0 <_fclose_r+0xb4>
   29dc4:	8809883a 	mov	r4,r17
   29dc8:	00252e40 	call	252e4 <_free_r>
   29dcc:	80001115 	stw	zero,68(r16)
   29dd0:	00251800 	call	25180 <__sfp_lock_acquire>
   29dd4:	8000030d 	sth	zero,12(r16)
   29dd8:	00251840 	call	25184 <__sfp_lock_release>
   29ddc:	9005883a 	mov	r2,r18
   29de0:	003fdc06 	br	29d54 <__alt_data_end+0xfffe9d54>
   29de4:	00251700 	call	25170 <__sinit>
   29de8:	003fd706 	br	29d48 <__alt_data_end+0xfffe9d48>
   29dec:	04bfffc4 	movi	r18,-1
   29df0:	003fe806 	br	29d94 <__alt_data_end+0xfffe9d94>
   29df4:	81400417 	ldw	r5,16(r16)
   29df8:	8809883a 	mov	r4,r17
   29dfc:	00252e40 	call	252e4 <_free_r>
   29e00:	003fe706 	br	29da0 <__alt_data_end+0xfffe9da0>
   29e04:	0005883a 	mov	r2,zero
   29e08:	f800283a 	ret

00029e0c <fclose>:
   29e0c:	008000f4 	movhi	r2,3
   29e10:	108a8a04 	addi	r2,r2,10792
   29e14:	200b883a 	mov	r5,r4
   29e18:	11000017 	ldw	r4,0(r2)
   29e1c:	0029d1c1 	jmpi	29d1c <_fclose_r>

00029e20 <__fputwc>:
   29e20:	defff804 	addi	sp,sp,-32
   29e24:	dcc00415 	stw	r19,16(sp)
   29e28:	dc800315 	stw	r18,12(sp)
   29e2c:	dc000115 	stw	r16,4(sp)
   29e30:	dfc00715 	stw	ra,28(sp)
   29e34:	dd400615 	stw	r21,24(sp)
   29e38:	dd000515 	stw	r20,20(sp)
   29e3c:	dc400215 	stw	r17,8(sp)
   29e40:	2027883a 	mov	r19,r4
   29e44:	2825883a 	mov	r18,r5
   29e48:	3021883a 	mov	r16,r6
   29e4c:	0025ccc0 	call	25ccc <__locale_mb_cur_max>
   29e50:	00c00044 	movi	r3,1
   29e54:	10c03e26 	beq	r2,r3,29f50 <__fputwc+0x130>
   29e58:	81c01704 	addi	r7,r16,92
   29e5c:	900d883a 	mov	r6,r18
   29e60:	d80b883a 	mov	r5,sp
   29e64:	9809883a 	mov	r4,r19
   29e68:	002a2f00 	call	2a2f0 <_wcrtomb_r>
   29e6c:	1029883a 	mov	r20,r2
   29e70:	00bfffc4 	movi	r2,-1
   29e74:	a0802026 	beq	r20,r2,29ef8 <__fputwc+0xd8>
   29e78:	d9400003 	ldbu	r5,0(sp)
   29e7c:	a0001c26 	beq	r20,zero,29ef0 <__fputwc+0xd0>
   29e80:	0023883a 	mov	r17,zero
   29e84:	05400284 	movi	r21,10
   29e88:	00000906 	br	29eb0 <__fputwc+0x90>
   29e8c:	80800017 	ldw	r2,0(r16)
   29e90:	11400005 	stb	r5,0(r2)
   29e94:	80c00017 	ldw	r3,0(r16)
   29e98:	18c00044 	addi	r3,r3,1
   29e9c:	80c00015 	stw	r3,0(r16)
   29ea0:	8c400044 	addi	r17,r17,1
   29ea4:	dc45883a 	add	r2,sp,r17
   29ea8:	8d00112e 	bgeu	r17,r20,29ef0 <__fputwc+0xd0>
   29eac:	11400003 	ldbu	r5,0(r2)
   29eb0:	80c00217 	ldw	r3,8(r16)
   29eb4:	18ffffc4 	addi	r3,r3,-1
   29eb8:	80c00215 	stw	r3,8(r16)
   29ebc:	183ff30e 	bge	r3,zero,29e8c <__alt_data_end+0xfffe9e8c>
   29ec0:	80800617 	ldw	r2,24(r16)
   29ec4:	18801916 	blt	r3,r2,29f2c <__fputwc+0x10c>
   29ec8:	80800017 	ldw	r2,0(r16)
   29ecc:	11400005 	stb	r5,0(r2)
   29ed0:	80800017 	ldw	r2,0(r16)
   29ed4:	10c00003 	ldbu	r3,0(r2)
   29ed8:	10800044 	addi	r2,r2,1
   29edc:	1d402326 	beq	r3,r21,29f6c <__fputwc+0x14c>
   29ee0:	80800015 	stw	r2,0(r16)
   29ee4:	8c400044 	addi	r17,r17,1
   29ee8:	dc45883a 	add	r2,sp,r17
   29eec:	8d3fef36 	bltu	r17,r20,29eac <__alt_data_end+0xfffe9eac>
   29ef0:	9005883a 	mov	r2,r18
   29ef4:	00000406 	br	29f08 <__fputwc+0xe8>
   29ef8:	80c0030b 	ldhu	r3,12(r16)
   29efc:	a005883a 	mov	r2,r20
   29f00:	18c01014 	ori	r3,r3,64
   29f04:	80c0030d 	sth	r3,12(r16)
   29f08:	dfc00717 	ldw	ra,28(sp)
   29f0c:	dd400617 	ldw	r21,24(sp)
   29f10:	dd000517 	ldw	r20,20(sp)
   29f14:	dcc00417 	ldw	r19,16(sp)
   29f18:	dc800317 	ldw	r18,12(sp)
   29f1c:	dc400217 	ldw	r17,8(sp)
   29f20:	dc000117 	ldw	r16,4(sp)
   29f24:	dec00804 	addi	sp,sp,32
   29f28:	f800283a 	ret
   29f2c:	800d883a 	mov	r6,r16
   29f30:	29403fcc 	andi	r5,r5,255
   29f34:	9809883a 	mov	r4,r19
   29f38:	002a1980 	call	2a198 <__swbuf_r>
   29f3c:	10bfffe0 	cmpeqi	r2,r2,-1
   29f40:	10803fcc 	andi	r2,r2,255
   29f44:	103fd626 	beq	r2,zero,29ea0 <__alt_data_end+0xfffe9ea0>
   29f48:	00bfffc4 	movi	r2,-1
   29f4c:	003fee06 	br	29f08 <__alt_data_end+0xfffe9f08>
   29f50:	90ffffc4 	addi	r3,r18,-1
   29f54:	01003f84 	movi	r4,254
   29f58:	20ffbf36 	bltu	r4,r3,29e58 <__alt_data_end+0xfffe9e58>
   29f5c:	900b883a 	mov	r5,r18
   29f60:	dc800005 	stb	r18,0(sp)
   29f64:	1029883a 	mov	r20,r2
   29f68:	003fc506 	br	29e80 <__alt_data_end+0xfffe9e80>
   29f6c:	800d883a 	mov	r6,r16
   29f70:	a80b883a 	mov	r5,r21
   29f74:	9809883a 	mov	r4,r19
   29f78:	002a1980 	call	2a198 <__swbuf_r>
   29f7c:	10bfffe0 	cmpeqi	r2,r2,-1
   29f80:	003fef06 	br	29f40 <__alt_data_end+0xfffe9f40>

00029f84 <_fputwc_r>:
   29f84:	3080030b 	ldhu	r2,12(r6)
   29f88:	10c8000c 	andi	r3,r2,8192
   29f8c:	1800051e 	bne	r3,zero,29fa4 <_fputwc_r+0x20>
   29f90:	30c01917 	ldw	r3,100(r6)
   29f94:	10880014 	ori	r2,r2,8192
   29f98:	3080030d 	sth	r2,12(r6)
   29f9c:	18880014 	ori	r2,r3,8192
   29fa0:	30801915 	stw	r2,100(r6)
   29fa4:	0029e201 	jmpi	29e20 <__fputwc>

00029fa8 <fputwc>:
   29fa8:	008000f4 	movhi	r2,3
   29fac:	defffc04 	addi	sp,sp,-16
   29fb0:	108a8a04 	addi	r2,r2,10792
   29fb4:	dc000115 	stw	r16,4(sp)
   29fb8:	14000017 	ldw	r16,0(r2)
   29fbc:	dc400215 	stw	r17,8(sp)
   29fc0:	dfc00315 	stw	ra,12(sp)
   29fc4:	2023883a 	mov	r17,r4
   29fc8:	80000226 	beq	r16,zero,29fd4 <fputwc+0x2c>
   29fcc:	80800e17 	ldw	r2,56(r16)
   29fd0:	10001026 	beq	r2,zero,2a014 <fputwc+0x6c>
   29fd4:	2880030b 	ldhu	r2,12(r5)
   29fd8:	10c8000c 	andi	r3,r2,8192
   29fdc:	1800051e 	bne	r3,zero,29ff4 <fputwc+0x4c>
   29fe0:	28c01917 	ldw	r3,100(r5)
   29fe4:	10880014 	ori	r2,r2,8192
   29fe8:	2880030d 	sth	r2,12(r5)
   29fec:	18880014 	ori	r2,r3,8192
   29ff0:	28801915 	stw	r2,100(r5)
   29ff4:	280d883a 	mov	r6,r5
   29ff8:	8009883a 	mov	r4,r16
   29ffc:	880b883a 	mov	r5,r17
   2a000:	dfc00317 	ldw	ra,12(sp)
   2a004:	dc400217 	ldw	r17,8(sp)
   2a008:	dc000117 	ldw	r16,4(sp)
   2a00c:	dec00404 	addi	sp,sp,16
   2a010:	0029e201 	jmpi	29e20 <__fputwc>
   2a014:	8009883a 	mov	r4,r16
   2a018:	d9400015 	stw	r5,0(sp)
   2a01c:	00251700 	call	25170 <__sinit>
   2a020:	d9400017 	ldw	r5,0(sp)
   2a024:	003feb06 	br	29fd4 <__alt_data_end+0xfffe9fd4>

0002a028 <_fstat_r>:
   2a028:	defffd04 	addi	sp,sp,-12
   2a02c:	2805883a 	mov	r2,r5
   2a030:	dc000015 	stw	r16,0(sp)
   2a034:	040000f4 	movhi	r16,3
   2a038:	dc400115 	stw	r17,4(sp)
   2a03c:	8411c004 	addi	r16,r16,18176
   2a040:	2023883a 	mov	r17,r4
   2a044:	300b883a 	mov	r5,r6
   2a048:	1009883a 	mov	r4,r2
   2a04c:	dfc00215 	stw	ra,8(sp)
   2a050:	80000015 	stw	zero,0(r16)
   2a054:	002dae00 	call	2dae0 <fstat>
   2a058:	00ffffc4 	movi	r3,-1
   2a05c:	10c00526 	beq	r2,r3,2a074 <_fstat_r+0x4c>
   2a060:	dfc00217 	ldw	ra,8(sp)
   2a064:	dc400117 	ldw	r17,4(sp)
   2a068:	dc000017 	ldw	r16,0(sp)
   2a06c:	dec00304 	addi	sp,sp,12
   2a070:	f800283a 	ret
   2a074:	80c00017 	ldw	r3,0(r16)
   2a078:	183ff926 	beq	r3,zero,2a060 <__alt_data_end+0xfffea060>
   2a07c:	88c00015 	stw	r3,0(r17)
   2a080:	003ff706 	br	2a060 <__alt_data_end+0xfffea060>

0002a084 <_isatty_r>:
   2a084:	defffd04 	addi	sp,sp,-12
   2a088:	dc000015 	stw	r16,0(sp)
   2a08c:	040000f4 	movhi	r16,3
   2a090:	dc400115 	stw	r17,4(sp)
   2a094:	8411c004 	addi	r16,r16,18176
   2a098:	2023883a 	mov	r17,r4
   2a09c:	2809883a 	mov	r4,r5
   2a0a0:	dfc00215 	stw	ra,8(sp)
   2a0a4:	80000015 	stw	zero,0(r16)
   2a0a8:	002de740 	call	2de74 <isatty>
   2a0ac:	00ffffc4 	movi	r3,-1
   2a0b0:	10c00526 	beq	r2,r3,2a0c8 <_isatty_r+0x44>
   2a0b4:	dfc00217 	ldw	ra,8(sp)
   2a0b8:	dc400117 	ldw	r17,4(sp)
   2a0bc:	dc000017 	ldw	r16,0(sp)
   2a0c0:	dec00304 	addi	sp,sp,12
   2a0c4:	f800283a 	ret
   2a0c8:	80c00017 	ldw	r3,0(r16)
   2a0cc:	183ff926 	beq	r3,zero,2a0b4 <__alt_data_end+0xfffea0b4>
   2a0d0:	88c00015 	stw	r3,0(r17)
   2a0d4:	003ff706 	br	2a0b4 <__alt_data_end+0xfffea0b4>

0002a0d8 <_lseek_r>:
   2a0d8:	defffd04 	addi	sp,sp,-12
   2a0dc:	2805883a 	mov	r2,r5
   2a0e0:	dc000015 	stw	r16,0(sp)
   2a0e4:	040000f4 	movhi	r16,3
   2a0e8:	dc400115 	stw	r17,4(sp)
   2a0ec:	300b883a 	mov	r5,r6
   2a0f0:	8411c004 	addi	r16,r16,18176
   2a0f4:	2023883a 	mov	r17,r4
   2a0f8:	380d883a 	mov	r6,r7
   2a0fc:	1009883a 	mov	r4,r2
   2a100:	dfc00215 	stw	ra,8(sp)
   2a104:	80000015 	stw	zero,0(r16)
   2a108:	002e0480 	call	2e048 <lseek>
   2a10c:	00ffffc4 	movi	r3,-1
   2a110:	10c00526 	beq	r2,r3,2a128 <_lseek_r+0x50>
   2a114:	dfc00217 	ldw	ra,8(sp)
   2a118:	dc400117 	ldw	r17,4(sp)
   2a11c:	dc000017 	ldw	r16,0(sp)
   2a120:	dec00304 	addi	sp,sp,12
   2a124:	f800283a 	ret
   2a128:	80c00017 	ldw	r3,0(r16)
   2a12c:	183ff926 	beq	r3,zero,2a114 <__alt_data_end+0xfffea114>
   2a130:	88c00015 	stw	r3,0(r17)
   2a134:	003ff706 	br	2a114 <__alt_data_end+0xfffea114>

0002a138 <_read_r>:
   2a138:	defffd04 	addi	sp,sp,-12
   2a13c:	2805883a 	mov	r2,r5
   2a140:	dc000015 	stw	r16,0(sp)
   2a144:	040000f4 	movhi	r16,3
   2a148:	dc400115 	stw	r17,4(sp)
   2a14c:	300b883a 	mov	r5,r6
   2a150:	8411c004 	addi	r16,r16,18176
   2a154:	2023883a 	mov	r17,r4
   2a158:	380d883a 	mov	r6,r7
   2a15c:	1009883a 	mov	r4,r2
   2a160:	dfc00215 	stw	ra,8(sp)
   2a164:	80000015 	stw	zero,0(r16)
   2a168:	002e2240 	call	2e224 <read>
   2a16c:	00ffffc4 	movi	r3,-1
   2a170:	10c00526 	beq	r2,r3,2a188 <_read_r+0x50>
   2a174:	dfc00217 	ldw	ra,8(sp)
   2a178:	dc400117 	ldw	r17,4(sp)
   2a17c:	dc000017 	ldw	r16,0(sp)
   2a180:	dec00304 	addi	sp,sp,12
   2a184:	f800283a 	ret
   2a188:	80c00017 	ldw	r3,0(r16)
   2a18c:	183ff926 	beq	r3,zero,2a174 <__alt_data_end+0xfffea174>
   2a190:	88c00015 	stw	r3,0(r17)
   2a194:	003ff706 	br	2a174 <__alt_data_end+0xfffea174>

0002a198 <__swbuf_r>:
   2a198:	defffb04 	addi	sp,sp,-20
   2a19c:	dcc00315 	stw	r19,12(sp)
   2a1a0:	dc800215 	stw	r18,8(sp)
   2a1a4:	dc000015 	stw	r16,0(sp)
   2a1a8:	dfc00415 	stw	ra,16(sp)
   2a1ac:	dc400115 	stw	r17,4(sp)
   2a1b0:	2025883a 	mov	r18,r4
   2a1b4:	2827883a 	mov	r19,r5
   2a1b8:	3021883a 	mov	r16,r6
   2a1bc:	20000226 	beq	r4,zero,2a1c8 <__swbuf_r+0x30>
   2a1c0:	20800e17 	ldw	r2,56(r4)
   2a1c4:	10004226 	beq	r2,zero,2a2d0 <__swbuf_r+0x138>
   2a1c8:	80800617 	ldw	r2,24(r16)
   2a1cc:	8100030b 	ldhu	r4,12(r16)
   2a1d0:	80800215 	stw	r2,8(r16)
   2a1d4:	2080020c 	andi	r2,r4,8
   2a1d8:	10003626 	beq	r2,zero,2a2b4 <__swbuf_r+0x11c>
   2a1dc:	80c00417 	ldw	r3,16(r16)
   2a1e0:	18003426 	beq	r3,zero,2a2b4 <__swbuf_r+0x11c>
   2a1e4:	2088000c 	andi	r2,r4,8192
   2a1e8:	9c403fcc 	andi	r17,r19,255
   2a1ec:	10001a26 	beq	r2,zero,2a258 <__swbuf_r+0xc0>
   2a1f0:	80800017 	ldw	r2,0(r16)
   2a1f4:	81000517 	ldw	r4,20(r16)
   2a1f8:	10c7c83a 	sub	r3,r2,r3
   2a1fc:	1900200e 	bge	r3,r4,2a280 <__swbuf_r+0xe8>
   2a200:	18c00044 	addi	r3,r3,1
   2a204:	81000217 	ldw	r4,8(r16)
   2a208:	11400044 	addi	r5,r2,1
   2a20c:	81400015 	stw	r5,0(r16)
   2a210:	213fffc4 	addi	r4,r4,-1
   2a214:	81000215 	stw	r4,8(r16)
   2a218:	14c00005 	stb	r19,0(r2)
   2a21c:	80800517 	ldw	r2,20(r16)
   2a220:	10c01e26 	beq	r2,r3,2a29c <__swbuf_r+0x104>
   2a224:	8080030b 	ldhu	r2,12(r16)
   2a228:	1080004c 	andi	r2,r2,1
   2a22c:	10000226 	beq	r2,zero,2a238 <__swbuf_r+0xa0>
   2a230:	00800284 	movi	r2,10
   2a234:	88801926 	beq	r17,r2,2a29c <__swbuf_r+0x104>
   2a238:	8805883a 	mov	r2,r17
   2a23c:	dfc00417 	ldw	ra,16(sp)
   2a240:	dcc00317 	ldw	r19,12(sp)
   2a244:	dc800217 	ldw	r18,8(sp)
   2a248:	dc400117 	ldw	r17,4(sp)
   2a24c:	dc000017 	ldw	r16,0(sp)
   2a250:	dec00504 	addi	sp,sp,20
   2a254:	f800283a 	ret
   2a258:	81401917 	ldw	r5,100(r16)
   2a25c:	00b7ffc4 	movi	r2,-8193
   2a260:	21080014 	ori	r4,r4,8192
   2a264:	2884703a 	and	r2,r5,r2
   2a268:	80801915 	stw	r2,100(r16)
   2a26c:	80800017 	ldw	r2,0(r16)
   2a270:	8100030d 	sth	r4,12(r16)
   2a274:	81000517 	ldw	r4,20(r16)
   2a278:	10c7c83a 	sub	r3,r2,r3
   2a27c:	193fe016 	blt	r3,r4,2a200 <__alt_data_end+0xfffea200>
   2a280:	800b883a 	mov	r5,r16
   2a284:	9009883a 	mov	r4,r18
   2a288:	0024d840 	call	24d84 <_fflush_r>
   2a28c:	1000071e 	bne	r2,zero,2a2ac <__swbuf_r+0x114>
   2a290:	80800017 	ldw	r2,0(r16)
   2a294:	00c00044 	movi	r3,1
   2a298:	003fda06 	br	2a204 <__alt_data_end+0xfffea204>
   2a29c:	800b883a 	mov	r5,r16
   2a2a0:	9009883a 	mov	r4,r18
   2a2a4:	0024d840 	call	24d84 <_fflush_r>
   2a2a8:	103fe326 	beq	r2,zero,2a238 <__alt_data_end+0xfffea238>
   2a2ac:	00bfffc4 	movi	r2,-1
   2a2b0:	003fe206 	br	2a23c <__alt_data_end+0xfffea23c>
   2a2b4:	800b883a 	mov	r5,r16
   2a2b8:	9009883a 	mov	r4,r18
   2a2bc:	00231640 	call	23164 <__swsetup_r>
   2a2c0:	103ffa1e 	bne	r2,zero,2a2ac <__alt_data_end+0xfffea2ac>
   2a2c4:	8100030b 	ldhu	r4,12(r16)
   2a2c8:	80c00417 	ldw	r3,16(r16)
   2a2cc:	003fc506 	br	2a1e4 <__alt_data_end+0xfffea1e4>
   2a2d0:	00251700 	call	25170 <__sinit>
   2a2d4:	003fbc06 	br	2a1c8 <__alt_data_end+0xfffea1c8>

0002a2d8 <__swbuf>:
   2a2d8:	008000f4 	movhi	r2,3
   2a2dc:	108a8a04 	addi	r2,r2,10792
   2a2e0:	280d883a 	mov	r6,r5
   2a2e4:	200b883a 	mov	r5,r4
   2a2e8:	11000017 	ldw	r4,0(r2)
   2a2ec:	002a1981 	jmpi	2a198 <__swbuf_r>

0002a2f0 <_wcrtomb_r>:
   2a2f0:	defff604 	addi	sp,sp,-40
   2a2f4:	008000f4 	movhi	r2,3
   2a2f8:	dc800815 	stw	r18,32(sp)
   2a2fc:	dc400715 	stw	r17,28(sp)
   2a300:	dc000615 	stw	r16,24(sp)
   2a304:	108a8e04 	addi	r2,r2,10808
   2a308:	dfc00915 	stw	ra,36(sp)
   2a30c:	2021883a 	mov	r16,r4
   2a310:	3823883a 	mov	r17,r7
   2a314:	14800017 	ldw	r18,0(r2)
   2a318:	28001426 	beq	r5,zero,2a36c <_wcrtomb_r+0x7c>
   2a31c:	d9400415 	stw	r5,16(sp)
   2a320:	d9800515 	stw	r6,20(sp)
   2a324:	0025cc00 	call	25cc0 <__locale_charset>
   2a328:	d9800517 	ldw	r6,20(sp)
   2a32c:	d9400417 	ldw	r5,16(sp)
   2a330:	100f883a 	mov	r7,r2
   2a334:	dc400015 	stw	r17,0(sp)
   2a338:	8009883a 	mov	r4,r16
   2a33c:	903ee83a 	callr	r18
   2a340:	00ffffc4 	movi	r3,-1
   2a344:	10c0031e 	bne	r2,r3,2a354 <_wcrtomb_r+0x64>
   2a348:	88000015 	stw	zero,0(r17)
   2a34c:	00c02284 	movi	r3,138
   2a350:	80c00015 	stw	r3,0(r16)
   2a354:	dfc00917 	ldw	ra,36(sp)
   2a358:	dc800817 	ldw	r18,32(sp)
   2a35c:	dc400717 	ldw	r17,28(sp)
   2a360:	dc000617 	ldw	r16,24(sp)
   2a364:	dec00a04 	addi	sp,sp,40
   2a368:	f800283a 	ret
   2a36c:	0025cc00 	call	25cc0 <__locale_charset>
   2a370:	100f883a 	mov	r7,r2
   2a374:	dc400015 	stw	r17,0(sp)
   2a378:	000d883a 	mov	r6,zero
   2a37c:	d9400104 	addi	r5,sp,4
   2a380:	8009883a 	mov	r4,r16
   2a384:	903ee83a 	callr	r18
   2a388:	003fed06 	br	2a340 <__alt_data_end+0xfffea340>

0002a38c <wcrtomb>:
   2a38c:	defff604 	addi	sp,sp,-40
   2a390:	008000f4 	movhi	r2,3
   2a394:	dc800615 	stw	r18,24(sp)
   2a398:	dc400515 	stw	r17,20(sp)
   2a39c:	108a8a04 	addi	r2,r2,10792
   2a3a0:	dfc00915 	stw	ra,36(sp)
   2a3a4:	dd000815 	stw	r20,32(sp)
   2a3a8:	dcc00715 	stw	r19,28(sp)
   2a3ac:	dc000415 	stw	r16,16(sp)
   2a3b0:	3025883a 	mov	r18,r6
   2a3b4:	14400017 	ldw	r17,0(r2)
   2a3b8:	20001926 	beq	r4,zero,2a420 <wcrtomb+0x94>
   2a3bc:	008000f4 	movhi	r2,3
   2a3c0:	108a8e04 	addi	r2,r2,10808
   2a3c4:	15000017 	ldw	r20,0(r2)
   2a3c8:	2021883a 	mov	r16,r4
   2a3cc:	2827883a 	mov	r19,r5
   2a3d0:	0025cc00 	call	25cc0 <__locale_charset>
   2a3d4:	100f883a 	mov	r7,r2
   2a3d8:	dc800015 	stw	r18,0(sp)
   2a3dc:	980d883a 	mov	r6,r19
   2a3e0:	800b883a 	mov	r5,r16
   2a3e4:	8809883a 	mov	r4,r17
   2a3e8:	a03ee83a 	callr	r20
   2a3ec:	00ffffc4 	movi	r3,-1
   2a3f0:	10c0031e 	bne	r2,r3,2a400 <wcrtomb+0x74>
   2a3f4:	90000015 	stw	zero,0(r18)
   2a3f8:	00c02284 	movi	r3,138
   2a3fc:	88c00015 	stw	r3,0(r17)
   2a400:	dfc00917 	ldw	ra,36(sp)
   2a404:	dd000817 	ldw	r20,32(sp)
   2a408:	dcc00717 	ldw	r19,28(sp)
   2a40c:	dc800617 	ldw	r18,24(sp)
   2a410:	dc400517 	ldw	r17,20(sp)
   2a414:	dc000417 	ldw	r16,16(sp)
   2a418:	dec00a04 	addi	sp,sp,40
   2a41c:	f800283a 	ret
   2a420:	008000f4 	movhi	r2,3
   2a424:	108a8e04 	addi	r2,r2,10808
   2a428:	14000017 	ldw	r16,0(r2)
   2a42c:	0025cc00 	call	25cc0 <__locale_charset>
   2a430:	100f883a 	mov	r7,r2
   2a434:	dc800015 	stw	r18,0(sp)
   2a438:	000d883a 	mov	r6,zero
   2a43c:	d9400104 	addi	r5,sp,4
   2a440:	8809883a 	mov	r4,r17
   2a444:	803ee83a 	callr	r16
   2a448:	003fe806 	br	2a3ec <__alt_data_end+0xfffea3ec>

0002a44c <__ascii_wctomb>:
   2a44c:	28000526 	beq	r5,zero,2a464 <__ascii_wctomb+0x18>
   2a450:	00803fc4 	movi	r2,255
   2a454:	11800536 	bltu	r2,r6,2a46c <__ascii_wctomb+0x20>
   2a458:	29800005 	stb	r6,0(r5)
   2a45c:	00800044 	movi	r2,1
   2a460:	f800283a 	ret
   2a464:	0005883a 	mov	r2,zero
   2a468:	f800283a 	ret
   2a46c:	00802284 	movi	r2,138
   2a470:	20800015 	stw	r2,0(r4)
   2a474:	00bfffc4 	movi	r2,-1
   2a478:	f800283a 	ret

0002a47c <_wctomb_r>:
   2a47c:	008000f4 	movhi	r2,3
   2a480:	defff904 	addi	sp,sp,-28
   2a484:	108a8e04 	addi	r2,r2,10808
   2a488:	dfc00615 	stw	ra,24(sp)
   2a48c:	dc400515 	stw	r17,20(sp)
   2a490:	dc000415 	stw	r16,16(sp)
   2a494:	3823883a 	mov	r17,r7
   2a498:	14000017 	ldw	r16,0(r2)
   2a49c:	d9000115 	stw	r4,4(sp)
   2a4a0:	d9400215 	stw	r5,8(sp)
   2a4a4:	d9800315 	stw	r6,12(sp)
   2a4a8:	0025cc00 	call	25cc0 <__locale_charset>
   2a4ac:	d9800317 	ldw	r6,12(sp)
   2a4b0:	d9400217 	ldw	r5,8(sp)
   2a4b4:	d9000117 	ldw	r4,4(sp)
   2a4b8:	100f883a 	mov	r7,r2
   2a4bc:	dc400015 	stw	r17,0(sp)
   2a4c0:	803ee83a 	callr	r16
   2a4c4:	dfc00617 	ldw	ra,24(sp)
   2a4c8:	dc400517 	ldw	r17,20(sp)
   2a4cc:	dc000417 	ldw	r16,16(sp)
   2a4d0:	dec00704 	addi	sp,sp,28
   2a4d4:	f800283a 	ret

0002a4d8 <__udivdi3>:
   2a4d8:	defff404 	addi	sp,sp,-48
   2a4dc:	dcc00515 	stw	r19,20(sp)
   2a4e0:	dc000215 	stw	r16,8(sp)
   2a4e4:	dfc00b15 	stw	ra,44(sp)
   2a4e8:	df000a15 	stw	fp,40(sp)
   2a4ec:	ddc00915 	stw	r23,36(sp)
   2a4f0:	dd800815 	stw	r22,32(sp)
   2a4f4:	dd400715 	stw	r21,28(sp)
   2a4f8:	dd000615 	stw	r20,24(sp)
   2a4fc:	dc800415 	stw	r18,16(sp)
   2a500:	dc400315 	stw	r17,12(sp)
   2a504:	2027883a 	mov	r19,r4
   2a508:	2821883a 	mov	r16,r5
   2a50c:	3800461e 	bne	r7,zero,2a628 <__udivdi3+0x150>
   2a510:	3023883a 	mov	r17,r6
   2a514:	2025883a 	mov	r18,r4
   2a518:	2980572e 	bgeu	r5,r6,2a678 <__udivdi3+0x1a0>
   2a51c:	00bfffd4 	movui	r2,65535
   2a520:	282d883a 	mov	r22,r5
   2a524:	1180b236 	bltu	r2,r6,2a7f0 <__udivdi3+0x318>
   2a528:	00803fc4 	movi	r2,255
   2a52c:	1185803a 	cmpltu	r2,r2,r6
   2a530:	100490fa 	slli	r2,r2,3
   2a534:	3086d83a 	srl	r3,r6,r2
   2a538:	010000f4 	movhi	r4,3
   2a53c:	21032b04 	addi	r4,r4,3244
   2a540:	20c7883a 	add	r3,r4,r3
   2a544:	18c00003 	ldbu	r3,0(r3)
   2a548:	1885883a 	add	r2,r3,r2
   2a54c:	00c00804 	movi	r3,32
   2a550:	1887c83a 	sub	r3,r3,r2
   2a554:	18000526 	beq	r3,zero,2a56c <__udivdi3+0x94>
   2a558:	80e0983a 	sll	r16,r16,r3
   2a55c:	9884d83a 	srl	r2,r19,r2
   2a560:	30e2983a 	sll	r17,r6,r3
   2a564:	98e4983a 	sll	r18,r19,r3
   2a568:	142cb03a 	or	r22,r2,r16
   2a56c:	882ad43a 	srli	r21,r17,16
   2a570:	b009883a 	mov	r4,r22
   2a574:	8d3fffcc 	andi	r20,r17,65535
   2a578:	a80b883a 	mov	r5,r21
   2a57c:	0020b800 	call	20b80 <__umodsi3>
   2a580:	b009883a 	mov	r4,r22
   2a584:	a80b883a 	mov	r5,r21
   2a588:	1027883a 	mov	r19,r2
   2a58c:	0020b1c0 	call	20b1c <__udivsi3>
   2a590:	100b883a 	mov	r5,r2
   2a594:	a009883a 	mov	r4,r20
   2a598:	102d883a 	mov	r22,r2
   2a59c:	002b0980 	call	2b098 <__mulsi3>
   2a5a0:	9826943a 	slli	r19,r19,16
   2a5a4:	9006d43a 	srli	r3,r18,16
   2a5a8:	1cc6b03a 	or	r3,r3,r19
   2a5ac:	1880052e 	bgeu	r3,r2,2a5c4 <__udivdi3+0xec>
   2a5b0:	1c47883a 	add	r3,r3,r17
   2a5b4:	b13fffc4 	addi	r4,r22,-1
   2a5b8:	1c400136 	bltu	r3,r17,2a5c0 <__udivdi3+0xe8>
   2a5bc:	18814236 	bltu	r3,r2,2aac8 <__udivdi3+0x5f0>
   2a5c0:	202d883a 	mov	r22,r4
   2a5c4:	18a1c83a 	sub	r16,r3,r2
   2a5c8:	8009883a 	mov	r4,r16
   2a5cc:	a80b883a 	mov	r5,r21
   2a5d0:	0020b800 	call	20b80 <__umodsi3>
   2a5d4:	1027883a 	mov	r19,r2
   2a5d8:	8009883a 	mov	r4,r16
   2a5dc:	a80b883a 	mov	r5,r21
   2a5e0:	9826943a 	slli	r19,r19,16
   2a5e4:	0020b1c0 	call	20b1c <__udivsi3>
   2a5e8:	100b883a 	mov	r5,r2
   2a5ec:	a009883a 	mov	r4,r20
   2a5f0:	94bfffcc 	andi	r18,r18,65535
   2a5f4:	1021883a 	mov	r16,r2
   2a5f8:	94e4b03a 	or	r18,r18,r19
   2a5fc:	002b0980 	call	2b098 <__mulsi3>
   2a600:	9080052e 	bgeu	r18,r2,2a618 <__udivdi3+0x140>
   2a604:	8ca5883a 	add	r18,r17,r18
   2a608:	80ffffc4 	addi	r3,r16,-1
   2a60c:	94410c36 	bltu	r18,r17,2aa40 <__udivdi3+0x568>
   2a610:	90810b2e 	bgeu	r18,r2,2aa40 <__udivdi3+0x568>
   2a614:	843fff84 	addi	r16,r16,-2
   2a618:	b004943a 	slli	r2,r22,16
   2a61c:	0007883a 	mov	r3,zero
   2a620:	1404b03a 	or	r2,r2,r16
   2a624:	00005e06 	br	2a7a0 <__udivdi3+0x2c8>
   2a628:	29c05b36 	bltu	r5,r7,2a798 <__udivdi3+0x2c0>
   2a62c:	00bfffd4 	movui	r2,65535
   2a630:	11c0672e 	bgeu	r2,r7,2a7d0 <__udivdi3+0x2f8>
   2a634:	00804034 	movhi	r2,256
   2a638:	10bfffc4 	addi	r2,r2,-1
   2a63c:	11c10a36 	bltu	r2,r7,2aa68 <__udivdi3+0x590>
   2a640:	00800404 	movi	r2,16
   2a644:	3886d83a 	srl	r3,r7,r2
   2a648:	010000f4 	movhi	r4,3
   2a64c:	21032b04 	addi	r4,r4,3244
   2a650:	20c7883a 	add	r3,r4,r3
   2a654:	18c00003 	ldbu	r3,0(r3)
   2a658:	05c00804 	movi	r23,32
   2a65c:	1885883a 	add	r2,r3,r2
   2a660:	b8afc83a 	sub	r23,r23,r2
   2a664:	b800671e 	bne	r23,zero,2a804 <__udivdi3+0x32c>
   2a668:	3c010536 	bltu	r7,r16,2aa80 <__udivdi3+0x5a8>
   2a66c:	9985403a 	cmpgeu	r2,r19,r6
   2a670:	0007883a 	mov	r3,zero
   2a674:	00004a06 	br	2a7a0 <__udivdi3+0x2c8>
   2a678:	3000041e 	bne	r6,zero,2a68c <__udivdi3+0x1b4>
   2a67c:	000b883a 	mov	r5,zero
   2a680:	01000044 	movi	r4,1
   2a684:	0020b1c0 	call	20b1c <__udivsi3>
   2a688:	1023883a 	mov	r17,r2
   2a68c:	00bfffd4 	movui	r2,65535
   2a690:	1440532e 	bgeu	r2,r17,2a7e0 <__udivdi3+0x308>
   2a694:	00804034 	movhi	r2,256
   2a698:	10bfffc4 	addi	r2,r2,-1
   2a69c:	1440f436 	bltu	r2,r17,2aa70 <__udivdi3+0x598>
   2a6a0:	00800404 	movi	r2,16
   2a6a4:	8886d83a 	srl	r3,r17,r2
   2a6a8:	010000f4 	movhi	r4,3
   2a6ac:	21032b04 	addi	r4,r4,3244
   2a6b0:	20c7883a 	add	r3,r4,r3
   2a6b4:	18c00003 	ldbu	r3,0(r3)
   2a6b8:	1885883a 	add	r2,r3,r2
   2a6bc:	00c00804 	movi	r3,32
   2a6c0:	1887c83a 	sub	r3,r3,r2
   2a6c4:	1800a51e 	bne	r3,zero,2a95c <__udivdi3+0x484>
   2a6c8:	882ad43a 	srli	r21,r17,16
   2a6cc:	8461c83a 	sub	r16,r16,r17
   2a6d0:	8d3fffcc 	andi	r20,r17,65535
   2a6d4:	00c00044 	movi	r3,1
   2a6d8:	a80b883a 	mov	r5,r21
   2a6dc:	8009883a 	mov	r4,r16
   2a6e0:	d8c00115 	stw	r3,4(sp)
   2a6e4:	0020b800 	call	20b80 <__umodsi3>
   2a6e8:	a80b883a 	mov	r5,r21
   2a6ec:	8009883a 	mov	r4,r16
   2a6f0:	1027883a 	mov	r19,r2
   2a6f4:	0020b1c0 	call	20b1c <__udivsi3>
   2a6f8:	a00b883a 	mov	r5,r20
   2a6fc:	1009883a 	mov	r4,r2
   2a700:	102d883a 	mov	r22,r2
   2a704:	002b0980 	call	2b098 <__mulsi3>
   2a708:	9826943a 	slli	r19,r19,16
   2a70c:	900ed43a 	srli	r7,r18,16
   2a710:	d8c00117 	ldw	r3,4(sp)
   2a714:	3cceb03a 	or	r7,r7,r19
   2a718:	3880052e 	bgeu	r7,r2,2a730 <__udivdi3+0x258>
   2a71c:	3c4f883a 	add	r7,r7,r17
   2a720:	b13fffc4 	addi	r4,r22,-1
   2a724:	3c400136 	bltu	r7,r17,2a72c <__udivdi3+0x254>
   2a728:	3880e436 	bltu	r7,r2,2aabc <__udivdi3+0x5e4>
   2a72c:	202d883a 	mov	r22,r4
   2a730:	38a1c83a 	sub	r16,r7,r2
   2a734:	8009883a 	mov	r4,r16
   2a738:	a80b883a 	mov	r5,r21
   2a73c:	d8c00115 	stw	r3,4(sp)
   2a740:	0020b800 	call	20b80 <__umodsi3>
   2a744:	1027883a 	mov	r19,r2
   2a748:	8009883a 	mov	r4,r16
   2a74c:	a80b883a 	mov	r5,r21
   2a750:	9826943a 	slli	r19,r19,16
   2a754:	0020b1c0 	call	20b1c <__udivsi3>
   2a758:	a00b883a 	mov	r5,r20
   2a75c:	1009883a 	mov	r4,r2
   2a760:	94bfffcc 	andi	r18,r18,65535
   2a764:	1021883a 	mov	r16,r2
   2a768:	94e4b03a 	or	r18,r18,r19
   2a76c:	002b0980 	call	2b098 <__mulsi3>
   2a770:	d8c00117 	ldw	r3,4(sp)
   2a774:	9080052e 	bgeu	r18,r2,2a78c <__udivdi3+0x2b4>
   2a778:	8ca5883a 	add	r18,r17,r18
   2a77c:	813fffc4 	addi	r4,r16,-1
   2a780:	9440ad36 	bltu	r18,r17,2aa38 <__udivdi3+0x560>
   2a784:	9080ac2e 	bgeu	r18,r2,2aa38 <__udivdi3+0x560>
   2a788:	843fff84 	addi	r16,r16,-2
   2a78c:	b004943a 	slli	r2,r22,16
   2a790:	1404b03a 	or	r2,r2,r16
   2a794:	00000206 	br	2a7a0 <__udivdi3+0x2c8>
   2a798:	0007883a 	mov	r3,zero
   2a79c:	0005883a 	mov	r2,zero
   2a7a0:	dfc00b17 	ldw	ra,44(sp)
   2a7a4:	df000a17 	ldw	fp,40(sp)
   2a7a8:	ddc00917 	ldw	r23,36(sp)
   2a7ac:	dd800817 	ldw	r22,32(sp)
   2a7b0:	dd400717 	ldw	r21,28(sp)
   2a7b4:	dd000617 	ldw	r20,24(sp)
   2a7b8:	dcc00517 	ldw	r19,20(sp)
   2a7bc:	dc800417 	ldw	r18,16(sp)
   2a7c0:	dc400317 	ldw	r17,12(sp)
   2a7c4:	dc000217 	ldw	r16,8(sp)
   2a7c8:	dec00c04 	addi	sp,sp,48
   2a7cc:	f800283a 	ret
   2a7d0:	00803fc4 	movi	r2,255
   2a7d4:	11c5803a 	cmpltu	r2,r2,r7
   2a7d8:	100490fa 	slli	r2,r2,3
   2a7dc:	003f9906 	br	2a644 <__alt_data_end+0xfffea644>
   2a7e0:	00803fc4 	movi	r2,255
   2a7e4:	1445803a 	cmpltu	r2,r2,r17
   2a7e8:	100490fa 	slli	r2,r2,3
   2a7ec:	003fad06 	br	2a6a4 <__alt_data_end+0xfffea6a4>
   2a7f0:	00804034 	movhi	r2,256
   2a7f4:	10bfffc4 	addi	r2,r2,-1
   2a7f8:	11809f36 	bltu	r2,r6,2aa78 <__udivdi3+0x5a0>
   2a7fc:	00800404 	movi	r2,16
   2a800:	003f4c06 	br	2a534 <__alt_data_end+0xfffea534>
   2a804:	3dce983a 	sll	r7,r7,r23
   2a808:	30b8d83a 	srl	fp,r6,r2
   2a80c:	80a2d83a 	srl	r17,r16,r2
   2a810:	35cc983a 	sll	r6,r6,r23
   2a814:	3f38b03a 	or	fp,r7,fp
   2a818:	e024d43a 	srli	r18,fp,16
   2a81c:	9884d83a 	srl	r2,r19,r2
   2a820:	85e0983a 	sll	r16,r16,r23
   2a824:	8809883a 	mov	r4,r17
   2a828:	900b883a 	mov	r5,r18
   2a82c:	d9800015 	stw	r6,0(sp)
   2a830:	1420b03a 	or	r16,r2,r16
   2a834:	0020b800 	call	20b80 <__umodsi3>
   2a838:	900b883a 	mov	r5,r18
   2a83c:	8809883a 	mov	r4,r17
   2a840:	1029883a 	mov	r20,r2
   2a844:	e5bfffcc 	andi	r22,fp,65535
   2a848:	0020b1c0 	call	20b1c <__udivsi3>
   2a84c:	100b883a 	mov	r5,r2
   2a850:	b009883a 	mov	r4,r22
   2a854:	102b883a 	mov	r21,r2
   2a858:	002b0980 	call	2b098 <__mulsi3>
   2a85c:	a028943a 	slli	r20,r20,16
   2a860:	8006d43a 	srli	r3,r16,16
   2a864:	1d06b03a 	or	r3,r3,r20
   2a868:	1880042e 	bgeu	r3,r2,2a87c <__udivdi3+0x3a4>
   2a86c:	1f07883a 	add	r3,r3,fp
   2a870:	a93fffc4 	addi	r4,r21,-1
   2a874:	1f00892e 	bgeu	r3,fp,2aa9c <__udivdi3+0x5c4>
   2a878:	202b883a 	mov	r21,r4
   2a87c:	18a3c83a 	sub	r17,r3,r2
   2a880:	8809883a 	mov	r4,r17
   2a884:	900b883a 	mov	r5,r18
   2a888:	0020b800 	call	20b80 <__umodsi3>
   2a88c:	1029883a 	mov	r20,r2
   2a890:	8809883a 	mov	r4,r17
   2a894:	900b883a 	mov	r5,r18
   2a898:	a028943a 	slli	r20,r20,16
   2a89c:	0020b1c0 	call	20b1c <__udivsi3>
   2a8a0:	100b883a 	mov	r5,r2
   2a8a4:	b009883a 	mov	r4,r22
   2a8a8:	843fffcc 	andi	r16,r16,65535
   2a8ac:	1023883a 	mov	r17,r2
   2a8b0:	8520b03a 	or	r16,r16,r20
   2a8b4:	002b0980 	call	2b098 <__mulsi3>
   2a8b8:	8080042e 	bgeu	r16,r2,2a8cc <__udivdi3+0x3f4>
   2a8bc:	8721883a 	add	r16,r16,fp
   2a8c0:	88ffffc4 	addi	r3,r17,-1
   2a8c4:	8700712e 	bgeu	r16,fp,2aa8c <__udivdi3+0x5b4>
   2a8c8:	1823883a 	mov	r17,r3
   2a8cc:	a80e943a 	slli	r7,r21,16
   2a8d0:	d8c00017 	ldw	r3,0(sp)
   2a8d4:	80a1c83a 	sub	r16,r16,r2
   2a8d8:	3c64b03a 	or	r18,r7,r17
   2a8dc:	1d3fffcc 	andi	r20,r3,65535
   2a8e0:	9022d43a 	srli	r17,r18,16
   2a8e4:	95bfffcc 	andi	r22,r18,65535
   2a8e8:	a00b883a 	mov	r5,r20
   2a8ec:	b009883a 	mov	r4,r22
   2a8f0:	182ad43a 	srli	r21,r3,16
   2a8f4:	002b0980 	call	2b098 <__mulsi3>
   2a8f8:	a00b883a 	mov	r5,r20
   2a8fc:	8809883a 	mov	r4,r17
   2a900:	1039883a 	mov	fp,r2
   2a904:	002b0980 	call	2b098 <__mulsi3>
   2a908:	8809883a 	mov	r4,r17
   2a90c:	a80b883a 	mov	r5,r21
   2a910:	1029883a 	mov	r20,r2
   2a914:	002b0980 	call	2b098 <__mulsi3>
   2a918:	a80b883a 	mov	r5,r21
   2a91c:	b009883a 	mov	r4,r22
   2a920:	1023883a 	mov	r17,r2
   2a924:	002b0980 	call	2b098 <__mulsi3>
   2a928:	e006d43a 	srli	r3,fp,16
   2a92c:	1505883a 	add	r2,r2,r20
   2a930:	1887883a 	add	r3,r3,r2
   2a934:	1d00022e 	bgeu	r3,r20,2a940 <__udivdi3+0x468>
   2a938:	00800074 	movhi	r2,1
   2a93c:	88a3883a 	add	r17,r17,r2
   2a940:	1804d43a 	srli	r2,r3,16
   2a944:	1463883a 	add	r17,r2,r17
   2a948:	84404436 	bltu	r16,r17,2aa5c <__udivdi3+0x584>
   2a94c:	84403e26 	beq	r16,r17,2aa48 <__udivdi3+0x570>
   2a950:	9005883a 	mov	r2,r18
   2a954:	0007883a 	mov	r3,zero
   2a958:	003f9106 	br	2a7a0 <__alt_data_end+0xfffea7a0>
   2a95c:	88e2983a 	sll	r17,r17,r3
   2a960:	80aed83a 	srl	r23,r16,r2
   2a964:	80e0983a 	sll	r16,r16,r3
   2a968:	882ad43a 	srli	r21,r17,16
   2a96c:	9884d83a 	srl	r2,r19,r2
   2a970:	b809883a 	mov	r4,r23
   2a974:	a80b883a 	mov	r5,r21
   2a978:	98e4983a 	sll	r18,r19,r3
   2a97c:	142cb03a 	or	r22,r2,r16
   2a980:	0020b800 	call	20b80 <__umodsi3>
   2a984:	b809883a 	mov	r4,r23
   2a988:	a80b883a 	mov	r5,r21
   2a98c:	1027883a 	mov	r19,r2
   2a990:	8d3fffcc 	andi	r20,r17,65535
   2a994:	0020b1c0 	call	20b1c <__udivsi3>
   2a998:	a009883a 	mov	r4,r20
   2a99c:	100b883a 	mov	r5,r2
   2a9a0:	102f883a 	mov	r23,r2
   2a9a4:	002b0980 	call	2b098 <__mulsi3>
   2a9a8:	9826943a 	slli	r19,r19,16
   2a9ac:	b008d43a 	srli	r4,r22,16
   2a9b0:	24c8b03a 	or	r4,r4,r19
   2a9b4:	2080062e 	bgeu	r4,r2,2a9d0 <__udivdi3+0x4f8>
   2a9b8:	2449883a 	add	r4,r4,r17
   2a9bc:	b8ffffc4 	addi	r3,r23,-1
   2a9c0:	24403c36 	bltu	r4,r17,2aab4 <__udivdi3+0x5dc>
   2a9c4:	20803b2e 	bgeu	r4,r2,2aab4 <__udivdi3+0x5dc>
   2a9c8:	bdffff84 	addi	r23,r23,-2
   2a9cc:	2449883a 	add	r4,r4,r17
   2a9d0:	20a1c83a 	sub	r16,r4,r2
   2a9d4:	a80b883a 	mov	r5,r21
   2a9d8:	8009883a 	mov	r4,r16
   2a9dc:	0020b800 	call	20b80 <__umodsi3>
   2a9e0:	a80b883a 	mov	r5,r21
   2a9e4:	8009883a 	mov	r4,r16
   2a9e8:	1027883a 	mov	r19,r2
   2a9ec:	0020b1c0 	call	20b1c <__udivsi3>
   2a9f0:	a009883a 	mov	r4,r20
   2a9f4:	100b883a 	mov	r5,r2
   2a9f8:	9826943a 	slli	r19,r19,16
   2a9fc:	1039883a 	mov	fp,r2
   2aa00:	002b0980 	call	2b098 <__mulsi3>
   2aa04:	b13fffcc 	andi	r4,r22,65535
   2aa08:	24c8b03a 	or	r4,r4,r19
   2aa0c:	2080062e 	bgeu	r4,r2,2aa28 <__udivdi3+0x550>
   2aa10:	2449883a 	add	r4,r4,r17
   2aa14:	e0ffffc4 	addi	r3,fp,-1
   2aa18:	24402436 	bltu	r4,r17,2aaac <__udivdi3+0x5d4>
   2aa1c:	2080232e 	bgeu	r4,r2,2aaac <__udivdi3+0x5d4>
   2aa20:	e73fff84 	addi	fp,fp,-2
   2aa24:	2449883a 	add	r4,r4,r17
   2aa28:	b82e943a 	slli	r23,r23,16
   2aa2c:	20a1c83a 	sub	r16,r4,r2
   2aa30:	bf06b03a 	or	r3,r23,fp
   2aa34:	003f2806 	br	2a6d8 <__alt_data_end+0xfffea6d8>
   2aa38:	2021883a 	mov	r16,r4
   2aa3c:	003f5306 	br	2a78c <__alt_data_end+0xfffea78c>
   2aa40:	1821883a 	mov	r16,r3
   2aa44:	003ef406 	br	2a618 <__alt_data_end+0xfffea618>
   2aa48:	1806943a 	slli	r3,r3,16
   2aa4c:	9de6983a 	sll	r19,r19,r23
   2aa50:	e73fffcc 	andi	fp,fp,65535
   2aa54:	1f07883a 	add	r3,r3,fp
   2aa58:	98ffbd2e 	bgeu	r19,r3,2a950 <__alt_data_end+0xfffea950>
   2aa5c:	90bfffc4 	addi	r2,r18,-1
   2aa60:	0007883a 	mov	r3,zero
   2aa64:	003f4e06 	br	2a7a0 <__alt_data_end+0xfffea7a0>
   2aa68:	00800604 	movi	r2,24
   2aa6c:	003ef506 	br	2a644 <__alt_data_end+0xfffea644>
   2aa70:	00800604 	movi	r2,24
   2aa74:	003f0b06 	br	2a6a4 <__alt_data_end+0xfffea6a4>
   2aa78:	00800604 	movi	r2,24
   2aa7c:	003ead06 	br	2a534 <__alt_data_end+0xfffea534>
   2aa80:	0007883a 	mov	r3,zero
   2aa84:	00800044 	movi	r2,1
   2aa88:	003f4506 	br	2a7a0 <__alt_data_end+0xfffea7a0>
   2aa8c:	80bf8e2e 	bgeu	r16,r2,2a8c8 <__alt_data_end+0xfffea8c8>
   2aa90:	8c7fff84 	addi	r17,r17,-2
   2aa94:	8721883a 	add	r16,r16,fp
   2aa98:	003f8c06 	br	2a8cc <__alt_data_end+0xfffea8cc>
   2aa9c:	18bf762e 	bgeu	r3,r2,2a878 <__alt_data_end+0xfffea878>
   2aaa0:	ad7fff84 	addi	r21,r21,-2
   2aaa4:	1f07883a 	add	r3,r3,fp
   2aaa8:	003f7406 	br	2a87c <__alt_data_end+0xfffea87c>
   2aaac:	1839883a 	mov	fp,r3
   2aab0:	003fdd06 	br	2aa28 <__alt_data_end+0xfffeaa28>
   2aab4:	182f883a 	mov	r23,r3
   2aab8:	003fc506 	br	2a9d0 <__alt_data_end+0xfffea9d0>
   2aabc:	b5bfff84 	addi	r22,r22,-2
   2aac0:	3c4f883a 	add	r7,r7,r17
   2aac4:	003f1a06 	br	2a730 <__alt_data_end+0xfffea730>
   2aac8:	b5bfff84 	addi	r22,r22,-2
   2aacc:	1c47883a 	add	r3,r3,r17
   2aad0:	003ebc06 	br	2a5c4 <__alt_data_end+0xfffea5c4>

0002aad4 <__umoddi3>:
   2aad4:	defff304 	addi	sp,sp,-52
   2aad8:	df000b15 	stw	fp,44(sp)
   2aadc:	dc400415 	stw	r17,16(sp)
   2aae0:	dc000315 	stw	r16,12(sp)
   2aae4:	dfc00c15 	stw	ra,48(sp)
   2aae8:	ddc00a15 	stw	r23,40(sp)
   2aaec:	dd800915 	stw	r22,36(sp)
   2aaf0:	dd400815 	stw	r21,32(sp)
   2aaf4:	dd000715 	stw	r20,28(sp)
   2aaf8:	dcc00615 	stw	r19,24(sp)
   2aafc:	dc800515 	stw	r18,20(sp)
   2ab00:	2021883a 	mov	r16,r4
   2ab04:	2823883a 	mov	r17,r5
   2ab08:	2839883a 	mov	fp,r5
   2ab0c:	3800401e 	bne	r7,zero,2ac10 <__umoddi3+0x13c>
   2ab10:	3027883a 	mov	r19,r6
   2ab14:	2029883a 	mov	r20,r4
   2ab18:	2980552e 	bgeu	r5,r6,2ac70 <__umoddi3+0x19c>
   2ab1c:	00bfffd4 	movui	r2,65535
   2ab20:	1180a236 	bltu	r2,r6,2adac <__umoddi3+0x2d8>
   2ab24:	01003fc4 	movi	r4,255
   2ab28:	2189803a 	cmpltu	r4,r4,r6
   2ab2c:	200890fa 	slli	r4,r4,3
   2ab30:	3104d83a 	srl	r2,r6,r4
   2ab34:	00c000f4 	movhi	r3,3
   2ab38:	18c32b04 	addi	r3,r3,3244
   2ab3c:	1885883a 	add	r2,r3,r2
   2ab40:	10c00003 	ldbu	r3,0(r2)
   2ab44:	00800804 	movi	r2,32
   2ab48:	1909883a 	add	r4,r3,r4
   2ab4c:	1125c83a 	sub	r18,r2,r4
   2ab50:	90000526 	beq	r18,zero,2ab68 <__umoddi3+0x94>
   2ab54:	8ca2983a 	sll	r17,r17,r18
   2ab58:	8108d83a 	srl	r4,r16,r4
   2ab5c:	34a6983a 	sll	r19,r6,r18
   2ab60:	84a8983a 	sll	r20,r16,r18
   2ab64:	2478b03a 	or	fp,r4,r17
   2ab68:	982cd43a 	srli	r22,r19,16
   2ab6c:	e009883a 	mov	r4,fp
   2ab70:	9dffffcc 	andi	r23,r19,65535
   2ab74:	b00b883a 	mov	r5,r22
   2ab78:	0020b800 	call	20b80 <__umodsi3>
   2ab7c:	b00b883a 	mov	r5,r22
   2ab80:	e009883a 	mov	r4,fp
   2ab84:	102b883a 	mov	r21,r2
   2ab88:	0020b1c0 	call	20b1c <__udivsi3>
   2ab8c:	100b883a 	mov	r5,r2
   2ab90:	b809883a 	mov	r4,r23
   2ab94:	002b0980 	call	2b098 <__mulsi3>
   2ab98:	a82a943a 	slli	r21,r21,16
   2ab9c:	a006d43a 	srli	r3,r20,16
   2aba0:	1d46b03a 	or	r3,r3,r21
   2aba4:	1880032e 	bgeu	r3,r2,2abb4 <__umoddi3+0xe0>
   2aba8:	1cc7883a 	add	r3,r3,r19
   2abac:	1cc00136 	bltu	r3,r19,2abb4 <__umoddi3+0xe0>
   2abb0:	18813136 	bltu	r3,r2,2b078 <__umoddi3+0x5a4>
   2abb4:	18a1c83a 	sub	r16,r3,r2
   2abb8:	b00b883a 	mov	r5,r22
   2abbc:	8009883a 	mov	r4,r16
   2abc0:	0020b800 	call	20b80 <__umodsi3>
   2abc4:	b00b883a 	mov	r5,r22
   2abc8:	8009883a 	mov	r4,r16
   2abcc:	1023883a 	mov	r17,r2
   2abd0:	0020b1c0 	call	20b1c <__udivsi3>
   2abd4:	100b883a 	mov	r5,r2
   2abd8:	b809883a 	mov	r4,r23
   2abdc:	8822943a 	slli	r17,r17,16
   2abe0:	002b0980 	call	2b098 <__mulsi3>
   2abe4:	a0ffffcc 	andi	r3,r20,65535
   2abe8:	1c46b03a 	or	r3,r3,r17
   2abec:	1880042e 	bgeu	r3,r2,2ac00 <__umoddi3+0x12c>
   2abf0:	1cc7883a 	add	r3,r3,r19
   2abf4:	1cc00236 	bltu	r3,r19,2ac00 <__umoddi3+0x12c>
   2abf8:	1880012e 	bgeu	r3,r2,2ac00 <__umoddi3+0x12c>
   2abfc:	1cc7883a 	add	r3,r3,r19
   2ac00:	1885c83a 	sub	r2,r3,r2
   2ac04:	1484d83a 	srl	r2,r2,r18
   2ac08:	0007883a 	mov	r3,zero
   2ac0c:	00005306 	br	2ad5c <__umoddi3+0x288>
   2ac10:	29c05036 	bltu	r5,r7,2ad54 <__umoddi3+0x280>
   2ac14:	00bfffd4 	movui	r2,65535
   2ac18:	11c05c2e 	bgeu	r2,r7,2ad8c <__umoddi3+0x2b8>
   2ac1c:	00804034 	movhi	r2,256
   2ac20:	10bfffc4 	addi	r2,r2,-1
   2ac24:	11c10636 	bltu	r2,r7,2b040 <__umoddi3+0x56c>
   2ac28:	01000404 	movi	r4,16
   2ac2c:	3904d83a 	srl	r2,r7,r4
   2ac30:	00c000f4 	movhi	r3,3
   2ac34:	18c32b04 	addi	r3,r3,3244
   2ac38:	1885883a 	add	r2,r3,r2
   2ac3c:	14c00003 	ldbu	r19,0(r2)
   2ac40:	00c00804 	movi	r3,32
   2ac44:	9927883a 	add	r19,r19,r4
   2ac48:	1ce9c83a 	sub	r20,r3,r19
   2ac4c:	a0005c1e 	bne	r20,zero,2adc0 <__umoddi3+0x2ec>
   2ac50:	3c400136 	bltu	r7,r17,2ac58 <__umoddi3+0x184>
   2ac54:	81810a36 	bltu	r16,r6,2b080 <__umoddi3+0x5ac>
   2ac58:	8185c83a 	sub	r2,r16,r6
   2ac5c:	89e3c83a 	sub	r17,r17,r7
   2ac60:	8089803a 	cmpltu	r4,r16,r2
   2ac64:	8939c83a 	sub	fp,r17,r4
   2ac68:	e007883a 	mov	r3,fp
   2ac6c:	00003b06 	br	2ad5c <__umoddi3+0x288>
   2ac70:	3000041e 	bne	r6,zero,2ac84 <__umoddi3+0x1b0>
   2ac74:	000b883a 	mov	r5,zero
   2ac78:	01000044 	movi	r4,1
   2ac7c:	0020b1c0 	call	20b1c <__udivsi3>
   2ac80:	1027883a 	mov	r19,r2
   2ac84:	00bfffd4 	movui	r2,65535
   2ac88:	14c0442e 	bgeu	r2,r19,2ad9c <__umoddi3+0x2c8>
   2ac8c:	00804034 	movhi	r2,256
   2ac90:	10bfffc4 	addi	r2,r2,-1
   2ac94:	14c0ec36 	bltu	r2,r19,2b048 <__umoddi3+0x574>
   2ac98:	00800404 	movi	r2,16
   2ac9c:	9886d83a 	srl	r3,r19,r2
   2aca0:	010000f4 	movhi	r4,3
   2aca4:	21032b04 	addi	r4,r4,3244
   2aca8:	20c7883a 	add	r3,r4,r3
   2acac:	18c00003 	ldbu	r3,0(r3)
   2acb0:	1887883a 	add	r3,r3,r2
   2acb4:	00800804 	movi	r2,32
   2acb8:	10e5c83a 	sub	r18,r2,r3
   2acbc:	9000ab1e 	bne	r18,zero,2af6c <__umoddi3+0x498>
   2acc0:	982cd43a 	srli	r22,r19,16
   2acc4:	8ce3c83a 	sub	r17,r17,r19
   2acc8:	9dffffcc 	andi	r23,r19,65535
   2accc:	b00b883a 	mov	r5,r22
   2acd0:	8809883a 	mov	r4,r17
   2acd4:	0020b800 	call	20b80 <__umodsi3>
   2acd8:	b00b883a 	mov	r5,r22
   2acdc:	8809883a 	mov	r4,r17
   2ace0:	102b883a 	mov	r21,r2
   2ace4:	0020b1c0 	call	20b1c <__udivsi3>
   2ace8:	b80b883a 	mov	r5,r23
   2acec:	1009883a 	mov	r4,r2
   2acf0:	002b0980 	call	2b098 <__mulsi3>
   2acf4:	a82a943a 	slli	r21,r21,16
   2acf8:	a006d43a 	srli	r3,r20,16
   2acfc:	1d46b03a 	or	r3,r3,r21
   2ad00:	1880042e 	bgeu	r3,r2,2ad14 <__umoddi3+0x240>
   2ad04:	1cc7883a 	add	r3,r3,r19
   2ad08:	1cc00236 	bltu	r3,r19,2ad14 <__umoddi3+0x240>
   2ad0c:	1880012e 	bgeu	r3,r2,2ad14 <__umoddi3+0x240>
   2ad10:	1cc7883a 	add	r3,r3,r19
   2ad14:	18a1c83a 	sub	r16,r3,r2
   2ad18:	b00b883a 	mov	r5,r22
   2ad1c:	8009883a 	mov	r4,r16
   2ad20:	0020b800 	call	20b80 <__umodsi3>
   2ad24:	1023883a 	mov	r17,r2
   2ad28:	b00b883a 	mov	r5,r22
   2ad2c:	8009883a 	mov	r4,r16
   2ad30:	0020b1c0 	call	20b1c <__udivsi3>
   2ad34:	8822943a 	slli	r17,r17,16
   2ad38:	b80b883a 	mov	r5,r23
   2ad3c:	1009883a 	mov	r4,r2
   2ad40:	002b0980 	call	2b098 <__mulsi3>
   2ad44:	a53fffcc 	andi	r20,r20,65535
   2ad48:	a446b03a 	or	r3,r20,r17
   2ad4c:	18bfac2e 	bgeu	r3,r2,2ac00 <__alt_data_end+0xfffeac00>
   2ad50:	003fa706 	br	2abf0 <__alt_data_end+0xfffeabf0>
   2ad54:	2005883a 	mov	r2,r4
   2ad58:	2807883a 	mov	r3,r5
   2ad5c:	dfc00c17 	ldw	ra,48(sp)
   2ad60:	df000b17 	ldw	fp,44(sp)
   2ad64:	ddc00a17 	ldw	r23,40(sp)
   2ad68:	dd800917 	ldw	r22,36(sp)
   2ad6c:	dd400817 	ldw	r21,32(sp)
   2ad70:	dd000717 	ldw	r20,28(sp)
   2ad74:	dcc00617 	ldw	r19,24(sp)
   2ad78:	dc800517 	ldw	r18,20(sp)
   2ad7c:	dc400417 	ldw	r17,16(sp)
   2ad80:	dc000317 	ldw	r16,12(sp)
   2ad84:	dec00d04 	addi	sp,sp,52
   2ad88:	f800283a 	ret
   2ad8c:	04c03fc4 	movi	r19,255
   2ad90:	99c9803a 	cmpltu	r4,r19,r7
   2ad94:	200890fa 	slli	r4,r4,3
   2ad98:	003fa406 	br	2ac2c <__alt_data_end+0xfffeac2c>
   2ad9c:	00803fc4 	movi	r2,255
   2ada0:	14c5803a 	cmpltu	r2,r2,r19
   2ada4:	100490fa 	slli	r2,r2,3
   2ada8:	003fbc06 	br	2ac9c <__alt_data_end+0xfffeac9c>
   2adac:	00804034 	movhi	r2,256
   2adb0:	10bfffc4 	addi	r2,r2,-1
   2adb4:	1180a636 	bltu	r2,r6,2b050 <__umoddi3+0x57c>
   2adb8:	01000404 	movi	r4,16
   2adbc:	003f5c06 	br	2ab30 <__alt_data_end+0xfffeab30>
   2adc0:	3d0e983a 	sll	r7,r7,r20
   2adc4:	34ead83a 	srl	r21,r6,r19
   2adc8:	8cc6d83a 	srl	r3,r17,r19
   2adcc:	8d10983a 	sll	r8,r17,r20
   2add0:	3d6ab03a 	or	r21,r7,r21
   2add4:	a82cd43a 	srli	r22,r21,16
   2add8:	84e2d83a 	srl	r17,r16,r19
   2addc:	1809883a 	mov	r4,r3
   2ade0:	b00b883a 	mov	r5,r22
   2ade4:	8a22b03a 	or	r17,r17,r8
   2ade8:	3524983a 	sll	r18,r6,r20
   2adec:	dc400015 	stw	r17,0(sp)
   2adf0:	d8c00115 	stw	r3,4(sp)
   2adf4:	0020b800 	call	20b80 <__umodsi3>
   2adf8:	d8c00117 	ldw	r3,4(sp)
   2adfc:	b00b883a 	mov	r5,r22
   2ae00:	1039883a 	mov	fp,r2
   2ae04:	1809883a 	mov	r4,r3
   2ae08:	0020b1c0 	call	20b1c <__udivsi3>
   2ae0c:	adffffcc 	andi	r23,r21,65535
   2ae10:	100b883a 	mov	r5,r2
   2ae14:	b809883a 	mov	r4,r23
   2ae18:	1023883a 	mov	r17,r2
   2ae1c:	002b0980 	call	2b098 <__mulsi3>
   2ae20:	d9400017 	ldw	r5,0(sp)
   2ae24:	e008943a 	slli	r4,fp,16
   2ae28:	8520983a 	sll	r16,r16,r20
   2ae2c:	2806d43a 	srli	r3,r5,16
   2ae30:	1906b03a 	or	r3,r3,r4
   2ae34:	1880042e 	bgeu	r3,r2,2ae48 <__umoddi3+0x374>
   2ae38:	1d47883a 	add	r3,r3,r21
   2ae3c:	893fffc4 	addi	r4,r17,-1
   2ae40:	1d40892e 	bgeu	r3,r21,2b068 <__umoddi3+0x594>
   2ae44:	2023883a 	mov	r17,r4
   2ae48:	18b9c83a 	sub	fp,r3,r2
   2ae4c:	b00b883a 	mov	r5,r22
   2ae50:	e009883a 	mov	r4,fp
   2ae54:	0020b800 	call	20b80 <__umodsi3>
   2ae58:	b00b883a 	mov	r5,r22
   2ae5c:	e009883a 	mov	r4,fp
   2ae60:	d8800215 	stw	r2,8(sp)
   2ae64:	0020b1c0 	call	20b1c <__udivsi3>
   2ae68:	100b883a 	mov	r5,r2
   2ae6c:	b809883a 	mov	r4,r23
   2ae70:	102d883a 	mov	r22,r2
   2ae74:	002b0980 	call	2b098 <__mulsi3>
   2ae78:	d9800217 	ldw	r6,8(sp)
   2ae7c:	d8c00017 	ldw	r3,0(sp)
   2ae80:	300c943a 	slli	r6,r6,16
   2ae84:	1a3fffcc 	andi	r8,r3,65535
   2ae88:	4190b03a 	or	r8,r8,r6
   2ae8c:	4080042e 	bgeu	r8,r2,2aea0 <__umoddi3+0x3cc>
   2ae90:	4551883a 	add	r8,r8,r21
   2ae94:	b0ffffc4 	addi	r3,r22,-1
   2ae98:	45406f2e 	bgeu	r8,r21,2b058 <__umoddi3+0x584>
   2ae9c:	182d883a 	mov	r22,r3
   2aea0:	880e943a 	slli	r7,r17,16
   2aea4:	9006d43a 	srli	r3,r18,16
   2aea8:	91bfffcc 	andi	r6,r18,65535
   2aeac:	3dacb03a 	or	r22,r7,r22
   2aeb0:	b02ed43a 	srli	r23,r22,16
   2aeb4:	b5bfffcc 	andi	r22,r22,65535
   2aeb8:	300b883a 	mov	r5,r6
   2aebc:	b009883a 	mov	r4,r22
   2aec0:	40a3c83a 	sub	r17,r8,r2
   2aec4:	d8c00115 	stw	r3,4(sp)
   2aec8:	d9800215 	stw	r6,8(sp)
   2aecc:	002b0980 	call	2b098 <__mulsi3>
   2aed0:	d9800217 	ldw	r6,8(sp)
   2aed4:	b809883a 	mov	r4,r23
   2aed8:	1039883a 	mov	fp,r2
   2aedc:	300b883a 	mov	r5,r6
   2aee0:	002b0980 	call	2b098 <__mulsi3>
   2aee4:	d8c00117 	ldw	r3,4(sp)
   2aee8:	b809883a 	mov	r4,r23
   2aeec:	d8800215 	stw	r2,8(sp)
   2aef0:	180b883a 	mov	r5,r3
   2aef4:	002b0980 	call	2b098 <__mulsi3>
   2aef8:	d8c00117 	ldw	r3,4(sp)
   2aefc:	b009883a 	mov	r4,r22
   2af00:	102f883a 	mov	r23,r2
   2af04:	180b883a 	mov	r5,r3
   2af08:	002b0980 	call	2b098 <__mulsi3>
   2af0c:	d9800217 	ldw	r6,8(sp)
   2af10:	e006d43a 	srli	r3,fp,16
   2af14:	1185883a 	add	r2,r2,r6
   2af18:	1885883a 	add	r2,r3,r2
   2af1c:	1180022e 	bgeu	r2,r6,2af28 <__umoddi3+0x454>
   2af20:	00c00074 	movhi	r3,1
   2af24:	b8ef883a 	add	r23,r23,r3
   2af28:	1006d43a 	srli	r3,r2,16
   2af2c:	1004943a 	slli	r2,r2,16
   2af30:	e73fffcc 	andi	fp,fp,65535
   2af34:	1dc7883a 	add	r3,r3,r23
   2af38:	1739883a 	add	fp,r2,fp
   2af3c:	88c03a36 	bltu	r17,r3,2b028 <__umoddi3+0x554>
   2af40:	88c05126 	beq	r17,r3,2b088 <__umoddi3+0x5b4>
   2af44:	88c9c83a 	sub	r4,r17,r3
   2af48:	e00f883a 	mov	r7,fp
   2af4c:	81cfc83a 	sub	r7,r16,r7
   2af50:	81c7803a 	cmpltu	r3,r16,r7
   2af54:	20c7c83a 	sub	r3,r4,r3
   2af58:	1cc4983a 	sll	r2,r3,r19
   2af5c:	3d0ed83a 	srl	r7,r7,r20
   2af60:	1d06d83a 	srl	r3,r3,r20
   2af64:	11c4b03a 	or	r2,r2,r7
   2af68:	003f7c06 	br	2ad5c <__alt_data_end+0xfffead5c>
   2af6c:	9ca6983a 	sll	r19,r19,r18
   2af70:	88f8d83a 	srl	fp,r17,r3
   2af74:	80c4d83a 	srl	r2,r16,r3
   2af78:	982cd43a 	srli	r22,r19,16
   2af7c:	8ca2983a 	sll	r17,r17,r18
   2af80:	e009883a 	mov	r4,fp
   2af84:	b00b883a 	mov	r5,r22
   2af88:	146ab03a 	or	r21,r2,r17
   2af8c:	0020b800 	call	20b80 <__umodsi3>
   2af90:	b00b883a 	mov	r5,r22
   2af94:	e009883a 	mov	r4,fp
   2af98:	1029883a 	mov	r20,r2
   2af9c:	9dffffcc 	andi	r23,r19,65535
   2afa0:	0020b1c0 	call	20b1c <__udivsi3>
   2afa4:	b809883a 	mov	r4,r23
   2afa8:	100b883a 	mov	r5,r2
   2afac:	002b0980 	call	2b098 <__mulsi3>
   2afb0:	a008943a 	slli	r4,r20,16
   2afb4:	a806d43a 	srli	r3,r21,16
   2afb8:	84a8983a 	sll	r20,r16,r18
   2afbc:	1906b03a 	or	r3,r3,r4
   2afc0:	1880042e 	bgeu	r3,r2,2afd4 <__umoddi3+0x500>
   2afc4:	1cc7883a 	add	r3,r3,r19
   2afc8:	1cc00236 	bltu	r3,r19,2afd4 <__umoddi3+0x500>
   2afcc:	1880012e 	bgeu	r3,r2,2afd4 <__umoddi3+0x500>
   2afd0:	1cc7883a 	add	r3,r3,r19
   2afd4:	18a3c83a 	sub	r17,r3,r2
   2afd8:	b00b883a 	mov	r5,r22
   2afdc:	8809883a 	mov	r4,r17
   2afe0:	0020b800 	call	20b80 <__umodsi3>
   2afe4:	b00b883a 	mov	r5,r22
   2afe8:	8809883a 	mov	r4,r17
   2afec:	1021883a 	mov	r16,r2
   2aff0:	0020b1c0 	call	20b1c <__udivsi3>
   2aff4:	100b883a 	mov	r5,r2
   2aff8:	b809883a 	mov	r4,r23
   2affc:	8020943a 	slli	r16,r16,16
   2b000:	002b0980 	call	2b098 <__mulsi3>
   2b004:	a8ffffcc 	andi	r3,r21,65535
   2b008:	1c06b03a 	or	r3,r3,r16
   2b00c:	1880042e 	bgeu	r3,r2,2b020 <__umoddi3+0x54c>
   2b010:	1cc7883a 	add	r3,r3,r19
   2b014:	1cc00236 	bltu	r3,r19,2b020 <__umoddi3+0x54c>
   2b018:	1880012e 	bgeu	r3,r2,2b020 <__umoddi3+0x54c>
   2b01c:	1cc7883a 	add	r3,r3,r19
   2b020:	18a3c83a 	sub	r17,r3,r2
   2b024:	003f2906 	br	2accc <__alt_data_end+0xfffeaccc>
   2b028:	e48fc83a 	sub	r7,fp,r18
   2b02c:	1d49c83a 	sub	r4,r3,r21
   2b030:	e1f9803a 	cmpltu	fp,fp,r7
   2b034:	2739c83a 	sub	fp,r4,fp
   2b038:	8f09c83a 	sub	r4,r17,fp
   2b03c:	003fc306 	br	2af4c <__alt_data_end+0xfffeaf4c>
   2b040:	01000604 	movi	r4,24
   2b044:	003ef906 	br	2ac2c <__alt_data_end+0xfffeac2c>
   2b048:	00800604 	movi	r2,24
   2b04c:	003f1306 	br	2ac9c <__alt_data_end+0xfffeac9c>
   2b050:	01000604 	movi	r4,24
   2b054:	003eb606 	br	2ab30 <__alt_data_end+0xfffeab30>
   2b058:	40bf902e 	bgeu	r8,r2,2ae9c <__alt_data_end+0xfffeae9c>
   2b05c:	b5bfff84 	addi	r22,r22,-2
   2b060:	4551883a 	add	r8,r8,r21
   2b064:	003f8e06 	br	2aea0 <__alt_data_end+0xfffeaea0>
   2b068:	18bf762e 	bgeu	r3,r2,2ae44 <__alt_data_end+0xfffeae44>
   2b06c:	8c7fff84 	addi	r17,r17,-2
   2b070:	1d47883a 	add	r3,r3,r21
   2b074:	003f7406 	br	2ae48 <__alt_data_end+0xfffeae48>
   2b078:	1cc7883a 	add	r3,r3,r19
   2b07c:	003ecd06 	br	2abb4 <__alt_data_end+0xfffeabb4>
   2b080:	8005883a 	mov	r2,r16
   2b084:	003ef806 	br	2ac68 <__alt_data_end+0xfffeac68>
   2b088:	873fe736 	bltu	r16,fp,2b028 <__alt_data_end+0xfffeb028>
   2b08c:	e00f883a 	mov	r7,fp
   2b090:	0009883a 	mov	r4,zero
   2b094:	003fad06 	br	2af4c <__alt_data_end+0xfffeaf4c>

0002b098 <__mulsi3>:
   2b098:	0005883a 	mov	r2,zero
   2b09c:	20000726 	beq	r4,zero,2b0bc <__mulsi3+0x24>
   2b0a0:	20c0004c 	andi	r3,r4,1
   2b0a4:	2008d07a 	srli	r4,r4,1
   2b0a8:	18000126 	beq	r3,zero,2b0b0 <__mulsi3+0x18>
   2b0ac:	1145883a 	add	r2,r2,r5
   2b0b0:	294b883a 	add	r5,r5,r5
   2b0b4:	203ffa1e 	bne	r4,zero,2b0a0 <__alt_data_end+0xfffeb0a0>
   2b0b8:	f800283a 	ret
   2b0bc:	f800283a 	ret

0002b0c0 <__adddf3>:
   2b0c0:	02c00434 	movhi	r11,16
   2b0c4:	5affffc4 	addi	r11,r11,-1
   2b0c8:	2806d7fa 	srli	r3,r5,31
   2b0cc:	2ad4703a 	and	r10,r5,r11
   2b0d0:	3ad2703a 	and	r9,r7,r11
   2b0d4:	3804d53a 	srli	r2,r7,20
   2b0d8:	3018d77a 	srli	r12,r6,29
   2b0dc:	280ad53a 	srli	r5,r5,20
   2b0e0:	501490fa 	slli	r10,r10,3
   2b0e4:	2010d77a 	srli	r8,r4,29
   2b0e8:	481290fa 	slli	r9,r9,3
   2b0ec:	380ed7fa 	srli	r7,r7,31
   2b0f0:	defffb04 	addi	sp,sp,-20
   2b0f4:	dc800215 	stw	r18,8(sp)
   2b0f8:	dc400115 	stw	r17,4(sp)
   2b0fc:	dc000015 	stw	r16,0(sp)
   2b100:	dfc00415 	stw	ra,16(sp)
   2b104:	dcc00315 	stw	r19,12(sp)
   2b108:	1c803fcc 	andi	r18,r3,255
   2b10c:	2c01ffcc 	andi	r16,r5,2047
   2b110:	5210b03a 	or	r8,r10,r8
   2b114:	202290fa 	slli	r17,r4,3
   2b118:	1081ffcc 	andi	r2,r2,2047
   2b11c:	4b12b03a 	or	r9,r9,r12
   2b120:	300c90fa 	slli	r6,r6,3
   2b124:	91c07526 	beq	r18,r7,2b2fc <__adddf3+0x23c>
   2b128:	8087c83a 	sub	r3,r16,r2
   2b12c:	00c0ab0e 	bge	zero,r3,2b3dc <__adddf3+0x31c>
   2b130:	10002a1e 	bne	r2,zero,2b1dc <__adddf3+0x11c>
   2b134:	4984b03a 	or	r2,r9,r6
   2b138:	1000961e 	bne	r2,zero,2b394 <__adddf3+0x2d4>
   2b13c:	888001cc 	andi	r2,r17,7
   2b140:	10000726 	beq	r2,zero,2b160 <__adddf3+0xa0>
   2b144:	888003cc 	andi	r2,r17,15
   2b148:	00c00104 	movi	r3,4
   2b14c:	10c00426 	beq	r2,r3,2b160 <__adddf3+0xa0>
   2b150:	88c7883a 	add	r3,r17,r3
   2b154:	1c63803a 	cmpltu	r17,r3,r17
   2b158:	4451883a 	add	r8,r8,r17
   2b15c:	1823883a 	mov	r17,r3
   2b160:	4080202c 	andhi	r2,r8,128
   2b164:	10005926 	beq	r2,zero,2b2cc <__adddf3+0x20c>
   2b168:	84000044 	addi	r16,r16,1
   2b16c:	0081ffc4 	movi	r2,2047
   2b170:	8080ba26 	beq	r16,r2,2b45c <__adddf3+0x39c>
   2b174:	00bfe034 	movhi	r2,65408
   2b178:	10bfffc4 	addi	r2,r2,-1
   2b17c:	4090703a 	and	r8,r8,r2
   2b180:	4004977a 	slli	r2,r8,29
   2b184:	4010927a 	slli	r8,r8,9
   2b188:	8822d0fa 	srli	r17,r17,3
   2b18c:	8401ffcc 	andi	r16,r16,2047
   2b190:	4010d33a 	srli	r8,r8,12
   2b194:	9007883a 	mov	r3,r18
   2b198:	1444b03a 	or	r2,r2,r17
   2b19c:	8401ffcc 	andi	r16,r16,2047
   2b1a0:	8020953a 	slli	r16,r16,20
   2b1a4:	18c03fcc 	andi	r3,r3,255
   2b1a8:	01000434 	movhi	r4,16
   2b1ac:	213fffc4 	addi	r4,r4,-1
   2b1b0:	180697fa 	slli	r3,r3,31
   2b1b4:	4110703a 	and	r8,r8,r4
   2b1b8:	4410b03a 	or	r8,r8,r16
   2b1bc:	40c6b03a 	or	r3,r8,r3
   2b1c0:	dfc00417 	ldw	ra,16(sp)
   2b1c4:	dcc00317 	ldw	r19,12(sp)
   2b1c8:	dc800217 	ldw	r18,8(sp)
   2b1cc:	dc400117 	ldw	r17,4(sp)
   2b1d0:	dc000017 	ldw	r16,0(sp)
   2b1d4:	dec00504 	addi	sp,sp,20
   2b1d8:	f800283a 	ret
   2b1dc:	0081ffc4 	movi	r2,2047
   2b1e0:	80bfd626 	beq	r16,r2,2b13c <__alt_data_end+0xfffeb13c>
   2b1e4:	4a402034 	orhi	r9,r9,128
   2b1e8:	00800e04 	movi	r2,56
   2b1ec:	10c09f16 	blt	r2,r3,2b46c <__adddf3+0x3ac>
   2b1f0:	008007c4 	movi	r2,31
   2b1f4:	10c0c216 	blt	r2,r3,2b500 <__adddf3+0x440>
   2b1f8:	00800804 	movi	r2,32
   2b1fc:	10c5c83a 	sub	r2,r2,r3
   2b200:	488a983a 	sll	r5,r9,r2
   2b204:	30c8d83a 	srl	r4,r6,r3
   2b208:	3084983a 	sll	r2,r6,r2
   2b20c:	48c6d83a 	srl	r3,r9,r3
   2b210:	290cb03a 	or	r6,r5,r4
   2b214:	1004c03a 	cmpne	r2,r2,zero
   2b218:	308cb03a 	or	r6,r6,r2
   2b21c:	898dc83a 	sub	r6,r17,r6
   2b220:	89a3803a 	cmpltu	r17,r17,r6
   2b224:	40d1c83a 	sub	r8,r8,r3
   2b228:	4451c83a 	sub	r8,r8,r17
   2b22c:	3023883a 	mov	r17,r6
   2b230:	4080202c 	andhi	r2,r8,128
   2b234:	10002326 	beq	r2,zero,2b2c4 <__adddf3+0x204>
   2b238:	04c02034 	movhi	r19,128
   2b23c:	9cffffc4 	addi	r19,r19,-1
   2b240:	44e6703a 	and	r19,r8,r19
   2b244:	98007626 	beq	r19,zero,2b420 <__adddf3+0x360>
   2b248:	9809883a 	mov	r4,r19
   2b24c:	002d9000 	call	2d900 <__clzsi2>
   2b250:	10fffe04 	addi	r3,r2,-8
   2b254:	010007c4 	movi	r4,31
   2b258:	20c07716 	blt	r4,r3,2b438 <__adddf3+0x378>
   2b25c:	00800804 	movi	r2,32
   2b260:	10c5c83a 	sub	r2,r2,r3
   2b264:	8884d83a 	srl	r2,r17,r2
   2b268:	98d0983a 	sll	r8,r19,r3
   2b26c:	88e2983a 	sll	r17,r17,r3
   2b270:	1204b03a 	or	r2,r2,r8
   2b274:	1c007416 	blt	r3,r16,2b448 <__adddf3+0x388>
   2b278:	1c21c83a 	sub	r16,r3,r16
   2b27c:	82000044 	addi	r8,r16,1
   2b280:	00c007c4 	movi	r3,31
   2b284:	1a009116 	blt	r3,r8,2b4cc <__adddf3+0x40c>
   2b288:	00c00804 	movi	r3,32
   2b28c:	1a07c83a 	sub	r3,r3,r8
   2b290:	8a08d83a 	srl	r4,r17,r8
   2b294:	88e2983a 	sll	r17,r17,r3
   2b298:	10c6983a 	sll	r3,r2,r3
   2b29c:	1210d83a 	srl	r8,r2,r8
   2b2a0:	8804c03a 	cmpne	r2,r17,zero
   2b2a4:	1906b03a 	or	r3,r3,r4
   2b2a8:	18a2b03a 	or	r17,r3,r2
   2b2ac:	0021883a 	mov	r16,zero
   2b2b0:	003fa206 	br	2b13c <__alt_data_end+0xfffeb13c>
   2b2b4:	1890b03a 	or	r8,r3,r2
   2b2b8:	40017d26 	beq	r8,zero,2b8b0 <__adddf3+0x7f0>
   2b2bc:	1011883a 	mov	r8,r2
   2b2c0:	1823883a 	mov	r17,r3
   2b2c4:	888001cc 	andi	r2,r17,7
   2b2c8:	103f9e1e 	bne	r2,zero,2b144 <__alt_data_end+0xfffeb144>
   2b2cc:	4004977a 	slli	r2,r8,29
   2b2d0:	8822d0fa 	srli	r17,r17,3
   2b2d4:	4010d0fa 	srli	r8,r8,3
   2b2d8:	9007883a 	mov	r3,r18
   2b2dc:	1444b03a 	or	r2,r2,r17
   2b2e0:	0101ffc4 	movi	r4,2047
   2b2e4:	81002426 	beq	r16,r4,2b378 <__adddf3+0x2b8>
   2b2e8:	8120703a 	and	r16,r16,r4
   2b2ec:	01000434 	movhi	r4,16
   2b2f0:	213fffc4 	addi	r4,r4,-1
   2b2f4:	4110703a 	and	r8,r8,r4
   2b2f8:	003fa806 	br	2b19c <__alt_data_end+0xfffeb19c>
   2b2fc:	8089c83a 	sub	r4,r16,r2
   2b300:	01005e0e 	bge	zero,r4,2b47c <__adddf3+0x3bc>
   2b304:	10002b26 	beq	r2,zero,2b3b4 <__adddf3+0x2f4>
   2b308:	0081ffc4 	movi	r2,2047
   2b30c:	80bf8b26 	beq	r16,r2,2b13c <__alt_data_end+0xfffeb13c>
   2b310:	4a402034 	orhi	r9,r9,128
   2b314:	00800e04 	movi	r2,56
   2b318:	1100a40e 	bge	r2,r4,2b5ac <__adddf3+0x4ec>
   2b31c:	498cb03a 	or	r6,r9,r6
   2b320:	300ac03a 	cmpne	r5,r6,zero
   2b324:	0013883a 	mov	r9,zero
   2b328:	2c4b883a 	add	r5,r5,r17
   2b32c:	2c63803a 	cmpltu	r17,r5,r17
   2b330:	4a11883a 	add	r8,r9,r8
   2b334:	8a11883a 	add	r8,r17,r8
   2b338:	2823883a 	mov	r17,r5
   2b33c:	4080202c 	andhi	r2,r8,128
   2b340:	103fe026 	beq	r2,zero,2b2c4 <__alt_data_end+0xfffeb2c4>
   2b344:	84000044 	addi	r16,r16,1
   2b348:	0081ffc4 	movi	r2,2047
   2b34c:	8080d226 	beq	r16,r2,2b698 <__adddf3+0x5d8>
   2b350:	00bfe034 	movhi	r2,65408
   2b354:	10bfffc4 	addi	r2,r2,-1
   2b358:	4090703a 	and	r8,r8,r2
   2b35c:	880ad07a 	srli	r5,r17,1
   2b360:	400897fa 	slli	r4,r8,31
   2b364:	88c0004c 	andi	r3,r17,1
   2b368:	28e2b03a 	or	r17,r5,r3
   2b36c:	4010d07a 	srli	r8,r8,1
   2b370:	2462b03a 	or	r17,r4,r17
   2b374:	003f7106 	br	2b13c <__alt_data_end+0xfffeb13c>
   2b378:	4088b03a 	or	r4,r8,r2
   2b37c:	20014526 	beq	r4,zero,2b894 <__adddf3+0x7d4>
   2b380:	01000434 	movhi	r4,16
   2b384:	42000234 	orhi	r8,r8,8
   2b388:	213fffc4 	addi	r4,r4,-1
   2b38c:	4110703a 	and	r8,r8,r4
   2b390:	003f8206 	br	2b19c <__alt_data_end+0xfffeb19c>
   2b394:	18ffffc4 	addi	r3,r3,-1
   2b398:	1800491e 	bne	r3,zero,2b4c0 <__adddf3+0x400>
   2b39c:	898bc83a 	sub	r5,r17,r6
   2b3a0:	8963803a 	cmpltu	r17,r17,r5
   2b3a4:	4251c83a 	sub	r8,r8,r9
   2b3a8:	4451c83a 	sub	r8,r8,r17
   2b3ac:	2823883a 	mov	r17,r5
   2b3b0:	003f9f06 	br	2b230 <__alt_data_end+0xfffeb230>
   2b3b4:	4984b03a 	or	r2,r9,r6
   2b3b8:	103f6026 	beq	r2,zero,2b13c <__alt_data_end+0xfffeb13c>
   2b3bc:	213fffc4 	addi	r4,r4,-1
   2b3c0:	2000931e 	bne	r4,zero,2b610 <__adddf3+0x550>
   2b3c4:	898d883a 	add	r6,r17,r6
   2b3c8:	3463803a 	cmpltu	r17,r6,r17
   2b3cc:	4251883a 	add	r8,r8,r9
   2b3d0:	8a11883a 	add	r8,r17,r8
   2b3d4:	3023883a 	mov	r17,r6
   2b3d8:	003fd806 	br	2b33c <__alt_data_end+0xfffeb33c>
   2b3dc:	1800541e 	bne	r3,zero,2b530 <__adddf3+0x470>
   2b3e0:	80800044 	addi	r2,r16,1
   2b3e4:	1081ffcc 	andi	r2,r2,2047
   2b3e8:	00c00044 	movi	r3,1
   2b3ec:	1880a00e 	bge	r3,r2,2b670 <__adddf3+0x5b0>
   2b3f0:	8989c83a 	sub	r4,r17,r6
   2b3f4:	8905803a 	cmpltu	r2,r17,r4
   2b3f8:	4267c83a 	sub	r19,r8,r9
   2b3fc:	98a7c83a 	sub	r19,r19,r2
   2b400:	9880202c 	andhi	r2,r19,128
   2b404:	10006326 	beq	r2,zero,2b594 <__adddf3+0x4d4>
   2b408:	3463c83a 	sub	r17,r6,r17
   2b40c:	4a07c83a 	sub	r3,r9,r8
   2b410:	344d803a 	cmpltu	r6,r6,r17
   2b414:	19a7c83a 	sub	r19,r3,r6
   2b418:	3825883a 	mov	r18,r7
   2b41c:	983f8a1e 	bne	r19,zero,2b248 <__alt_data_end+0xfffeb248>
   2b420:	8809883a 	mov	r4,r17
   2b424:	002d9000 	call	2d900 <__clzsi2>
   2b428:	10800804 	addi	r2,r2,32
   2b42c:	10fffe04 	addi	r3,r2,-8
   2b430:	010007c4 	movi	r4,31
   2b434:	20ff890e 	bge	r4,r3,2b25c <__alt_data_end+0xfffeb25c>
   2b438:	10bff604 	addi	r2,r2,-40
   2b43c:	8884983a 	sll	r2,r17,r2
   2b440:	0023883a 	mov	r17,zero
   2b444:	1c3f8c0e 	bge	r3,r16,2b278 <__alt_data_end+0xfffeb278>
   2b448:	023fe034 	movhi	r8,65408
   2b44c:	423fffc4 	addi	r8,r8,-1
   2b450:	80e1c83a 	sub	r16,r16,r3
   2b454:	1210703a 	and	r8,r2,r8
   2b458:	003f3806 	br	2b13c <__alt_data_end+0xfffeb13c>
   2b45c:	9007883a 	mov	r3,r18
   2b460:	0011883a 	mov	r8,zero
   2b464:	0005883a 	mov	r2,zero
   2b468:	003f4c06 	br	2b19c <__alt_data_end+0xfffeb19c>
   2b46c:	498cb03a 	or	r6,r9,r6
   2b470:	300cc03a 	cmpne	r6,r6,zero
   2b474:	0007883a 	mov	r3,zero
   2b478:	003f6806 	br	2b21c <__alt_data_end+0xfffeb21c>
   2b47c:	20009c1e 	bne	r4,zero,2b6f0 <__adddf3+0x630>
   2b480:	80800044 	addi	r2,r16,1
   2b484:	1141ffcc 	andi	r5,r2,2047
   2b488:	01000044 	movi	r4,1
   2b48c:	2140670e 	bge	r4,r5,2b62c <__adddf3+0x56c>
   2b490:	0101ffc4 	movi	r4,2047
   2b494:	11007f26 	beq	r2,r4,2b694 <__adddf3+0x5d4>
   2b498:	898d883a 	add	r6,r17,r6
   2b49c:	4247883a 	add	r3,r8,r9
   2b4a0:	3451803a 	cmpltu	r8,r6,r17
   2b4a4:	40d1883a 	add	r8,r8,r3
   2b4a8:	402297fa 	slli	r17,r8,31
   2b4ac:	300cd07a 	srli	r6,r6,1
   2b4b0:	4010d07a 	srli	r8,r8,1
   2b4b4:	1021883a 	mov	r16,r2
   2b4b8:	89a2b03a 	or	r17,r17,r6
   2b4bc:	003f1f06 	br	2b13c <__alt_data_end+0xfffeb13c>
   2b4c0:	0081ffc4 	movi	r2,2047
   2b4c4:	80bf481e 	bne	r16,r2,2b1e8 <__alt_data_end+0xfffeb1e8>
   2b4c8:	003f1c06 	br	2b13c <__alt_data_end+0xfffeb13c>
   2b4cc:	843ff844 	addi	r16,r16,-31
   2b4d0:	01000804 	movi	r4,32
   2b4d4:	1406d83a 	srl	r3,r2,r16
   2b4d8:	41005026 	beq	r8,r4,2b61c <__adddf3+0x55c>
   2b4dc:	01001004 	movi	r4,64
   2b4e0:	2211c83a 	sub	r8,r4,r8
   2b4e4:	1204983a 	sll	r2,r2,r8
   2b4e8:	88a2b03a 	or	r17,r17,r2
   2b4ec:	8822c03a 	cmpne	r17,r17,zero
   2b4f0:	1c62b03a 	or	r17,r3,r17
   2b4f4:	0011883a 	mov	r8,zero
   2b4f8:	0021883a 	mov	r16,zero
   2b4fc:	003f7106 	br	2b2c4 <__alt_data_end+0xfffeb2c4>
   2b500:	193ff804 	addi	r4,r3,-32
   2b504:	00800804 	movi	r2,32
   2b508:	4908d83a 	srl	r4,r9,r4
   2b50c:	18804526 	beq	r3,r2,2b624 <__adddf3+0x564>
   2b510:	00801004 	movi	r2,64
   2b514:	10c5c83a 	sub	r2,r2,r3
   2b518:	4886983a 	sll	r3,r9,r2
   2b51c:	198cb03a 	or	r6,r3,r6
   2b520:	300cc03a 	cmpne	r6,r6,zero
   2b524:	218cb03a 	or	r6,r4,r6
   2b528:	0007883a 	mov	r3,zero
   2b52c:	003f3b06 	br	2b21c <__alt_data_end+0xfffeb21c>
   2b530:	80002a26 	beq	r16,zero,2b5dc <__adddf3+0x51c>
   2b534:	0101ffc4 	movi	r4,2047
   2b538:	11006826 	beq	r2,r4,2b6dc <__adddf3+0x61c>
   2b53c:	00c7c83a 	sub	r3,zero,r3
   2b540:	42002034 	orhi	r8,r8,128
   2b544:	01000e04 	movi	r4,56
   2b548:	20c07c16 	blt	r4,r3,2b73c <__adddf3+0x67c>
   2b54c:	010007c4 	movi	r4,31
   2b550:	20c0da16 	blt	r4,r3,2b8bc <__adddf3+0x7fc>
   2b554:	01000804 	movi	r4,32
   2b558:	20c9c83a 	sub	r4,r4,r3
   2b55c:	4114983a 	sll	r10,r8,r4
   2b560:	88cad83a 	srl	r5,r17,r3
   2b564:	8908983a 	sll	r4,r17,r4
   2b568:	40c6d83a 	srl	r3,r8,r3
   2b56c:	5162b03a 	or	r17,r10,r5
   2b570:	2008c03a 	cmpne	r4,r4,zero
   2b574:	8922b03a 	or	r17,r17,r4
   2b578:	3463c83a 	sub	r17,r6,r17
   2b57c:	48c7c83a 	sub	r3,r9,r3
   2b580:	344d803a 	cmpltu	r6,r6,r17
   2b584:	1991c83a 	sub	r8,r3,r6
   2b588:	1021883a 	mov	r16,r2
   2b58c:	3825883a 	mov	r18,r7
   2b590:	003f2706 	br	2b230 <__alt_data_end+0xfffeb230>
   2b594:	24d0b03a 	or	r8,r4,r19
   2b598:	40001b1e 	bne	r8,zero,2b608 <__adddf3+0x548>
   2b59c:	0005883a 	mov	r2,zero
   2b5a0:	0007883a 	mov	r3,zero
   2b5a4:	0021883a 	mov	r16,zero
   2b5a8:	003f4d06 	br	2b2e0 <__alt_data_end+0xfffeb2e0>
   2b5ac:	008007c4 	movi	r2,31
   2b5b0:	11003c16 	blt	r2,r4,2b6a4 <__adddf3+0x5e4>
   2b5b4:	00800804 	movi	r2,32
   2b5b8:	1105c83a 	sub	r2,r2,r4
   2b5bc:	488e983a 	sll	r7,r9,r2
   2b5c0:	310ad83a 	srl	r5,r6,r4
   2b5c4:	3084983a 	sll	r2,r6,r2
   2b5c8:	4912d83a 	srl	r9,r9,r4
   2b5cc:	394ab03a 	or	r5,r7,r5
   2b5d0:	1004c03a 	cmpne	r2,r2,zero
   2b5d4:	288ab03a 	or	r5,r5,r2
   2b5d8:	003f5306 	br	2b328 <__alt_data_end+0xfffeb328>
   2b5dc:	4448b03a 	or	r4,r8,r17
   2b5e0:	20003e26 	beq	r4,zero,2b6dc <__adddf3+0x61c>
   2b5e4:	00c6303a 	nor	r3,zero,r3
   2b5e8:	18003a1e 	bne	r3,zero,2b6d4 <__adddf3+0x614>
   2b5ec:	3463c83a 	sub	r17,r6,r17
   2b5f0:	4a07c83a 	sub	r3,r9,r8
   2b5f4:	344d803a 	cmpltu	r6,r6,r17
   2b5f8:	1991c83a 	sub	r8,r3,r6
   2b5fc:	1021883a 	mov	r16,r2
   2b600:	3825883a 	mov	r18,r7
   2b604:	003f0a06 	br	2b230 <__alt_data_end+0xfffeb230>
   2b608:	2023883a 	mov	r17,r4
   2b60c:	003f0d06 	br	2b244 <__alt_data_end+0xfffeb244>
   2b610:	0081ffc4 	movi	r2,2047
   2b614:	80bf3f1e 	bne	r16,r2,2b314 <__alt_data_end+0xfffeb314>
   2b618:	003ec806 	br	2b13c <__alt_data_end+0xfffeb13c>
   2b61c:	0005883a 	mov	r2,zero
   2b620:	003fb106 	br	2b4e8 <__alt_data_end+0xfffeb4e8>
   2b624:	0007883a 	mov	r3,zero
   2b628:	003fbc06 	br	2b51c <__alt_data_end+0xfffeb51c>
   2b62c:	4444b03a 	or	r2,r8,r17
   2b630:	8000871e 	bne	r16,zero,2b850 <__adddf3+0x790>
   2b634:	1000ba26 	beq	r2,zero,2b920 <__adddf3+0x860>
   2b638:	4984b03a 	or	r2,r9,r6
   2b63c:	103ebf26 	beq	r2,zero,2b13c <__alt_data_end+0xfffeb13c>
   2b640:	8985883a 	add	r2,r17,r6
   2b644:	4247883a 	add	r3,r8,r9
   2b648:	1451803a 	cmpltu	r8,r2,r17
   2b64c:	40d1883a 	add	r8,r8,r3
   2b650:	40c0202c 	andhi	r3,r8,128
   2b654:	1023883a 	mov	r17,r2
   2b658:	183f1a26 	beq	r3,zero,2b2c4 <__alt_data_end+0xfffeb2c4>
   2b65c:	00bfe034 	movhi	r2,65408
   2b660:	10bfffc4 	addi	r2,r2,-1
   2b664:	2021883a 	mov	r16,r4
   2b668:	4090703a 	and	r8,r8,r2
   2b66c:	003eb306 	br	2b13c <__alt_data_end+0xfffeb13c>
   2b670:	4444b03a 	or	r2,r8,r17
   2b674:	8000291e 	bne	r16,zero,2b71c <__adddf3+0x65c>
   2b678:	10004b1e 	bne	r2,zero,2b7a8 <__adddf3+0x6e8>
   2b67c:	4990b03a 	or	r8,r9,r6
   2b680:	40008b26 	beq	r8,zero,2b8b0 <__adddf3+0x7f0>
   2b684:	4811883a 	mov	r8,r9
   2b688:	3023883a 	mov	r17,r6
   2b68c:	3825883a 	mov	r18,r7
   2b690:	003eaa06 	br	2b13c <__alt_data_end+0xfffeb13c>
   2b694:	1021883a 	mov	r16,r2
   2b698:	0011883a 	mov	r8,zero
   2b69c:	0005883a 	mov	r2,zero
   2b6a0:	003f0f06 	br	2b2e0 <__alt_data_end+0xfffeb2e0>
   2b6a4:	217ff804 	addi	r5,r4,-32
   2b6a8:	00800804 	movi	r2,32
   2b6ac:	494ad83a 	srl	r5,r9,r5
   2b6b0:	20807d26 	beq	r4,r2,2b8a8 <__adddf3+0x7e8>
   2b6b4:	00801004 	movi	r2,64
   2b6b8:	1109c83a 	sub	r4,r2,r4
   2b6bc:	4912983a 	sll	r9,r9,r4
   2b6c0:	498cb03a 	or	r6,r9,r6
   2b6c4:	300cc03a 	cmpne	r6,r6,zero
   2b6c8:	298ab03a 	or	r5,r5,r6
   2b6cc:	0013883a 	mov	r9,zero
   2b6d0:	003f1506 	br	2b328 <__alt_data_end+0xfffeb328>
   2b6d4:	0101ffc4 	movi	r4,2047
   2b6d8:	113f9a1e 	bne	r2,r4,2b544 <__alt_data_end+0xfffeb544>
   2b6dc:	4811883a 	mov	r8,r9
   2b6e0:	3023883a 	mov	r17,r6
   2b6e4:	1021883a 	mov	r16,r2
   2b6e8:	3825883a 	mov	r18,r7
   2b6ec:	003e9306 	br	2b13c <__alt_data_end+0xfffeb13c>
   2b6f0:	8000161e 	bne	r16,zero,2b74c <__adddf3+0x68c>
   2b6f4:	444ab03a 	or	r5,r8,r17
   2b6f8:	28005126 	beq	r5,zero,2b840 <__adddf3+0x780>
   2b6fc:	0108303a 	nor	r4,zero,r4
   2b700:	20004d1e 	bne	r4,zero,2b838 <__adddf3+0x778>
   2b704:	89a3883a 	add	r17,r17,r6
   2b708:	4253883a 	add	r9,r8,r9
   2b70c:	898d803a 	cmpltu	r6,r17,r6
   2b710:	3251883a 	add	r8,r6,r9
   2b714:	1021883a 	mov	r16,r2
   2b718:	003f0806 	br	2b33c <__alt_data_end+0xfffeb33c>
   2b71c:	1000301e 	bne	r2,zero,2b7e0 <__adddf3+0x720>
   2b720:	4984b03a 	or	r2,r9,r6
   2b724:	10007126 	beq	r2,zero,2b8ec <__adddf3+0x82c>
   2b728:	4811883a 	mov	r8,r9
   2b72c:	3023883a 	mov	r17,r6
   2b730:	3825883a 	mov	r18,r7
   2b734:	0401ffc4 	movi	r16,2047
   2b738:	003e8006 	br	2b13c <__alt_data_end+0xfffeb13c>
   2b73c:	4462b03a 	or	r17,r8,r17
   2b740:	8822c03a 	cmpne	r17,r17,zero
   2b744:	0007883a 	mov	r3,zero
   2b748:	003f8b06 	br	2b578 <__alt_data_end+0xfffeb578>
   2b74c:	0141ffc4 	movi	r5,2047
   2b750:	11403b26 	beq	r2,r5,2b840 <__adddf3+0x780>
   2b754:	0109c83a 	sub	r4,zero,r4
   2b758:	42002034 	orhi	r8,r8,128
   2b75c:	01400e04 	movi	r5,56
   2b760:	29006716 	blt	r5,r4,2b900 <__adddf3+0x840>
   2b764:	014007c4 	movi	r5,31
   2b768:	29007016 	blt	r5,r4,2b92c <__adddf3+0x86c>
   2b76c:	01400804 	movi	r5,32
   2b770:	290bc83a 	sub	r5,r5,r4
   2b774:	4154983a 	sll	r10,r8,r5
   2b778:	890ed83a 	srl	r7,r17,r4
   2b77c:	894a983a 	sll	r5,r17,r5
   2b780:	4108d83a 	srl	r4,r8,r4
   2b784:	51e2b03a 	or	r17,r10,r7
   2b788:	280ac03a 	cmpne	r5,r5,zero
   2b78c:	8962b03a 	or	r17,r17,r5
   2b790:	89a3883a 	add	r17,r17,r6
   2b794:	2253883a 	add	r9,r4,r9
   2b798:	898d803a 	cmpltu	r6,r17,r6
   2b79c:	3251883a 	add	r8,r6,r9
   2b7a0:	1021883a 	mov	r16,r2
   2b7a4:	003ee506 	br	2b33c <__alt_data_end+0xfffeb33c>
   2b7a8:	4984b03a 	or	r2,r9,r6
   2b7ac:	103e6326 	beq	r2,zero,2b13c <__alt_data_end+0xfffeb13c>
   2b7b0:	8987c83a 	sub	r3,r17,r6
   2b7b4:	88c9803a 	cmpltu	r4,r17,r3
   2b7b8:	4245c83a 	sub	r2,r8,r9
   2b7bc:	1105c83a 	sub	r2,r2,r4
   2b7c0:	1100202c 	andhi	r4,r2,128
   2b7c4:	203ebb26 	beq	r4,zero,2b2b4 <__alt_data_end+0xfffeb2b4>
   2b7c8:	3463c83a 	sub	r17,r6,r17
   2b7cc:	4a07c83a 	sub	r3,r9,r8
   2b7d0:	344d803a 	cmpltu	r6,r6,r17
   2b7d4:	1991c83a 	sub	r8,r3,r6
   2b7d8:	3825883a 	mov	r18,r7
   2b7dc:	003e5706 	br	2b13c <__alt_data_end+0xfffeb13c>
   2b7e0:	4984b03a 	or	r2,r9,r6
   2b7e4:	10002e26 	beq	r2,zero,2b8a0 <__adddf3+0x7e0>
   2b7e8:	4004d0fa 	srli	r2,r8,3
   2b7ec:	8822d0fa 	srli	r17,r17,3
   2b7f0:	4010977a 	slli	r8,r8,29
   2b7f4:	10c0022c 	andhi	r3,r2,8
   2b7f8:	4462b03a 	or	r17,r8,r17
   2b7fc:	18000826 	beq	r3,zero,2b820 <__adddf3+0x760>
   2b800:	4808d0fa 	srli	r4,r9,3
   2b804:	20c0022c 	andhi	r3,r4,8
   2b808:	1800051e 	bne	r3,zero,2b820 <__adddf3+0x760>
   2b80c:	300cd0fa 	srli	r6,r6,3
   2b810:	4806977a 	slli	r3,r9,29
   2b814:	2005883a 	mov	r2,r4
   2b818:	3825883a 	mov	r18,r7
   2b81c:	19a2b03a 	or	r17,r3,r6
   2b820:	8810d77a 	srli	r8,r17,29
   2b824:	100490fa 	slli	r2,r2,3
   2b828:	882290fa 	slli	r17,r17,3
   2b82c:	0401ffc4 	movi	r16,2047
   2b830:	4090b03a 	or	r8,r8,r2
   2b834:	003e4106 	br	2b13c <__alt_data_end+0xfffeb13c>
   2b838:	0141ffc4 	movi	r5,2047
   2b83c:	117fc71e 	bne	r2,r5,2b75c <__alt_data_end+0xfffeb75c>
   2b840:	4811883a 	mov	r8,r9
   2b844:	3023883a 	mov	r17,r6
   2b848:	1021883a 	mov	r16,r2
   2b84c:	003e3b06 	br	2b13c <__alt_data_end+0xfffeb13c>
   2b850:	10002f26 	beq	r2,zero,2b910 <__adddf3+0x850>
   2b854:	4984b03a 	or	r2,r9,r6
   2b858:	10001126 	beq	r2,zero,2b8a0 <__adddf3+0x7e0>
   2b85c:	4004d0fa 	srli	r2,r8,3
   2b860:	8822d0fa 	srli	r17,r17,3
   2b864:	4010977a 	slli	r8,r8,29
   2b868:	10c0022c 	andhi	r3,r2,8
   2b86c:	4462b03a 	or	r17,r8,r17
   2b870:	183feb26 	beq	r3,zero,2b820 <__alt_data_end+0xfffeb820>
   2b874:	4808d0fa 	srli	r4,r9,3
   2b878:	20c0022c 	andhi	r3,r4,8
   2b87c:	183fe81e 	bne	r3,zero,2b820 <__alt_data_end+0xfffeb820>
   2b880:	300cd0fa 	srli	r6,r6,3
   2b884:	4806977a 	slli	r3,r9,29
   2b888:	2005883a 	mov	r2,r4
   2b88c:	19a2b03a 	or	r17,r3,r6
   2b890:	003fe306 	br	2b820 <__alt_data_end+0xfffeb820>
   2b894:	0011883a 	mov	r8,zero
   2b898:	0005883a 	mov	r2,zero
   2b89c:	003e3f06 	br	2b19c <__alt_data_end+0xfffeb19c>
   2b8a0:	0401ffc4 	movi	r16,2047
   2b8a4:	003e2506 	br	2b13c <__alt_data_end+0xfffeb13c>
   2b8a8:	0013883a 	mov	r9,zero
   2b8ac:	003f8406 	br	2b6c0 <__alt_data_end+0xfffeb6c0>
   2b8b0:	0005883a 	mov	r2,zero
   2b8b4:	0007883a 	mov	r3,zero
   2b8b8:	003e8906 	br	2b2e0 <__alt_data_end+0xfffeb2e0>
   2b8bc:	197ff804 	addi	r5,r3,-32
   2b8c0:	01000804 	movi	r4,32
   2b8c4:	414ad83a 	srl	r5,r8,r5
   2b8c8:	19002426 	beq	r3,r4,2b95c <__adddf3+0x89c>
   2b8cc:	01001004 	movi	r4,64
   2b8d0:	20c7c83a 	sub	r3,r4,r3
   2b8d4:	40c6983a 	sll	r3,r8,r3
   2b8d8:	1c46b03a 	or	r3,r3,r17
   2b8dc:	1806c03a 	cmpne	r3,r3,zero
   2b8e0:	28e2b03a 	or	r17,r5,r3
   2b8e4:	0007883a 	mov	r3,zero
   2b8e8:	003f2306 	br	2b578 <__alt_data_end+0xfffeb578>
   2b8ec:	0007883a 	mov	r3,zero
   2b8f0:	5811883a 	mov	r8,r11
   2b8f4:	00bfffc4 	movi	r2,-1
   2b8f8:	0401ffc4 	movi	r16,2047
   2b8fc:	003e7806 	br	2b2e0 <__alt_data_end+0xfffeb2e0>
   2b900:	4462b03a 	or	r17,r8,r17
   2b904:	8822c03a 	cmpne	r17,r17,zero
   2b908:	0009883a 	mov	r4,zero
   2b90c:	003fa006 	br	2b790 <__alt_data_end+0xfffeb790>
   2b910:	4811883a 	mov	r8,r9
   2b914:	3023883a 	mov	r17,r6
   2b918:	0401ffc4 	movi	r16,2047
   2b91c:	003e0706 	br	2b13c <__alt_data_end+0xfffeb13c>
   2b920:	4811883a 	mov	r8,r9
   2b924:	3023883a 	mov	r17,r6
   2b928:	003e0406 	br	2b13c <__alt_data_end+0xfffeb13c>
   2b92c:	21fff804 	addi	r7,r4,-32
   2b930:	01400804 	movi	r5,32
   2b934:	41ced83a 	srl	r7,r8,r7
   2b938:	21400a26 	beq	r4,r5,2b964 <__adddf3+0x8a4>
   2b93c:	01401004 	movi	r5,64
   2b940:	2909c83a 	sub	r4,r5,r4
   2b944:	4108983a 	sll	r4,r8,r4
   2b948:	2448b03a 	or	r4,r4,r17
   2b94c:	2008c03a 	cmpne	r4,r4,zero
   2b950:	3922b03a 	or	r17,r7,r4
   2b954:	0009883a 	mov	r4,zero
   2b958:	003f8d06 	br	2b790 <__alt_data_end+0xfffeb790>
   2b95c:	0007883a 	mov	r3,zero
   2b960:	003fdd06 	br	2b8d8 <__alt_data_end+0xfffeb8d8>
   2b964:	0009883a 	mov	r4,zero
   2b968:	003ff706 	br	2b948 <__alt_data_end+0xfffeb948>

0002b96c <__divdf3>:
   2b96c:	defff004 	addi	sp,sp,-64
   2b970:	dc800815 	stw	r18,32(sp)
   2b974:	2824d53a 	srli	r18,r5,20
   2b978:	dd800c15 	stw	r22,48(sp)
   2b97c:	282cd7fa 	srli	r22,r5,31
   2b980:	dc000615 	stw	r16,24(sp)
   2b984:	04000434 	movhi	r16,16
   2b988:	843fffc4 	addi	r16,r16,-1
   2b98c:	dfc00f15 	stw	ra,60(sp)
   2b990:	df000e15 	stw	fp,56(sp)
   2b994:	ddc00d15 	stw	r23,52(sp)
   2b998:	dd400b15 	stw	r21,44(sp)
   2b99c:	dd000a15 	stw	r20,40(sp)
   2b9a0:	dcc00915 	stw	r19,36(sp)
   2b9a4:	dc400715 	stw	r17,28(sp)
   2b9a8:	9481ffcc 	andi	r18,r18,2047
   2b9ac:	2c20703a 	and	r16,r5,r16
   2b9b0:	b2003fcc 	andi	r8,r22,255
   2b9b4:	90006126 	beq	r18,zero,2bb3c <__divdf3+0x1d0>
   2b9b8:	0081ffc4 	movi	r2,2047
   2b9bc:	202b883a 	mov	r21,r4
   2b9c0:	90803726 	beq	r18,r2,2baa0 <__divdf3+0x134>
   2b9c4:	80800434 	orhi	r2,r16,16
   2b9c8:	100490fa 	slli	r2,r2,3
   2b9cc:	2020d77a 	srli	r16,r4,29
   2b9d0:	202a90fa 	slli	r21,r4,3
   2b9d4:	94bf0044 	addi	r18,r18,-1023
   2b9d8:	80a0b03a 	or	r16,r16,r2
   2b9dc:	0013883a 	mov	r9,zero
   2b9e0:	000b883a 	mov	r5,zero
   2b9e4:	3806d53a 	srli	r3,r7,20
   2b9e8:	382ed7fa 	srli	r23,r7,31
   2b9ec:	04400434 	movhi	r17,16
   2b9f0:	8c7fffc4 	addi	r17,r17,-1
   2b9f4:	18c1ffcc 	andi	r3,r3,2047
   2b9f8:	3029883a 	mov	r20,r6
   2b9fc:	3c62703a 	and	r17,r7,r17
   2ba00:	bf003fcc 	andi	fp,r23,255
   2ba04:	18006e26 	beq	r3,zero,2bbc0 <__divdf3+0x254>
   2ba08:	0081ffc4 	movi	r2,2047
   2ba0c:	18806626 	beq	r3,r2,2bba8 <__divdf3+0x23c>
   2ba10:	88800434 	orhi	r2,r17,16
   2ba14:	100490fa 	slli	r2,r2,3
   2ba18:	3022d77a 	srli	r17,r6,29
   2ba1c:	302890fa 	slli	r20,r6,3
   2ba20:	18ff0044 	addi	r3,r3,-1023
   2ba24:	88a2b03a 	or	r17,r17,r2
   2ba28:	000f883a 	mov	r7,zero
   2ba2c:	b5e6f03a 	xor	r19,r22,r23
   2ba30:	3a4cb03a 	or	r6,r7,r9
   2ba34:	008003c4 	movi	r2,15
   2ba38:	9809883a 	mov	r4,r19
   2ba3c:	90c7c83a 	sub	r3,r18,r3
   2ba40:	9cc03fcc 	andi	r19,r19,255
   2ba44:	11809636 	bltu	r2,r6,2bca0 <__divdf3+0x334>
   2ba48:	300c90ba 	slli	r6,r6,2
   2ba4c:	008000f4 	movhi	r2,3
   2ba50:	10ae9804 	addi	r2,r2,-17824
   2ba54:	308d883a 	add	r6,r6,r2
   2ba58:	30800017 	ldw	r2,0(r6)
   2ba5c:	1000683a 	jmp	r2
   2ba60:	0002bca0 	cmpeqi	zero,zero,2802
   2ba64:	0002bad8 	cmpnei	zero,zero,2795
   2ba68:	0002bc90 	cmplti	zero,zero,2802
   2ba6c:	0002bacc 	andi	zero,zero,2795
   2ba70:	0002bc90 	cmplti	zero,zero,2802
   2ba74:	0002bc64 	muli	zero,zero,2801
   2ba78:	0002bc90 	cmplti	zero,zero,2802
   2ba7c:	0002bacc 	andi	zero,zero,2795
   2ba80:	0002bad8 	cmpnei	zero,zero,2795
   2ba84:	0002bad8 	cmpnei	zero,zero,2795
   2ba88:	0002bc64 	muli	zero,zero,2801
   2ba8c:	0002bacc 	andi	zero,zero,2795
   2ba90:	0002babc 	xorhi	zero,zero,2794
   2ba94:	0002babc 	xorhi	zero,zero,2794
   2ba98:	0002babc 	xorhi	zero,zero,2794
   2ba9c:	0002c028 	cmpgeui	zero,zero,2816
   2baa0:	2404b03a 	or	r2,r4,r16
   2baa4:	10006c1e 	bne	r2,zero,2bc58 <__divdf3+0x2ec>
   2baa8:	02400204 	movi	r9,8
   2baac:	0021883a 	mov	r16,zero
   2bab0:	002b883a 	mov	r21,zero
   2bab4:	01400084 	movi	r5,2
   2bab8:	003fca06 	br	2b9e4 <__alt_data_end+0xfffeb9e4>
   2babc:	8023883a 	mov	r17,r16
   2bac0:	a829883a 	mov	r20,r21
   2bac4:	4039883a 	mov	fp,r8
   2bac8:	280f883a 	mov	r7,r5
   2bacc:	00800084 	movi	r2,2
   2bad0:	3881601e 	bne	r7,r2,2c054 <__divdf3+0x6e8>
   2bad4:	e027883a 	mov	r19,fp
   2bad8:	9900004c 	andi	r4,r19,1
   2badc:	0081ffc4 	movi	r2,2047
   2bae0:	0021883a 	mov	r16,zero
   2bae4:	002b883a 	mov	r21,zero
   2bae8:	1004953a 	slli	r2,r2,20
   2baec:	20c03fcc 	andi	r3,r4,255
   2baf0:	01400434 	movhi	r5,16
   2baf4:	297fffc4 	addi	r5,r5,-1
   2baf8:	180697fa 	slli	r3,r3,31
   2bafc:	8160703a 	and	r16,r16,r5
   2bb00:	80a0b03a 	or	r16,r16,r2
   2bb04:	80c6b03a 	or	r3,r16,r3
   2bb08:	a805883a 	mov	r2,r21
   2bb0c:	dfc00f17 	ldw	ra,60(sp)
   2bb10:	df000e17 	ldw	fp,56(sp)
   2bb14:	ddc00d17 	ldw	r23,52(sp)
   2bb18:	dd800c17 	ldw	r22,48(sp)
   2bb1c:	dd400b17 	ldw	r21,44(sp)
   2bb20:	dd000a17 	ldw	r20,40(sp)
   2bb24:	dcc00917 	ldw	r19,36(sp)
   2bb28:	dc800817 	ldw	r18,32(sp)
   2bb2c:	dc400717 	ldw	r17,28(sp)
   2bb30:	dc000617 	ldw	r16,24(sp)
   2bb34:	dec01004 	addi	sp,sp,64
   2bb38:	f800283a 	ret
   2bb3c:	2404b03a 	or	r2,r4,r16
   2bb40:	2023883a 	mov	r17,r4
   2bb44:	10003f26 	beq	r2,zero,2bc44 <__divdf3+0x2d8>
   2bb48:	80015e26 	beq	r16,zero,2c0c4 <__divdf3+0x758>
   2bb4c:	8009883a 	mov	r4,r16
   2bb50:	d9800215 	stw	r6,8(sp)
   2bb54:	d9c00515 	stw	r7,20(sp)
   2bb58:	da000415 	stw	r8,16(sp)
   2bb5c:	002d9000 	call	2d900 <__clzsi2>
   2bb60:	d9800217 	ldw	r6,8(sp)
   2bb64:	d9c00517 	ldw	r7,20(sp)
   2bb68:	da000417 	ldw	r8,16(sp)
   2bb6c:	113ffd44 	addi	r4,r2,-11
   2bb70:	00c00704 	movi	r3,28
   2bb74:	19014f16 	blt	r3,r4,2c0b4 <__divdf3+0x748>
   2bb78:	00c00744 	movi	r3,29
   2bb7c:	157ffe04 	addi	r21,r2,-8
   2bb80:	1907c83a 	sub	r3,r3,r4
   2bb84:	8560983a 	sll	r16,r16,r21
   2bb88:	88c6d83a 	srl	r3,r17,r3
   2bb8c:	8d6a983a 	sll	r21,r17,r21
   2bb90:	1c20b03a 	or	r16,r3,r16
   2bb94:	1080fcc4 	addi	r2,r2,1011
   2bb98:	00a5c83a 	sub	r18,zero,r2
   2bb9c:	0013883a 	mov	r9,zero
   2bba0:	000b883a 	mov	r5,zero
   2bba4:	003f8f06 	br	2b9e4 <__alt_data_end+0xfffeb9e4>
   2bba8:	3444b03a 	or	r2,r6,r17
   2bbac:	1000231e 	bne	r2,zero,2bc3c <__divdf3+0x2d0>
   2bbb0:	0023883a 	mov	r17,zero
   2bbb4:	0029883a 	mov	r20,zero
   2bbb8:	01c00084 	movi	r7,2
   2bbbc:	003f9b06 	br	2ba2c <__alt_data_end+0xfffeba2c>
   2bbc0:	3444b03a 	or	r2,r6,r17
   2bbc4:	10001926 	beq	r2,zero,2bc2c <__divdf3+0x2c0>
   2bbc8:	88014b26 	beq	r17,zero,2c0f8 <__divdf3+0x78c>
   2bbcc:	8809883a 	mov	r4,r17
   2bbd0:	d9400115 	stw	r5,4(sp)
   2bbd4:	d9800215 	stw	r6,8(sp)
   2bbd8:	da000415 	stw	r8,16(sp)
   2bbdc:	da400315 	stw	r9,12(sp)
   2bbe0:	002d9000 	call	2d900 <__clzsi2>
   2bbe4:	d9400117 	ldw	r5,4(sp)
   2bbe8:	d9800217 	ldw	r6,8(sp)
   2bbec:	da000417 	ldw	r8,16(sp)
   2bbf0:	da400317 	ldw	r9,12(sp)
   2bbf4:	113ffd44 	addi	r4,r2,-11
   2bbf8:	00c00704 	movi	r3,28
   2bbfc:	19013a16 	blt	r3,r4,2c0e8 <__divdf3+0x77c>
   2bc00:	00c00744 	movi	r3,29
   2bc04:	153ffe04 	addi	r20,r2,-8
   2bc08:	1907c83a 	sub	r3,r3,r4
   2bc0c:	8d22983a 	sll	r17,r17,r20
   2bc10:	30c6d83a 	srl	r3,r6,r3
   2bc14:	3528983a 	sll	r20,r6,r20
   2bc18:	1c62b03a 	or	r17,r3,r17
   2bc1c:	1080fcc4 	addi	r2,r2,1011
   2bc20:	0087c83a 	sub	r3,zero,r2
   2bc24:	000f883a 	mov	r7,zero
   2bc28:	003f8006 	br	2ba2c <__alt_data_end+0xfffeba2c>
   2bc2c:	0023883a 	mov	r17,zero
   2bc30:	0029883a 	mov	r20,zero
   2bc34:	01c00044 	movi	r7,1
   2bc38:	003f7c06 	br	2ba2c <__alt_data_end+0xfffeba2c>
   2bc3c:	01c000c4 	movi	r7,3
   2bc40:	003f7a06 	br	2ba2c <__alt_data_end+0xfffeba2c>
   2bc44:	02400104 	movi	r9,4
   2bc48:	0021883a 	mov	r16,zero
   2bc4c:	002b883a 	mov	r21,zero
   2bc50:	01400044 	movi	r5,1
   2bc54:	003f6306 	br	2b9e4 <__alt_data_end+0xfffeb9e4>
   2bc58:	02400304 	movi	r9,12
   2bc5c:	014000c4 	movi	r5,3
   2bc60:	003f6006 	br	2b9e4 <__alt_data_end+0xfffeb9e4>
   2bc64:	04000434 	movhi	r16,16
   2bc68:	0009883a 	mov	r4,zero
   2bc6c:	843fffc4 	addi	r16,r16,-1
   2bc70:	057fffc4 	movi	r21,-1
   2bc74:	0081ffc4 	movi	r2,2047
   2bc78:	003f9b06 	br	2bae8 <__alt_data_end+0xfffebae8>
   2bc7c:	00c00044 	movi	r3,1
   2bc80:	1887c83a 	sub	r3,r3,r2
   2bc84:	01000e04 	movi	r4,56
   2bc88:	20c1530e 	bge	r4,r3,2c1d8 <__divdf3+0x86c>
   2bc8c:	9900004c 	andi	r4,r19,1
   2bc90:	0005883a 	mov	r2,zero
   2bc94:	0021883a 	mov	r16,zero
   2bc98:	002b883a 	mov	r21,zero
   2bc9c:	003f9206 	br	2bae8 <__alt_data_end+0xfffebae8>
   2bca0:	8c012e36 	bltu	r17,r16,2c15c <__divdf3+0x7f0>
   2bca4:	84412c26 	beq	r16,r17,2c158 <__divdf3+0x7ec>
   2bca8:	a82f883a 	mov	r23,r21
   2bcac:	18ffffc4 	addi	r3,r3,-1
   2bcb0:	002b883a 	mov	r21,zero
   2bcb4:	a004d63a 	srli	r2,r20,24
   2bcb8:	8822923a 	slli	r17,r17,8
   2bcbc:	a028923a 	slli	r20,r20,8
   2bcc0:	8009883a 	mov	r4,r16
   2bcc4:	88acb03a 	or	r22,r17,r2
   2bcc8:	dd000015 	stw	r20,0(sp)
   2bccc:	b028d43a 	srli	r20,r22,16
   2bcd0:	d8c00215 	stw	r3,8(sp)
   2bcd4:	b4bfffcc 	andi	r18,r22,65535
   2bcd8:	a00b883a 	mov	r5,r20
   2bcdc:	0020b1c0 	call	20b1c <__udivsi3>
   2bce0:	100b883a 	mov	r5,r2
   2bce4:	9009883a 	mov	r4,r18
   2bce8:	1023883a 	mov	r17,r2
   2bcec:	002b0980 	call	2b098 <__mulsi3>
   2bcf0:	8009883a 	mov	r4,r16
   2bcf4:	a00b883a 	mov	r5,r20
   2bcf8:	1039883a 	mov	fp,r2
   2bcfc:	0020b800 	call	20b80 <__umodsi3>
   2bd00:	1004943a 	slli	r2,r2,16
   2bd04:	b808d43a 	srli	r4,r23,16
   2bd08:	d8c00217 	ldw	r3,8(sp)
   2bd0c:	2084b03a 	or	r2,r4,r2
   2bd10:	1700062e 	bgeu	r2,fp,2bd2c <__divdf3+0x3c0>
   2bd14:	1585883a 	add	r2,r2,r22
   2bd18:	893fffc4 	addi	r4,r17,-1
   2bd1c:	15811d36 	bltu	r2,r22,2c194 <__divdf3+0x828>
   2bd20:	17011c2e 	bgeu	r2,fp,2c194 <__divdf3+0x828>
   2bd24:	8c7fff84 	addi	r17,r17,-2
   2bd28:	1585883a 	add	r2,r2,r22
   2bd2c:	1739c83a 	sub	fp,r2,fp
   2bd30:	a00b883a 	mov	r5,r20
   2bd34:	e009883a 	mov	r4,fp
   2bd38:	d8c00215 	stw	r3,8(sp)
   2bd3c:	0020b1c0 	call	20b1c <__udivsi3>
   2bd40:	100b883a 	mov	r5,r2
   2bd44:	9009883a 	mov	r4,r18
   2bd48:	1021883a 	mov	r16,r2
   2bd4c:	002b0980 	call	2b098 <__mulsi3>
   2bd50:	a00b883a 	mov	r5,r20
   2bd54:	e009883a 	mov	r4,fp
   2bd58:	d8800415 	stw	r2,16(sp)
   2bd5c:	0020b800 	call	20b80 <__umodsi3>
   2bd60:	1004943a 	slli	r2,r2,16
   2bd64:	da000417 	ldw	r8,16(sp)
   2bd68:	bdffffcc 	andi	r23,r23,65535
   2bd6c:	b884b03a 	or	r2,r23,r2
   2bd70:	d8c00217 	ldw	r3,8(sp)
   2bd74:	1200062e 	bgeu	r2,r8,2bd90 <__divdf3+0x424>
   2bd78:	1585883a 	add	r2,r2,r22
   2bd7c:	813fffc4 	addi	r4,r16,-1
   2bd80:	15810236 	bltu	r2,r22,2c18c <__divdf3+0x820>
   2bd84:	1201012e 	bgeu	r2,r8,2c18c <__divdf3+0x820>
   2bd88:	843fff84 	addi	r16,r16,-2
   2bd8c:	1585883a 	add	r2,r2,r22
   2bd90:	8822943a 	slli	r17,r17,16
   2bd94:	d9800017 	ldw	r6,0(sp)
   2bd98:	1211c83a 	sub	r8,r2,r8
   2bd9c:	8c22b03a 	or	r17,r17,r16
   2bda0:	373fffcc 	andi	fp,r6,65535
   2bda4:	8abfffcc 	andi	r10,r17,65535
   2bda8:	8820d43a 	srli	r16,r17,16
   2bdac:	5009883a 	mov	r4,r10
   2bdb0:	e00b883a 	mov	r5,fp
   2bdb4:	302ed43a 	srli	r23,r6,16
   2bdb8:	d8c00215 	stw	r3,8(sp)
   2bdbc:	da000415 	stw	r8,16(sp)
   2bdc0:	da800115 	stw	r10,4(sp)
   2bdc4:	002b0980 	call	2b098 <__mulsi3>
   2bdc8:	800b883a 	mov	r5,r16
   2bdcc:	e009883a 	mov	r4,fp
   2bdd0:	d8800515 	stw	r2,20(sp)
   2bdd4:	002b0980 	call	2b098 <__mulsi3>
   2bdd8:	8009883a 	mov	r4,r16
   2bddc:	b80b883a 	mov	r5,r23
   2bde0:	d8800315 	stw	r2,12(sp)
   2bde4:	002b0980 	call	2b098 <__mulsi3>
   2bde8:	da800117 	ldw	r10,4(sp)
   2bdec:	b80b883a 	mov	r5,r23
   2bdf0:	1021883a 	mov	r16,r2
   2bdf4:	5009883a 	mov	r4,r10
   2bdf8:	002b0980 	call	2b098 <__mulsi3>
   2bdfc:	d9c00517 	ldw	r7,20(sp)
   2be00:	da400317 	ldw	r9,12(sp)
   2be04:	d8c00217 	ldw	r3,8(sp)
   2be08:	3808d43a 	srli	r4,r7,16
   2be0c:	1245883a 	add	r2,r2,r9
   2be10:	da000417 	ldw	r8,16(sp)
   2be14:	2085883a 	add	r2,r4,r2
   2be18:	1240022e 	bgeu	r2,r9,2be24 <__divdf3+0x4b8>
   2be1c:	01000074 	movhi	r4,1
   2be20:	8121883a 	add	r16,r16,r4
   2be24:	1008d43a 	srli	r4,r2,16
   2be28:	1004943a 	slli	r2,r2,16
   2be2c:	39ffffcc 	andi	r7,r7,65535
   2be30:	2409883a 	add	r4,r4,r16
   2be34:	11c5883a 	add	r2,r2,r7
   2be38:	4100bb36 	bltu	r8,r4,2c128 <__divdf3+0x7bc>
   2be3c:	4100d726 	beq	r8,r4,2c19c <__divdf3+0x830>
   2be40:	4109c83a 	sub	r4,r8,r4
   2be44:	a8a1c83a 	sub	r16,r21,r2
   2be48:	ac2b803a 	cmpltu	r21,r21,r16
   2be4c:	256bc83a 	sub	r21,r4,r21
   2be50:	b540d926 	beq	r22,r21,2c1b8 <__divdf3+0x84c>
   2be54:	a00b883a 	mov	r5,r20
   2be58:	a809883a 	mov	r4,r21
   2be5c:	d8c00215 	stw	r3,8(sp)
   2be60:	0020b1c0 	call	20b1c <__udivsi3>
   2be64:	100b883a 	mov	r5,r2
   2be68:	9009883a 	mov	r4,r18
   2be6c:	d8800515 	stw	r2,20(sp)
   2be70:	002b0980 	call	2b098 <__mulsi3>
   2be74:	a809883a 	mov	r4,r21
   2be78:	a00b883a 	mov	r5,r20
   2be7c:	d8800415 	stw	r2,16(sp)
   2be80:	0020b800 	call	20b80 <__umodsi3>
   2be84:	1004943a 	slli	r2,r2,16
   2be88:	8008d43a 	srli	r4,r16,16
   2be8c:	da000417 	ldw	r8,16(sp)
   2be90:	d8c00217 	ldw	r3,8(sp)
   2be94:	2084b03a 	or	r2,r4,r2
   2be98:	d9c00517 	ldw	r7,20(sp)
   2be9c:	1200062e 	bgeu	r2,r8,2beb8 <__divdf3+0x54c>
   2bea0:	1585883a 	add	r2,r2,r22
   2bea4:	393fffc4 	addi	r4,r7,-1
   2bea8:	1580c536 	bltu	r2,r22,2c1c0 <__divdf3+0x854>
   2beac:	1200c42e 	bgeu	r2,r8,2c1c0 <__divdf3+0x854>
   2beb0:	39ffff84 	addi	r7,r7,-2
   2beb4:	1585883a 	add	r2,r2,r22
   2beb8:	122bc83a 	sub	r21,r2,r8
   2bebc:	a00b883a 	mov	r5,r20
   2bec0:	a809883a 	mov	r4,r21
   2bec4:	d8c00215 	stw	r3,8(sp)
   2bec8:	d9c00515 	stw	r7,20(sp)
   2becc:	0020b1c0 	call	20b1c <__udivsi3>
   2bed0:	9009883a 	mov	r4,r18
   2bed4:	100b883a 	mov	r5,r2
   2bed8:	d8800415 	stw	r2,16(sp)
   2bedc:	002b0980 	call	2b098 <__mulsi3>
   2bee0:	a809883a 	mov	r4,r21
   2bee4:	a00b883a 	mov	r5,r20
   2bee8:	1025883a 	mov	r18,r2
   2beec:	0020b800 	call	20b80 <__umodsi3>
   2bef0:	1004943a 	slli	r2,r2,16
   2bef4:	813fffcc 	andi	r4,r16,65535
   2bef8:	d8c00217 	ldw	r3,8(sp)
   2befc:	20a0b03a 	or	r16,r4,r2
   2bf00:	d9c00517 	ldw	r7,20(sp)
   2bf04:	da000417 	ldw	r8,16(sp)
   2bf08:	8480062e 	bgeu	r16,r18,2bf24 <__divdf3+0x5b8>
   2bf0c:	85a1883a 	add	r16,r16,r22
   2bf10:	40bfffc4 	addi	r2,r8,-1
   2bf14:	8580ac36 	bltu	r16,r22,2c1c8 <__divdf3+0x85c>
   2bf18:	8480ab2e 	bgeu	r16,r18,2c1c8 <__divdf3+0x85c>
   2bf1c:	423fff84 	addi	r8,r8,-2
   2bf20:	85a1883a 	add	r16,r16,r22
   2bf24:	3804943a 	slli	r2,r7,16
   2bf28:	84a1c83a 	sub	r16,r16,r18
   2bf2c:	e009883a 	mov	r4,fp
   2bf30:	1228b03a 	or	r20,r2,r8
   2bf34:	a1ffffcc 	andi	r7,r20,65535
   2bf38:	a024d43a 	srli	r18,r20,16
   2bf3c:	380b883a 	mov	r5,r7
   2bf40:	d8c00215 	stw	r3,8(sp)
   2bf44:	d9c00515 	stw	r7,20(sp)
   2bf48:	002b0980 	call	2b098 <__mulsi3>
   2bf4c:	900b883a 	mov	r5,r18
   2bf50:	e009883a 	mov	r4,fp
   2bf54:	102b883a 	mov	r21,r2
   2bf58:	002b0980 	call	2b098 <__mulsi3>
   2bf5c:	900b883a 	mov	r5,r18
   2bf60:	b809883a 	mov	r4,r23
   2bf64:	1039883a 	mov	fp,r2
   2bf68:	002b0980 	call	2b098 <__mulsi3>
   2bf6c:	d9c00517 	ldw	r7,20(sp)
   2bf70:	b80b883a 	mov	r5,r23
   2bf74:	1025883a 	mov	r18,r2
   2bf78:	3809883a 	mov	r4,r7
   2bf7c:	002b0980 	call	2b098 <__mulsi3>
   2bf80:	a808d43a 	srli	r4,r21,16
   2bf84:	1705883a 	add	r2,r2,fp
   2bf88:	d8c00217 	ldw	r3,8(sp)
   2bf8c:	2085883a 	add	r2,r4,r2
   2bf90:	1700022e 	bgeu	r2,fp,2bf9c <__divdf3+0x630>
   2bf94:	01000074 	movhi	r4,1
   2bf98:	9125883a 	add	r18,r18,r4
   2bf9c:	1008d43a 	srli	r4,r2,16
   2bfa0:	1004943a 	slli	r2,r2,16
   2bfa4:	ad7fffcc 	andi	r21,r21,65535
   2bfa8:	2489883a 	add	r4,r4,r18
   2bfac:	1545883a 	add	r2,r2,r21
   2bfb0:	81003836 	bltu	r16,r4,2c094 <__divdf3+0x728>
   2bfb4:	81003626 	beq	r16,r4,2c090 <__divdf3+0x724>
   2bfb8:	a5000054 	ori	r20,r20,1
   2bfbc:	1880ffc4 	addi	r2,r3,1023
   2bfc0:	00bf2e0e 	bge	zero,r2,2bc7c <__alt_data_end+0xfffebc7c>
   2bfc4:	a10001cc 	andi	r4,r20,7
   2bfc8:	20000726 	beq	r4,zero,2bfe8 <__divdf3+0x67c>
   2bfcc:	a10003cc 	andi	r4,r20,15
   2bfd0:	01400104 	movi	r5,4
   2bfd4:	21400426 	beq	r4,r5,2bfe8 <__divdf3+0x67c>
   2bfd8:	a149883a 	add	r4,r20,r5
   2bfdc:	2529803a 	cmpltu	r20,r4,r20
   2bfe0:	8d23883a 	add	r17,r17,r20
   2bfe4:	2029883a 	mov	r20,r4
   2bfe8:	8900402c 	andhi	r4,r17,256
   2bfec:	20000426 	beq	r4,zero,2c000 <__divdf3+0x694>
   2bff0:	18810004 	addi	r2,r3,1024
   2bff4:	00ffc034 	movhi	r3,65280
   2bff8:	18ffffc4 	addi	r3,r3,-1
   2bffc:	88e2703a 	and	r17,r17,r3
   2c000:	00c1ff84 	movi	r3,2046
   2c004:	18beb416 	blt	r3,r2,2bad8 <__alt_data_end+0xfffebad8>
   2c008:	a028d0fa 	srli	r20,r20,3
   2c00c:	882a977a 	slli	r21,r17,29
   2c010:	8820927a 	slli	r16,r17,9
   2c014:	1081ffcc 	andi	r2,r2,2047
   2c018:	ad2ab03a 	or	r21,r21,r20
   2c01c:	8020d33a 	srli	r16,r16,12
   2c020:	9900004c 	andi	r4,r19,1
   2c024:	003eb006 	br	2bae8 <__alt_data_end+0xfffebae8>
   2c028:	8080022c 	andhi	r2,r16,8
   2c02c:	10001226 	beq	r2,zero,2c078 <__divdf3+0x70c>
   2c030:	8880022c 	andhi	r2,r17,8
   2c034:	1000101e 	bne	r2,zero,2c078 <__divdf3+0x70c>
   2c038:	00800434 	movhi	r2,16
   2c03c:	8c000234 	orhi	r16,r17,8
   2c040:	10bfffc4 	addi	r2,r2,-1
   2c044:	b809883a 	mov	r4,r23
   2c048:	80a0703a 	and	r16,r16,r2
   2c04c:	a02b883a 	mov	r21,r20
   2c050:	003f0806 	br	2bc74 <__alt_data_end+0xfffebc74>
   2c054:	008000c4 	movi	r2,3
   2c058:	3880b126 	beq	r7,r2,2c320 <__divdf3+0x9b4>
   2c05c:	00800044 	movi	r2,1
   2c060:	38805b1e 	bne	r7,r2,2c1d0 <__divdf3+0x864>
   2c064:	e009883a 	mov	r4,fp
   2c068:	0005883a 	mov	r2,zero
   2c06c:	0021883a 	mov	r16,zero
   2c070:	002b883a 	mov	r21,zero
   2c074:	003e9c06 	br	2bae8 <__alt_data_end+0xfffebae8>
   2c078:	00800434 	movhi	r2,16
   2c07c:	84000234 	orhi	r16,r16,8
   2c080:	10bfffc4 	addi	r2,r2,-1
   2c084:	b009883a 	mov	r4,r22
   2c088:	80a0703a 	and	r16,r16,r2
   2c08c:	003ef906 	br	2bc74 <__alt_data_end+0xfffebc74>
   2c090:	103fca26 	beq	r2,zero,2bfbc <__alt_data_end+0xfffebfbc>
   2c094:	b421883a 	add	r16,r22,r16
   2c098:	a17fffc4 	addi	r5,r20,-1
   2c09c:	8580422e 	bgeu	r16,r22,2c1a8 <__divdf3+0x83c>
   2c0a0:	2829883a 	mov	r20,r5
   2c0a4:	813fc41e 	bne	r16,r4,2bfb8 <__alt_data_end+0xfffebfb8>
   2c0a8:	d9800017 	ldw	r6,0(sp)
   2c0ac:	30bfc21e 	bne	r6,r2,2bfb8 <__alt_data_end+0xfffebfb8>
   2c0b0:	003fc206 	br	2bfbc <__alt_data_end+0xfffebfbc>
   2c0b4:	143ff604 	addi	r16,r2,-40
   2c0b8:	8c20983a 	sll	r16,r17,r16
   2c0bc:	002b883a 	mov	r21,zero
   2c0c0:	003eb406 	br	2bb94 <__alt_data_end+0xfffebb94>
   2c0c4:	d9800215 	stw	r6,8(sp)
   2c0c8:	d9c00515 	stw	r7,20(sp)
   2c0cc:	da000415 	stw	r8,16(sp)
   2c0d0:	002d9000 	call	2d900 <__clzsi2>
   2c0d4:	10800804 	addi	r2,r2,32
   2c0d8:	da000417 	ldw	r8,16(sp)
   2c0dc:	d9c00517 	ldw	r7,20(sp)
   2c0e0:	d9800217 	ldw	r6,8(sp)
   2c0e4:	003ea106 	br	2bb6c <__alt_data_end+0xfffebb6c>
   2c0e8:	147ff604 	addi	r17,r2,-40
   2c0ec:	3462983a 	sll	r17,r6,r17
   2c0f0:	0029883a 	mov	r20,zero
   2c0f4:	003ec906 	br	2bc1c <__alt_data_end+0xfffebc1c>
   2c0f8:	3009883a 	mov	r4,r6
   2c0fc:	d9400115 	stw	r5,4(sp)
   2c100:	d9800215 	stw	r6,8(sp)
   2c104:	da000415 	stw	r8,16(sp)
   2c108:	da400315 	stw	r9,12(sp)
   2c10c:	002d9000 	call	2d900 <__clzsi2>
   2c110:	10800804 	addi	r2,r2,32
   2c114:	da400317 	ldw	r9,12(sp)
   2c118:	da000417 	ldw	r8,16(sp)
   2c11c:	d9800217 	ldw	r6,8(sp)
   2c120:	d9400117 	ldw	r5,4(sp)
   2c124:	003eb306 	br	2bbf4 <__alt_data_end+0xfffebbf4>
   2c128:	d9800017 	ldw	r6,0(sp)
   2c12c:	a9ab883a 	add	r21,r21,r6
   2c130:	a98b803a 	cmpltu	r5,r21,r6
   2c134:	2d8b883a 	add	r5,r5,r22
   2c138:	2a11883a 	add	r8,r5,r8
   2c13c:	897fffc4 	addi	r5,r17,-1
   2c140:	b2000c2e 	bgeu	r22,r8,2c174 <__divdf3+0x808>
   2c144:	41003f36 	bltu	r8,r4,2c244 <__divdf3+0x8d8>
   2c148:	22006c26 	beq	r4,r8,2c2fc <__divdf3+0x990>
   2c14c:	4109c83a 	sub	r4,r8,r4
   2c150:	2823883a 	mov	r17,r5
   2c154:	003f3b06 	br	2be44 <__alt_data_end+0xfffebe44>
   2c158:	ad3ed336 	bltu	r21,r20,2bca8 <__alt_data_end+0xfffebca8>
   2c15c:	a804d07a 	srli	r2,r21,1
   2c160:	802e97fa 	slli	r23,r16,31
   2c164:	a82a97fa 	slli	r21,r21,31
   2c168:	8020d07a 	srli	r16,r16,1
   2c16c:	b8aeb03a 	or	r23,r23,r2
   2c170:	003ed006 	br	2bcb4 <__alt_data_end+0xfffebcb4>
   2c174:	b23ff51e 	bne	r22,r8,2c14c <__alt_data_end+0xfffec14c>
   2c178:	d9800017 	ldw	r6,0(sp)
   2c17c:	a9bff12e 	bgeu	r21,r6,2c144 <__alt_data_end+0xfffec144>
   2c180:	b109c83a 	sub	r4,r22,r4
   2c184:	2823883a 	mov	r17,r5
   2c188:	003f2e06 	br	2be44 <__alt_data_end+0xfffebe44>
   2c18c:	2021883a 	mov	r16,r4
   2c190:	003eff06 	br	2bd90 <__alt_data_end+0xfffebd90>
   2c194:	2023883a 	mov	r17,r4
   2c198:	003ee406 	br	2bd2c <__alt_data_end+0xfffebd2c>
   2c19c:	a8bfe236 	bltu	r21,r2,2c128 <__alt_data_end+0xfffec128>
   2c1a0:	0009883a 	mov	r4,zero
   2c1a4:	003f2706 	br	2be44 <__alt_data_end+0xfffebe44>
   2c1a8:	81002d36 	bltu	r16,r4,2c260 <__divdf3+0x8f4>
   2c1ac:	24005626 	beq	r4,r16,2c308 <__divdf3+0x99c>
   2c1b0:	2829883a 	mov	r20,r5
   2c1b4:	003f8006 	br	2bfb8 <__alt_data_end+0xfffebfb8>
   2c1b8:	053fffc4 	movi	r20,-1
   2c1bc:	003f7f06 	br	2bfbc <__alt_data_end+0xfffebfbc>
   2c1c0:	200f883a 	mov	r7,r4
   2c1c4:	003f3c06 	br	2beb8 <__alt_data_end+0xfffebeb8>
   2c1c8:	1011883a 	mov	r8,r2
   2c1cc:	003f5506 	br	2bf24 <__alt_data_end+0xfffebf24>
   2c1d0:	e027883a 	mov	r19,fp
   2c1d4:	003f7906 	br	2bfbc <__alt_data_end+0xfffebfbc>
   2c1d8:	010007c4 	movi	r4,31
   2c1dc:	20c02816 	blt	r4,r3,2c280 <__divdf3+0x914>
   2c1e0:	00800804 	movi	r2,32
   2c1e4:	10c5c83a 	sub	r2,r2,r3
   2c1e8:	888a983a 	sll	r5,r17,r2
   2c1ec:	a0c8d83a 	srl	r4,r20,r3
   2c1f0:	a084983a 	sll	r2,r20,r2
   2c1f4:	88e2d83a 	srl	r17,r17,r3
   2c1f8:	2906b03a 	or	r3,r5,r4
   2c1fc:	1004c03a 	cmpne	r2,r2,zero
   2c200:	1886b03a 	or	r3,r3,r2
   2c204:	188001cc 	andi	r2,r3,7
   2c208:	10000726 	beq	r2,zero,2c228 <__divdf3+0x8bc>
   2c20c:	188003cc 	andi	r2,r3,15
   2c210:	01000104 	movi	r4,4
   2c214:	11000426 	beq	r2,r4,2c228 <__divdf3+0x8bc>
   2c218:	1805883a 	mov	r2,r3
   2c21c:	10c00104 	addi	r3,r2,4
   2c220:	1885803a 	cmpltu	r2,r3,r2
   2c224:	88a3883a 	add	r17,r17,r2
   2c228:	8880202c 	andhi	r2,r17,128
   2c22c:	10002926 	beq	r2,zero,2c2d4 <__divdf3+0x968>
   2c230:	9900004c 	andi	r4,r19,1
   2c234:	00800044 	movi	r2,1
   2c238:	0021883a 	mov	r16,zero
   2c23c:	002b883a 	mov	r21,zero
   2c240:	003e2906 	br	2bae8 <__alt_data_end+0xfffebae8>
   2c244:	d9800017 	ldw	r6,0(sp)
   2c248:	8c7fff84 	addi	r17,r17,-2
   2c24c:	a9ab883a 	add	r21,r21,r6
   2c250:	a98b803a 	cmpltu	r5,r21,r6
   2c254:	2d8b883a 	add	r5,r5,r22
   2c258:	2a11883a 	add	r8,r5,r8
   2c25c:	003ef806 	br	2be40 <__alt_data_end+0xfffebe40>
   2c260:	d9800017 	ldw	r6,0(sp)
   2c264:	318f883a 	add	r7,r6,r6
   2c268:	398b803a 	cmpltu	r5,r7,r6
   2c26c:	2d8d883a 	add	r6,r5,r22
   2c270:	81a1883a 	add	r16,r16,r6
   2c274:	a17fff84 	addi	r5,r20,-2
   2c278:	d9c00015 	stw	r7,0(sp)
   2c27c:	003f8806 	br	2c0a0 <__alt_data_end+0xfffec0a0>
   2c280:	013ff844 	movi	r4,-31
   2c284:	2085c83a 	sub	r2,r4,r2
   2c288:	8888d83a 	srl	r4,r17,r2
   2c28c:	00800804 	movi	r2,32
   2c290:	18802126 	beq	r3,r2,2c318 <__divdf3+0x9ac>
   2c294:	04001004 	movi	r16,64
   2c298:	80c7c83a 	sub	r3,r16,r3
   2c29c:	88e0983a 	sll	r16,r17,r3
   2c2a0:	8504b03a 	or	r2,r16,r20
   2c2a4:	1004c03a 	cmpne	r2,r2,zero
   2c2a8:	2084b03a 	or	r2,r4,r2
   2c2ac:	144001cc 	andi	r17,r2,7
   2c2b0:	88000d1e 	bne	r17,zero,2c2e8 <__divdf3+0x97c>
   2c2b4:	0021883a 	mov	r16,zero
   2c2b8:	102ad0fa 	srli	r21,r2,3
   2c2bc:	9900004c 	andi	r4,r19,1
   2c2c0:	0005883a 	mov	r2,zero
   2c2c4:	ac6ab03a 	or	r21,r21,r17
   2c2c8:	003e0706 	br	2bae8 <__alt_data_end+0xfffebae8>
   2c2cc:	1007883a 	mov	r3,r2
   2c2d0:	0023883a 	mov	r17,zero
   2c2d4:	8820927a 	slli	r16,r17,9
   2c2d8:	1805883a 	mov	r2,r3
   2c2dc:	8822977a 	slli	r17,r17,29
   2c2e0:	8020d33a 	srli	r16,r16,12
   2c2e4:	003ff406 	br	2c2b8 <__alt_data_end+0xfffec2b8>
   2c2e8:	10c003cc 	andi	r3,r2,15
   2c2ec:	01000104 	movi	r4,4
   2c2f0:	193ff626 	beq	r3,r4,2c2cc <__alt_data_end+0xfffec2cc>
   2c2f4:	0023883a 	mov	r17,zero
   2c2f8:	003fc806 	br	2c21c <__alt_data_end+0xfffec21c>
   2c2fc:	a8bfd136 	bltu	r21,r2,2c244 <__alt_data_end+0xfffec244>
   2c300:	2823883a 	mov	r17,r5
   2c304:	003fa606 	br	2c1a0 <__alt_data_end+0xfffec1a0>
   2c308:	d9800017 	ldw	r6,0(sp)
   2c30c:	30bfd436 	bltu	r6,r2,2c260 <__alt_data_end+0xfffec260>
   2c310:	2829883a 	mov	r20,r5
   2c314:	003f6406 	br	2c0a8 <__alt_data_end+0xfffec0a8>
   2c318:	0021883a 	mov	r16,zero
   2c31c:	003fe006 	br	2c2a0 <__alt_data_end+0xfffec2a0>
   2c320:	00800434 	movhi	r2,16
   2c324:	8c000234 	orhi	r16,r17,8
   2c328:	10bfffc4 	addi	r2,r2,-1
   2c32c:	e009883a 	mov	r4,fp
   2c330:	80a0703a 	and	r16,r16,r2
   2c334:	a02b883a 	mov	r21,r20
   2c338:	003e4e06 	br	2bc74 <__alt_data_end+0xfffebc74>

0002c33c <__eqdf2>:
   2c33c:	2804d53a 	srli	r2,r5,20
   2c340:	3806d53a 	srli	r3,r7,20
   2c344:	02000434 	movhi	r8,16
   2c348:	423fffc4 	addi	r8,r8,-1
   2c34c:	1081ffcc 	andi	r2,r2,2047
   2c350:	0281ffc4 	movi	r10,2047
   2c354:	2a12703a 	and	r9,r5,r8
   2c358:	18c1ffcc 	andi	r3,r3,2047
   2c35c:	3a10703a 	and	r8,r7,r8
   2c360:	280ad7fa 	srli	r5,r5,31
   2c364:	380ed7fa 	srli	r7,r7,31
   2c368:	12801026 	beq	r2,r10,2c3ac <__eqdf2+0x70>
   2c36c:	0281ffc4 	movi	r10,2047
   2c370:	1a800a26 	beq	r3,r10,2c39c <__eqdf2+0x60>
   2c374:	10c00226 	beq	r2,r3,2c380 <__eqdf2+0x44>
   2c378:	00800044 	movi	r2,1
   2c37c:	f800283a 	ret
   2c380:	4a3ffd1e 	bne	r9,r8,2c378 <__alt_data_end+0xfffec378>
   2c384:	21bffc1e 	bne	r4,r6,2c378 <__alt_data_end+0xfffec378>
   2c388:	29c00c26 	beq	r5,r7,2c3bc <__eqdf2+0x80>
   2c38c:	103ffa1e 	bne	r2,zero,2c378 <__alt_data_end+0xfffec378>
   2c390:	2244b03a 	or	r2,r4,r9
   2c394:	1004c03a 	cmpne	r2,r2,zero
   2c398:	f800283a 	ret
   2c39c:	3214b03a 	or	r10,r6,r8
   2c3a0:	503ff426 	beq	r10,zero,2c374 <__alt_data_end+0xfffec374>
   2c3a4:	00800044 	movi	r2,1
   2c3a8:	f800283a 	ret
   2c3ac:	2254b03a 	or	r10,r4,r9
   2c3b0:	503fee26 	beq	r10,zero,2c36c <__alt_data_end+0xfffec36c>
   2c3b4:	00800044 	movi	r2,1
   2c3b8:	f800283a 	ret
   2c3bc:	0005883a 	mov	r2,zero
   2c3c0:	f800283a 	ret

0002c3c4 <__gedf2>:
   2c3c4:	2804d53a 	srli	r2,r5,20
   2c3c8:	3806d53a 	srli	r3,r7,20
   2c3cc:	02000434 	movhi	r8,16
   2c3d0:	423fffc4 	addi	r8,r8,-1
   2c3d4:	1081ffcc 	andi	r2,r2,2047
   2c3d8:	0241ffc4 	movi	r9,2047
   2c3dc:	2a14703a 	and	r10,r5,r8
   2c3e0:	18c1ffcc 	andi	r3,r3,2047
   2c3e4:	3a10703a 	and	r8,r7,r8
   2c3e8:	280ad7fa 	srli	r5,r5,31
   2c3ec:	380ed7fa 	srli	r7,r7,31
   2c3f0:	12401d26 	beq	r2,r9,2c468 <__gedf2+0xa4>
   2c3f4:	0241ffc4 	movi	r9,2047
   2c3f8:	1a401226 	beq	r3,r9,2c444 <__gedf2+0x80>
   2c3fc:	1000081e 	bne	r2,zero,2c420 <__gedf2+0x5c>
   2c400:	2296b03a 	or	r11,r4,r10
   2c404:	5813003a 	cmpeq	r9,r11,zero
   2c408:	1800091e 	bne	r3,zero,2c430 <__gedf2+0x6c>
   2c40c:	3218b03a 	or	r12,r6,r8
   2c410:	6000071e 	bne	r12,zero,2c430 <__gedf2+0x6c>
   2c414:	0005883a 	mov	r2,zero
   2c418:	5800101e 	bne	r11,zero,2c45c <__gedf2+0x98>
   2c41c:	f800283a 	ret
   2c420:	18000c1e 	bne	r3,zero,2c454 <__gedf2+0x90>
   2c424:	3212b03a 	or	r9,r6,r8
   2c428:	48000c26 	beq	r9,zero,2c45c <__gedf2+0x98>
   2c42c:	0013883a 	mov	r9,zero
   2c430:	39c03fcc 	andi	r7,r7,255
   2c434:	48000826 	beq	r9,zero,2c458 <__gedf2+0x94>
   2c438:	38000926 	beq	r7,zero,2c460 <__gedf2+0x9c>
   2c43c:	00800044 	movi	r2,1
   2c440:	f800283a 	ret
   2c444:	3212b03a 	or	r9,r6,r8
   2c448:	483fec26 	beq	r9,zero,2c3fc <__alt_data_end+0xfffec3fc>
   2c44c:	00bfff84 	movi	r2,-2
   2c450:	f800283a 	ret
   2c454:	39c03fcc 	andi	r7,r7,255
   2c458:	29c00626 	beq	r5,r7,2c474 <__gedf2+0xb0>
   2c45c:	283ff726 	beq	r5,zero,2c43c <__alt_data_end+0xfffec43c>
   2c460:	00bfffc4 	movi	r2,-1
   2c464:	f800283a 	ret
   2c468:	2292b03a 	or	r9,r4,r10
   2c46c:	483fe126 	beq	r9,zero,2c3f4 <__alt_data_end+0xfffec3f4>
   2c470:	003ff606 	br	2c44c <__alt_data_end+0xfffec44c>
   2c474:	18bff916 	blt	r3,r2,2c45c <__alt_data_end+0xfffec45c>
   2c478:	10c00316 	blt	r2,r3,2c488 <__gedf2+0xc4>
   2c47c:	42bff736 	bltu	r8,r10,2c45c <__alt_data_end+0xfffec45c>
   2c480:	52000326 	beq	r10,r8,2c490 <__gedf2+0xcc>
   2c484:	5200042e 	bgeu	r10,r8,2c498 <__gedf2+0xd4>
   2c488:	283fec1e 	bne	r5,zero,2c43c <__alt_data_end+0xfffec43c>
   2c48c:	003ff406 	br	2c460 <__alt_data_end+0xfffec460>
   2c490:	313ff236 	bltu	r6,r4,2c45c <__alt_data_end+0xfffec45c>
   2c494:	21bffc36 	bltu	r4,r6,2c488 <__alt_data_end+0xfffec488>
   2c498:	0005883a 	mov	r2,zero
   2c49c:	f800283a 	ret

0002c4a0 <__ledf2>:
   2c4a0:	2804d53a 	srli	r2,r5,20
   2c4a4:	3810d53a 	srli	r8,r7,20
   2c4a8:	00c00434 	movhi	r3,16
   2c4ac:	18ffffc4 	addi	r3,r3,-1
   2c4b0:	1081ffcc 	andi	r2,r2,2047
   2c4b4:	0241ffc4 	movi	r9,2047
   2c4b8:	28d4703a 	and	r10,r5,r3
   2c4bc:	4201ffcc 	andi	r8,r8,2047
   2c4c0:	38c6703a 	and	r3,r7,r3
   2c4c4:	280ad7fa 	srli	r5,r5,31
   2c4c8:	380ed7fa 	srli	r7,r7,31
   2c4cc:	12401f26 	beq	r2,r9,2c54c <__ledf2+0xac>
   2c4d0:	0241ffc4 	movi	r9,2047
   2c4d4:	42401426 	beq	r8,r9,2c528 <__ledf2+0x88>
   2c4d8:	1000091e 	bne	r2,zero,2c500 <__ledf2+0x60>
   2c4dc:	2296b03a 	or	r11,r4,r10
   2c4e0:	5813003a 	cmpeq	r9,r11,zero
   2c4e4:	29403fcc 	andi	r5,r5,255
   2c4e8:	40000a1e 	bne	r8,zero,2c514 <__ledf2+0x74>
   2c4ec:	30d8b03a 	or	r12,r6,r3
   2c4f0:	6000081e 	bne	r12,zero,2c514 <__ledf2+0x74>
   2c4f4:	0005883a 	mov	r2,zero
   2c4f8:	5800111e 	bne	r11,zero,2c540 <__ledf2+0xa0>
   2c4fc:	f800283a 	ret
   2c500:	29403fcc 	andi	r5,r5,255
   2c504:	40000c1e 	bne	r8,zero,2c538 <__ledf2+0x98>
   2c508:	30d2b03a 	or	r9,r6,r3
   2c50c:	48000c26 	beq	r9,zero,2c540 <__ledf2+0xa0>
   2c510:	0013883a 	mov	r9,zero
   2c514:	39c03fcc 	andi	r7,r7,255
   2c518:	48000826 	beq	r9,zero,2c53c <__ledf2+0x9c>
   2c51c:	38001126 	beq	r7,zero,2c564 <__ledf2+0xc4>
   2c520:	00800044 	movi	r2,1
   2c524:	f800283a 	ret
   2c528:	30d2b03a 	or	r9,r6,r3
   2c52c:	483fea26 	beq	r9,zero,2c4d8 <__alt_data_end+0xfffec4d8>
   2c530:	00800084 	movi	r2,2
   2c534:	f800283a 	ret
   2c538:	39c03fcc 	andi	r7,r7,255
   2c53c:	39400726 	beq	r7,r5,2c55c <__ledf2+0xbc>
   2c540:	2800081e 	bne	r5,zero,2c564 <__ledf2+0xc4>
   2c544:	00800044 	movi	r2,1
   2c548:	f800283a 	ret
   2c54c:	2292b03a 	or	r9,r4,r10
   2c550:	483fdf26 	beq	r9,zero,2c4d0 <__alt_data_end+0xfffec4d0>
   2c554:	00800084 	movi	r2,2
   2c558:	f800283a 	ret
   2c55c:	4080030e 	bge	r8,r2,2c56c <__ledf2+0xcc>
   2c560:	383fef26 	beq	r7,zero,2c520 <__alt_data_end+0xfffec520>
   2c564:	00bfffc4 	movi	r2,-1
   2c568:	f800283a 	ret
   2c56c:	123feb16 	blt	r2,r8,2c51c <__alt_data_end+0xfffec51c>
   2c570:	1abff336 	bltu	r3,r10,2c540 <__alt_data_end+0xfffec540>
   2c574:	50c00326 	beq	r10,r3,2c584 <__ledf2+0xe4>
   2c578:	50c0042e 	bgeu	r10,r3,2c58c <__ledf2+0xec>
   2c57c:	283fe81e 	bne	r5,zero,2c520 <__alt_data_end+0xfffec520>
   2c580:	003ff806 	br	2c564 <__alt_data_end+0xfffec564>
   2c584:	313fee36 	bltu	r6,r4,2c540 <__alt_data_end+0xfffec540>
   2c588:	21bffc36 	bltu	r4,r6,2c57c <__alt_data_end+0xfffec57c>
   2c58c:	0005883a 	mov	r2,zero
   2c590:	f800283a 	ret

0002c594 <__muldf3>:
   2c594:	deffee04 	addi	sp,sp,-72
   2c598:	dd000c15 	stw	r20,48(sp)
   2c59c:	2828d53a 	srli	r20,r5,20
   2c5a0:	ddc00f15 	stw	r23,60(sp)
   2c5a4:	282ed7fa 	srli	r23,r5,31
   2c5a8:	dc000815 	stw	r16,32(sp)
   2c5ac:	04000434 	movhi	r16,16
   2c5b0:	dcc00b15 	stw	r19,44(sp)
   2c5b4:	843fffc4 	addi	r16,r16,-1
   2c5b8:	dfc01115 	stw	ra,68(sp)
   2c5bc:	df001015 	stw	fp,64(sp)
   2c5c0:	dd800e15 	stw	r22,56(sp)
   2c5c4:	dd400d15 	stw	r21,52(sp)
   2c5c8:	dc800a15 	stw	r18,40(sp)
   2c5cc:	dc400915 	stw	r17,36(sp)
   2c5d0:	a501ffcc 	andi	r20,r20,2047
   2c5d4:	2c20703a 	and	r16,r5,r16
   2c5d8:	b827883a 	mov	r19,r23
   2c5dc:	ba403fcc 	andi	r9,r23,255
   2c5e0:	a0006026 	beq	r20,zero,2c764 <__muldf3+0x1d0>
   2c5e4:	0081ffc4 	movi	r2,2047
   2c5e8:	202d883a 	mov	r22,r4
   2c5ec:	a0803626 	beq	r20,r2,2c6c8 <__muldf3+0x134>
   2c5f0:	84000434 	orhi	r16,r16,16
   2c5f4:	200ad77a 	srli	r5,r4,29
   2c5f8:	800490fa 	slli	r2,r16,3
   2c5fc:	202c90fa 	slli	r22,r4,3
   2c600:	a53f0044 	addi	r20,r20,-1023
   2c604:	28a0b03a 	or	r16,r5,r2
   2c608:	002b883a 	mov	r21,zero
   2c60c:	000b883a 	mov	r5,zero
   2c610:	3804d53a 	srli	r2,r7,20
   2c614:	3838d7fa 	srli	fp,r7,31
   2c618:	04400434 	movhi	r17,16
   2c61c:	8c7fffc4 	addi	r17,r17,-1
   2c620:	1081ffcc 	andi	r2,r2,2047
   2c624:	3025883a 	mov	r18,r6
   2c628:	3c62703a 	and	r17,r7,r17
   2c62c:	e2803fcc 	andi	r10,fp,255
   2c630:	10006d26 	beq	r2,zero,2c7e8 <__muldf3+0x254>
   2c634:	00c1ffc4 	movi	r3,2047
   2c638:	10c06526 	beq	r2,r3,2c7d0 <__muldf3+0x23c>
   2c63c:	8c400434 	orhi	r17,r17,16
   2c640:	300ed77a 	srli	r7,r6,29
   2c644:	880690fa 	slli	r3,r17,3
   2c648:	302490fa 	slli	r18,r6,3
   2c64c:	10bf0044 	addi	r2,r2,-1023
   2c650:	38e2b03a 	or	r17,r7,r3
   2c654:	000f883a 	mov	r7,zero
   2c658:	a087883a 	add	r3,r20,r2
   2c65c:	010003c4 	movi	r4,15
   2c660:	3d44b03a 	or	r2,r7,r21
   2c664:	e5ccf03a 	xor	r6,fp,r23
   2c668:	1a000044 	addi	r8,r3,1
   2c66c:	20809b36 	bltu	r4,r2,2c8dc <__muldf3+0x348>
   2c670:	100490ba 	slli	r2,r2,2
   2c674:	010000f4 	movhi	r4,3
   2c678:	2131a204 	addi	r4,r4,-14712
   2c67c:	1105883a 	add	r2,r2,r4
   2c680:	10800017 	ldw	r2,0(r2)
   2c684:	1000683a 	jmp	r2
   2c688:	0002c8dc 	xori	zero,zero,2851
   2c68c:	0002c6e8 	cmpgeui	zero,zero,2843
   2c690:	0002c6e8 	cmpgeui	zero,zero,2843
   2c694:	0002c6e4 	muli	zero,zero,2843
   2c698:	0002c8b8 	rdprs	zero,zero,2850
   2c69c:	0002c8b8 	rdprs	zero,zero,2850
   2c6a0:	0002c8a0 	cmpeqi	zero,zero,2850
   2c6a4:	0002c6e4 	muli	zero,zero,2843
   2c6a8:	0002c8b8 	rdprs	zero,zero,2850
   2c6ac:	0002c8a0 	cmpeqi	zero,zero,2850
   2c6b0:	0002c8b8 	rdprs	zero,zero,2850
   2c6b4:	0002c6e4 	muli	zero,zero,2843
   2c6b8:	0002c8c8 	cmpgei	zero,zero,2851
   2c6bc:	0002c8c8 	cmpgei	zero,zero,2851
   2c6c0:	0002c8c8 	cmpgei	zero,zero,2851
   2c6c4:	0002cc28 	cmpgeui	zero,zero,2864
   2c6c8:	2404b03a 	or	r2,r4,r16
   2c6cc:	1000711e 	bne	r2,zero,2c894 <__muldf3+0x300>
   2c6d0:	05400204 	movi	r21,8
   2c6d4:	0021883a 	mov	r16,zero
   2c6d8:	002d883a 	mov	r22,zero
   2c6dc:	01400084 	movi	r5,2
   2c6e0:	003fcb06 	br	2c610 <__alt_data_end+0xfffec610>
   2c6e4:	500d883a 	mov	r6,r10
   2c6e8:	00800084 	movi	r2,2
   2c6ec:	38805926 	beq	r7,r2,2c854 <__muldf3+0x2c0>
   2c6f0:	008000c4 	movi	r2,3
   2c6f4:	3881bb26 	beq	r7,r2,2cde4 <__muldf3+0x850>
   2c6f8:	00800044 	movi	r2,1
   2c6fc:	3881961e 	bne	r7,r2,2cd58 <__muldf3+0x7c4>
   2c700:	3027883a 	mov	r19,r6
   2c704:	0005883a 	mov	r2,zero
   2c708:	0021883a 	mov	r16,zero
   2c70c:	002d883a 	mov	r22,zero
   2c710:	1004953a 	slli	r2,r2,20
   2c714:	98c03fcc 	andi	r3,r19,255
   2c718:	04400434 	movhi	r17,16
   2c71c:	8c7fffc4 	addi	r17,r17,-1
   2c720:	180697fa 	slli	r3,r3,31
   2c724:	8460703a 	and	r16,r16,r17
   2c728:	80a0b03a 	or	r16,r16,r2
   2c72c:	80c6b03a 	or	r3,r16,r3
   2c730:	b005883a 	mov	r2,r22
   2c734:	dfc01117 	ldw	ra,68(sp)
   2c738:	df001017 	ldw	fp,64(sp)
   2c73c:	ddc00f17 	ldw	r23,60(sp)
   2c740:	dd800e17 	ldw	r22,56(sp)
   2c744:	dd400d17 	ldw	r21,52(sp)
   2c748:	dd000c17 	ldw	r20,48(sp)
   2c74c:	dcc00b17 	ldw	r19,44(sp)
   2c750:	dc800a17 	ldw	r18,40(sp)
   2c754:	dc400917 	ldw	r17,36(sp)
   2c758:	dc000817 	ldw	r16,32(sp)
   2c75c:	dec01204 	addi	sp,sp,72
   2c760:	f800283a 	ret
   2c764:	2404b03a 	or	r2,r4,r16
   2c768:	202b883a 	mov	r21,r4
   2c76c:	10004426 	beq	r2,zero,2c880 <__muldf3+0x2ec>
   2c770:	80015126 	beq	r16,zero,2ccb8 <__muldf3+0x724>
   2c774:	8009883a 	mov	r4,r16
   2c778:	d9800715 	stw	r6,28(sp)
   2c77c:	d9c00215 	stw	r7,8(sp)
   2c780:	da400415 	stw	r9,16(sp)
   2c784:	002d9000 	call	2d900 <__clzsi2>
   2c788:	d9800717 	ldw	r6,28(sp)
   2c78c:	d9c00217 	ldw	r7,8(sp)
   2c790:	da400417 	ldw	r9,16(sp)
   2c794:	113ffd44 	addi	r4,r2,-11
   2c798:	00c00704 	movi	r3,28
   2c79c:	19014216 	blt	r3,r4,2cca8 <__muldf3+0x714>
   2c7a0:	00c00744 	movi	r3,29
   2c7a4:	15bffe04 	addi	r22,r2,-8
   2c7a8:	1907c83a 	sub	r3,r3,r4
   2c7ac:	85a0983a 	sll	r16,r16,r22
   2c7b0:	a8c6d83a 	srl	r3,r21,r3
   2c7b4:	adac983a 	sll	r22,r21,r22
   2c7b8:	1c20b03a 	or	r16,r3,r16
   2c7bc:	1080fcc4 	addi	r2,r2,1011
   2c7c0:	00a9c83a 	sub	r20,zero,r2
   2c7c4:	002b883a 	mov	r21,zero
   2c7c8:	000b883a 	mov	r5,zero
   2c7cc:	003f9006 	br	2c610 <__alt_data_end+0xfffec610>
   2c7d0:	3446b03a 	or	r3,r6,r17
   2c7d4:	1800281e 	bne	r3,zero,2c878 <__muldf3+0x2e4>
   2c7d8:	0023883a 	mov	r17,zero
   2c7dc:	0025883a 	mov	r18,zero
   2c7e0:	01c00084 	movi	r7,2
   2c7e4:	003f9c06 	br	2c658 <__alt_data_end+0xfffec658>
   2c7e8:	3446b03a 	or	r3,r6,r17
   2c7ec:	18001e26 	beq	r3,zero,2c868 <__muldf3+0x2d4>
   2c7f0:	88012126 	beq	r17,zero,2cc78 <__muldf3+0x6e4>
   2c7f4:	8809883a 	mov	r4,r17
   2c7f8:	d9400215 	stw	r5,8(sp)
   2c7fc:	d9800715 	stw	r6,28(sp)
   2c800:	da400415 	stw	r9,16(sp)
   2c804:	da800315 	stw	r10,12(sp)
   2c808:	002d9000 	call	2d900 <__clzsi2>
   2c80c:	d9400217 	ldw	r5,8(sp)
   2c810:	d9800717 	ldw	r6,28(sp)
   2c814:	da400417 	ldw	r9,16(sp)
   2c818:	da800317 	ldw	r10,12(sp)
   2c81c:	113ffd44 	addi	r4,r2,-11
   2c820:	00c00704 	movi	r3,28
   2c824:	19011016 	blt	r3,r4,2cc68 <__muldf3+0x6d4>
   2c828:	00c00744 	movi	r3,29
   2c82c:	14bffe04 	addi	r18,r2,-8
   2c830:	1907c83a 	sub	r3,r3,r4
   2c834:	8ca2983a 	sll	r17,r17,r18
   2c838:	30c6d83a 	srl	r3,r6,r3
   2c83c:	34a4983a 	sll	r18,r6,r18
   2c840:	1c62b03a 	or	r17,r3,r17
   2c844:	1080fcc4 	addi	r2,r2,1011
   2c848:	0085c83a 	sub	r2,zero,r2
   2c84c:	000f883a 	mov	r7,zero
   2c850:	003f8106 	br	2c658 <__alt_data_end+0xfffec658>
   2c854:	3027883a 	mov	r19,r6
   2c858:	0081ffc4 	movi	r2,2047
   2c85c:	0021883a 	mov	r16,zero
   2c860:	002d883a 	mov	r22,zero
   2c864:	003faa06 	br	2c710 <__alt_data_end+0xfffec710>
   2c868:	0023883a 	mov	r17,zero
   2c86c:	0025883a 	mov	r18,zero
   2c870:	01c00044 	movi	r7,1
   2c874:	003f7806 	br	2c658 <__alt_data_end+0xfffec658>
   2c878:	01c000c4 	movi	r7,3
   2c87c:	003f7606 	br	2c658 <__alt_data_end+0xfffec658>
   2c880:	05400104 	movi	r21,4
   2c884:	0021883a 	mov	r16,zero
   2c888:	002d883a 	mov	r22,zero
   2c88c:	01400044 	movi	r5,1
   2c890:	003f5f06 	br	2c610 <__alt_data_end+0xfffec610>
   2c894:	05400304 	movi	r21,12
   2c898:	014000c4 	movi	r5,3
   2c89c:	003f5c06 	br	2c610 <__alt_data_end+0xfffec610>
   2c8a0:	04000434 	movhi	r16,16
   2c8a4:	0027883a 	mov	r19,zero
   2c8a8:	843fffc4 	addi	r16,r16,-1
   2c8ac:	05bfffc4 	movi	r22,-1
   2c8b0:	0081ffc4 	movi	r2,2047
   2c8b4:	003f9606 	br	2c710 <__alt_data_end+0xfffec710>
   2c8b8:	8023883a 	mov	r17,r16
   2c8bc:	b025883a 	mov	r18,r22
   2c8c0:	280f883a 	mov	r7,r5
   2c8c4:	003f8806 	br	2c6e8 <__alt_data_end+0xfffec6e8>
   2c8c8:	8023883a 	mov	r17,r16
   2c8cc:	b025883a 	mov	r18,r22
   2c8d0:	480d883a 	mov	r6,r9
   2c8d4:	280f883a 	mov	r7,r5
   2c8d8:	003f8306 	br	2c6e8 <__alt_data_end+0xfffec6e8>
   2c8dc:	b026d43a 	srli	r19,r22,16
   2c8e0:	902ed43a 	srli	r23,r18,16
   2c8e4:	b5bfffcc 	andi	r22,r22,65535
   2c8e8:	94bfffcc 	andi	r18,r18,65535
   2c8ec:	b00b883a 	mov	r5,r22
   2c8f0:	9009883a 	mov	r4,r18
   2c8f4:	d8c00515 	stw	r3,20(sp)
   2c8f8:	d9800715 	stw	r6,28(sp)
   2c8fc:	da000615 	stw	r8,24(sp)
   2c900:	002b0980 	call	2b098 <__mulsi3>
   2c904:	980b883a 	mov	r5,r19
   2c908:	9009883a 	mov	r4,r18
   2c90c:	1029883a 	mov	r20,r2
   2c910:	002b0980 	call	2b098 <__mulsi3>
   2c914:	b80b883a 	mov	r5,r23
   2c918:	9809883a 	mov	r4,r19
   2c91c:	102b883a 	mov	r21,r2
   2c920:	002b0980 	call	2b098 <__mulsi3>
   2c924:	b809883a 	mov	r4,r23
   2c928:	b00b883a 	mov	r5,r22
   2c92c:	1039883a 	mov	fp,r2
   2c930:	002b0980 	call	2b098 <__mulsi3>
   2c934:	a008d43a 	srli	r4,r20,16
   2c938:	1545883a 	add	r2,r2,r21
   2c93c:	d8c00517 	ldw	r3,20(sp)
   2c940:	2085883a 	add	r2,r4,r2
   2c944:	d9800717 	ldw	r6,28(sp)
   2c948:	da000617 	ldw	r8,24(sp)
   2c94c:	1540022e 	bgeu	r2,r21,2c958 <__muldf3+0x3c4>
   2c950:	01000074 	movhi	r4,1
   2c954:	e139883a 	add	fp,fp,r4
   2c958:	100e943a 	slli	r7,r2,16
   2c95c:	1004d43a 	srli	r2,r2,16
   2c960:	882ad43a 	srli	r21,r17,16
   2c964:	a53fffcc 	andi	r20,r20,65535
   2c968:	8c7fffcc 	andi	r17,r17,65535
   2c96c:	3d29883a 	add	r20,r7,r20
   2c970:	b00b883a 	mov	r5,r22
   2c974:	8809883a 	mov	r4,r17
   2c978:	d8c00515 	stw	r3,20(sp)
   2c97c:	d9800715 	stw	r6,28(sp)
   2c980:	da000615 	stw	r8,24(sp)
   2c984:	dd000115 	stw	r20,4(sp)
   2c988:	d8800015 	stw	r2,0(sp)
   2c98c:	002b0980 	call	2b098 <__mulsi3>
   2c990:	980b883a 	mov	r5,r19
   2c994:	8809883a 	mov	r4,r17
   2c998:	d8800215 	stw	r2,8(sp)
   2c99c:	002b0980 	call	2b098 <__mulsi3>
   2c9a0:	9809883a 	mov	r4,r19
   2c9a4:	a80b883a 	mov	r5,r21
   2c9a8:	1029883a 	mov	r20,r2
   2c9ac:	002b0980 	call	2b098 <__mulsi3>
   2c9b0:	b00b883a 	mov	r5,r22
   2c9b4:	a809883a 	mov	r4,r21
   2c9b8:	d8800415 	stw	r2,16(sp)
   2c9bc:	002b0980 	call	2b098 <__mulsi3>
   2c9c0:	d9c00217 	ldw	r7,8(sp)
   2c9c4:	1505883a 	add	r2,r2,r20
   2c9c8:	d8c00517 	ldw	r3,20(sp)
   2c9cc:	3826d43a 	srli	r19,r7,16
   2c9d0:	d9800717 	ldw	r6,28(sp)
   2c9d4:	da000617 	ldw	r8,24(sp)
   2c9d8:	9885883a 	add	r2,r19,r2
   2c9dc:	da400417 	ldw	r9,16(sp)
   2c9e0:	1500022e 	bgeu	r2,r20,2c9ec <__muldf3+0x458>
   2c9e4:	01000074 	movhi	r4,1
   2c9e8:	4913883a 	add	r9,r9,r4
   2c9ec:	1028d43a 	srli	r20,r2,16
   2c9f0:	1004943a 	slli	r2,r2,16
   2c9f4:	802cd43a 	srli	r22,r16,16
   2c9f8:	843fffcc 	andi	r16,r16,65535
   2c9fc:	3cffffcc 	andi	r19,r7,65535
   2ca00:	9009883a 	mov	r4,r18
   2ca04:	800b883a 	mov	r5,r16
   2ca08:	a269883a 	add	r20,r20,r9
   2ca0c:	d8c00515 	stw	r3,20(sp)
   2ca10:	d9800715 	stw	r6,28(sp)
   2ca14:	da000615 	stw	r8,24(sp)
   2ca18:	14e7883a 	add	r19,r2,r19
   2ca1c:	002b0980 	call	2b098 <__mulsi3>
   2ca20:	9009883a 	mov	r4,r18
   2ca24:	b00b883a 	mov	r5,r22
   2ca28:	d8800315 	stw	r2,12(sp)
   2ca2c:	002b0980 	call	2b098 <__mulsi3>
   2ca30:	b809883a 	mov	r4,r23
   2ca34:	b00b883a 	mov	r5,r22
   2ca38:	d8800215 	stw	r2,8(sp)
   2ca3c:	002b0980 	call	2b098 <__mulsi3>
   2ca40:	b80b883a 	mov	r5,r23
   2ca44:	8009883a 	mov	r4,r16
   2ca48:	d8800415 	stw	r2,16(sp)
   2ca4c:	002b0980 	call	2b098 <__mulsi3>
   2ca50:	da800317 	ldw	r10,12(sp)
   2ca54:	d9c00217 	ldw	r7,8(sp)
   2ca58:	d9000017 	ldw	r4,0(sp)
   2ca5c:	502ed43a 	srli	r23,r10,16
   2ca60:	11c5883a 	add	r2,r2,r7
   2ca64:	24e5883a 	add	r18,r4,r19
   2ca68:	b885883a 	add	r2,r23,r2
   2ca6c:	d8c00517 	ldw	r3,20(sp)
   2ca70:	d9800717 	ldw	r6,28(sp)
   2ca74:	da000617 	ldw	r8,24(sp)
   2ca78:	da400417 	ldw	r9,16(sp)
   2ca7c:	11c0022e 	bgeu	r2,r7,2ca88 <__muldf3+0x4f4>
   2ca80:	01000074 	movhi	r4,1
   2ca84:	4913883a 	add	r9,r9,r4
   2ca88:	100ed43a 	srli	r7,r2,16
   2ca8c:	1004943a 	slli	r2,r2,16
   2ca90:	55ffffcc 	andi	r23,r10,65535
   2ca94:	3a53883a 	add	r9,r7,r9
   2ca98:	8809883a 	mov	r4,r17
   2ca9c:	800b883a 	mov	r5,r16
   2caa0:	d8c00515 	stw	r3,20(sp)
   2caa4:	d9800715 	stw	r6,28(sp)
   2caa8:	da000615 	stw	r8,24(sp)
   2caac:	da400415 	stw	r9,16(sp)
   2cab0:	15ef883a 	add	r23,r2,r23
   2cab4:	002b0980 	call	2b098 <__mulsi3>
   2cab8:	8809883a 	mov	r4,r17
   2cabc:	b00b883a 	mov	r5,r22
   2cac0:	d8800215 	stw	r2,8(sp)
   2cac4:	002b0980 	call	2b098 <__mulsi3>
   2cac8:	b00b883a 	mov	r5,r22
   2cacc:	a809883a 	mov	r4,r21
   2cad0:	d8800315 	stw	r2,12(sp)
   2cad4:	002b0980 	call	2b098 <__mulsi3>
   2cad8:	8009883a 	mov	r4,r16
   2cadc:	a80b883a 	mov	r5,r21
   2cae0:	1023883a 	mov	r17,r2
   2cae4:	002b0980 	call	2b098 <__mulsi3>
   2cae8:	d9c00217 	ldw	r7,8(sp)
   2caec:	da800317 	ldw	r10,12(sp)
   2caf0:	d8c00517 	ldw	r3,20(sp)
   2caf4:	3808d43a 	srli	r4,r7,16
   2caf8:	1285883a 	add	r2,r2,r10
   2cafc:	d9800717 	ldw	r6,28(sp)
   2cb00:	2085883a 	add	r2,r4,r2
   2cb04:	da000617 	ldw	r8,24(sp)
   2cb08:	da400417 	ldw	r9,16(sp)
   2cb0c:	1280022e 	bgeu	r2,r10,2cb18 <__muldf3+0x584>
   2cb10:	01000074 	movhi	r4,1
   2cb14:	8923883a 	add	r17,r17,r4
   2cb18:	1008943a 	slli	r4,r2,16
   2cb1c:	39ffffcc 	andi	r7,r7,65535
   2cb20:	e4b9883a 	add	fp,fp,r18
   2cb24:	21cf883a 	add	r7,r4,r7
   2cb28:	e4e7803a 	cmpltu	r19,fp,r19
   2cb2c:	3d0f883a 	add	r7,r7,r20
   2cb30:	bf39883a 	add	fp,r23,fp
   2cb34:	99c9883a 	add	r4,r19,r7
   2cb38:	e5ef803a 	cmpltu	r23,fp,r23
   2cb3c:	490b883a 	add	r5,r9,r4
   2cb40:	1004d43a 	srli	r2,r2,16
   2cb44:	b965883a 	add	r18,r23,r5
   2cb48:	24c9803a 	cmpltu	r4,r4,r19
   2cb4c:	3d29803a 	cmpltu	r20,r7,r20
   2cb50:	a128b03a 	or	r20,r20,r4
   2cb54:	95ef803a 	cmpltu	r23,r18,r23
   2cb58:	2a53803a 	cmpltu	r9,r5,r9
   2cb5c:	a0a9883a 	add	r20,r20,r2
   2cb60:	4deeb03a 	or	r23,r9,r23
   2cb64:	a5ef883a 	add	r23,r20,r23
   2cb68:	bc63883a 	add	r17,r23,r17
   2cb6c:	e004927a 	slli	r2,fp,9
   2cb70:	d9000117 	ldw	r4,4(sp)
   2cb74:	882e927a 	slli	r23,r17,9
   2cb78:	9022d5fa 	srli	r17,r18,23
   2cb7c:	e038d5fa 	srli	fp,fp,23
   2cb80:	1104b03a 	or	r2,r2,r4
   2cb84:	9024927a 	slli	r18,r18,9
   2cb88:	1004c03a 	cmpne	r2,r2,zero
   2cb8c:	bc62b03a 	or	r17,r23,r17
   2cb90:	1738b03a 	or	fp,r2,fp
   2cb94:	8880402c 	andhi	r2,r17,256
   2cb98:	e4a4b03a 	or	r18,fp,r18
   2cb9c:	10000726 	beq	r2,zero,2cbbc <__muldf3+0x628>
   2cba0:	9006d07a 	srli	r3,r18,1
   2cba4:	880497fa 	slli	r2,r17,31
   2cba8:	9480004c 	andi	r18,r18,1
   2cbac:	8822d07a 	srli	r17,r17,1
   2cbb0:	1ca4b03a 	or	r18,r3,r18
   2cbb4:	14a4b03a 	or	r18,r2,r18
   2cbb8:	4007883a 	mov	r3,r8
   2cbbc:	1880ffc4 	addi	r2,r3,1023
   2cbc0:	0080460e 	bge	zero,r2,2ccdc <__muldf3+0x748>
   2cbc4:	910001cc 	andi	r4,r18,7
   2cbc8:	20000726 	beq	r4,zero,2cbe8 <__muldf3+0x654>
   2cbcc:	910003cc 	andi	r4,r18,15
   2cbd0:	01400104 	movi	r5,4
   2cbd4:	21400426 	beq	r4,r5,2cbe8 <__muldf3+0x654>
   2cbd8:	9149883a 	add	r4,r18,r5
   2cbdc:	24a5803a 	cmpltu	r18,r4,r18
   2cbe0:	8ca3883a 	add	r17,r17,r18
   2cbe4:	2025883a 	mov	r18,r4
   2cbe8:	8900402c 	andhi	r4,r17,256
   2cbec:	20000426 	beq	r4,zero,2cc00 <__muldf3+0x66c>
   2cbf0:	18810004 	addi	r2,r3,1024
   2cbf4:	00ffc034 	movhi	r3,65280
   2cbf8:	18ffffc4 	addi	r3,r3,-1
   2cbfc:	88e2703a 	and	r17,r17,r3
   2cc00:	00c1ff84 	movi	r3,2046
   2cc04:	18bf1316 	blt	r3,r2,2c854 <__alt_data_end+0xfffec854>
   2cc08:	882c977a 	slli	r22,r17,29
   2cc0c:	9024d0fa 	srli	r18,r18,3
   2cc10:	8822927a 	slli	r17,r17,9
   2cc14:	1081ffcc 	andi	r2,r2,2047
   2cc18:	b4acb03a 	or	r22,r22,r18
   2cc1c:	8820d33a 	srli	r16,r17,12
   2cc20:	3027883a 	mov	r19,r6
   2cc24:	003eba06 	br	2c710 <__alt_data_end+0xfffec710>
   2cc28:	8080022c 	andhi	r2,r16,8
   2cc2c:	10000926 	beq	r2,zero,2cc54 <__muldf3+0x6c0>
   2cc30:	8880022c 	andhi	r2,r17,8
   2cc34:	1000071e 	bne	r2,zero,2cc54 <__muldf3+0x6c0>
   2cc38:	00800434 	movhi	r2,16
   2cc3c:	8c000234 	orhi	r16,r17,8
   2cc40:	10bfffc4 	addi	r2,r2,-1
   2cc44:	e027883a 	mov	r19,fp
   2cc48:	80a0703a 	and	r16,r16,r2
   2cc4c:	902d883a 	mov	r22,r18
   2cc50:	003f1706 	br	2c8b0 <__alt_data_end+0xfffec8b0>
   2cc54:	00800434 	movhi	r2,16
   2cc58:	84000234 	orhi	r16,r16,8
   2cc5c:	10bfffc4 	addi	r2,r2,-1
   2cc60:	80a0703a 	and	r16,r16,r2
   2cc64:	003f1206 	br	2c8b0 <__alt_data_end+0xfffec8b0>
   2cc68:	147ff604 	addi	r17,r2,-40
   2cc6c:	3462983a 	sll	r17,r6,r17
   2cc70:	0025883a 	mov	r18,zero
   2cc74:	003ef306 	br	2c844 <__alt_data_end+0xfffec844>
   2cc78:	3009883a 	mov	r4,r6
   2cc7c:	d9400215 	stw	r5,8(sp)
   2cc80:	d9800715 	stw	r6,28(sp)
   2cc84:	da400415 	stw	r9,16(sp)
   2cc88:	da800315 	stw	r10,12(sp)
   2cc8c:	002d9000 	call	2d900 <__clzsi2>
   2cc90:	10800804 	addi	r2,r2,32
   2cc94:	da800317 	ldw	r10,12(sp)
   2cc98:	da400417 	ldw	r9,16(sp)
   2cc9c:	d9800717 	ldw	r6,28(sp)
   2cca0:	d9400217 	ldw	r5,8(sp)
   2cca4:	003edd06 	br	2c81c <__alt_data_end+0xfffec81c>
   2cca8:	143ff604 	addi	r16,r2,-40
   2ccac:	ac20983a 	sll	r16,r21,r16
   2ccb0:	002d883a 	mov	r22,zero
   2ccb4:	003ec106 	br	2c7bc <__alt_data_end+0xfffec7bc>
   2ccb8:	d9800715 	stw	r6,28(sp)
   2ccbc:	d9c00215 	stw	r7,8(sp)
   2ccc0:	da400415 	stw	r9,16(sp)
   2ccc4:	002d9000 	call	2d900 <__clzsi2>
   2ccc8:	10800804 	addi	r2,r2,32
   2cccc:	da400417 	ldw	r9,16(sp)
   2ccd0:	d9c00217 	ldw	r7,8(sp)
   2ccd4:	d9800717 	ldw	r6,28(sp)
   2ccd8:	003eae06 	br	2c794 <__alt_data_end+0xfffec794>
   2ccdc:	00c00044 	movi	r3,1
   2cce0:	1887c83a 	sub	r3,r3,r2
   2cce4:	01000e04 	movi	r4,56
   2cce8:	20fe8516 	blt	r4,r3,2c700 <__alt_data_end+0xfffec700>
   2ccec:	010007c4 	movi	r4,31
   2ccf0:	20c01b16 	blt	r4,r3,2cd60 <__muldf3+0x7cc>
   2ccf4:	00800804 	movi	r2,32
   2ccf8:	10c5c83a 	sub	r2,r2,r3
   2ccfc:	888a983a 	sll	r5,r17,r2
   2cd00:	90c8d83a 	srl	r4,r18,r3
   2cd04:	9084983a 	sll	r2,r18,r2
   2cd08:	88e2d83a 	srl	r17,r17,r3
   2cd0c:	2906b03a 	or	r3,r5,r4
   2cd10:	1004c03a 	cmpne	r2,r2,zero
   2cd14:	1886b03a 	or	r3,r3,r2
   2cd18:	188001cc 	andi	r2,r3,7
   2cd1c:	10000726 	beq	r2,zero,2cd3c <__muldf3+0x7a8>
   2cd20:	188003cc 	andi	r2,r3,15
   2cd24:	01000104 	movi	r4,4
   2cd28:	11000426 	beq	r2,r4,2cd3c <__muldf3+0x7a8>
   2cd2c:	1805883a 	mov	r2,r3
   2cd30:	10c00104 	addi	r3,r2,4
   2cd34:	1885803a 	cmpltu	r2,r3,r2
   2cd38:	88a3883a 	add	r17,r17,r2
   2cd3c:	8880202c 	andhi	r2,r17,128
   2cd40:	10001c26 	beq	r2,zero,2cdb4 <__muldf3+0x820>
   2cd44:	3027883a 	mov	r19,r6
   2cd48:	00800044 	movi	r2,1
   2cd4c:	0021883a 	mov	r16,zero
   2cd50:	002d883a 	mov	r22,zero
   2cd54:	003e6e06 	br	2c710 <__alt_data_end+0xfffec710>
   2cd58:	4007883a 	mov	r3,r8
   2cd5c:	003f9706 	br	2cbbc <__alt_data_end+0xfffecbbc>
   2cd60:	017ff844 	movi	r5,-31
   2cd64:	2885c83a 	sub	r2,r5,r2
   2cd68:	888ad83a 	srl	r5,r17,r2
   2cd6c:	00800804 	movi	r2,32
   2cd70:	18801a26 	beq	r3,r2,2cddc <__muldf3+0x848>
   2cd74:	01001004 	movi	r4,64
   2cd78:	20c7c83a 	sub	r3,r4,r3
   2cd7c:	88e2983a 	sll	r17,r17,r3
   2cd80:	8ca4b03a 	or	r18,r17,r18
   2cd84:	9004c03a 	cmpne	r2,r18,zero
   2cd88:	2884b03a 	or	r2,r5,r2
   2cd8c:	144001cc 	andi	r17,r2,7
   2cd90:	88000d1e 	bne	r17,zero,2cdc8 <__muldf3+0x834>
   2cd94:	0021883a 	mov	r16,zero
   2cd98:	102cd0fa 	srli	r22,r2,3
   2cd9c:	3027883a 	mov	r19,r6
   2cda0:	0005883a 	mov	r2,zero
   2cda4:	b46cb03a 	or	r22,r22,r17
   2cda8:	003e5906 	br	2c710 <__alt_data_end+0xfffec710>
   2cdac:	1007883a 	mov	r3,r2
   2cdb0:	0023883a 	mov	r17,zero
   2cdb4:	8820927a 	slli	r16,r17,9
   2cdb8:	1805883a 	mov	r2,r3
   2cdbc:	8822977a 	slli	r17,r17,29
   2cdc0:	8020d33a 	srli	r16,r16,12
   2cdc4:	003ff406 	br	2cd98 <__alt_data_end+0xfffecd98>
   2cdc8:	10c003cc 	andi	r3,r2,15
   2cdcc:	01000104 	movi	r4,4
   2cdd0:	193ff626 	beq	r3,r4,2cdac <__alt_data_end+0xfffecdac>
   2cdd4:	0023883a 	mov	r17,zero
   2cdd8:	003fd506 	br	2cd30 <__alt_data_end+0xfffecd30>
   2cddc:	0023883a 	mov	r17,zero
   2cde0:	003fe706 	br	2cd80 <__alt_data_end+0xfffecd80>
   2cde4:	00800434 	movhi	r2,16
   2cde8:	8c000234 	orhi	r16,r17,8
   2cdec:	10bfffc4 	addi	r2,r2,-1
   2cdf0:	3027883a 	mov	r19,r6
   2cdf4:	80a0703a 	and	r16,r16,r2
   2cdf8:	902d883a 	mov	r22,r18
   2cdfc:	003eac06 	br	2c8b0 <__alt_data_end+0xfffec8b0>

0002ce00 <__subdf3>:
   2ce00:	02000434 	movhi	r8,16
   2ce04:	423fffc4 	addi	r8,r8,-1
   2ce08:	defffb04 	addi	sp,sp,-20
   2ce0c:	2a14703a 	and	r10,r5,r8
   2ce10:	3812d53a 	srli	r9,r7,20
   2ce14:	3a10703a 	and	r8,r7,r8
   2ce18:	2006d77a 	srli	r3,r4,29
   2ce1c:	3004d77a 	srli	r2,r6,29
   2ce20:	dc000015 	stw	r16,0(sp)
   2ce24:	501490fa 	slli	r10,r10,3
   2ce28:	2820d53a 	srli	r16,r5,20
   2ce2c:	401090fa 	slli	r8,r8,3
   2ce30:	dc800215 	stw	r18,8(sp)
   2ce34:	dc400115 	stw	r17,4(sp)
   2ce38:	dfc00415 	stw	ra,16(sp)
   2ce3c:	202290fa 	slli	r17,r4,3
   2ce40:	dcc00315 	stw	r19,12(sp)
   2ce44:	4a41ffcc 	andi	r9,r9,2047
   2ce48:	0101ffc4 	movi	r4,2047
   2ce4c:	2824d7fa 	srli	r18,r5,31
   2ce50:	8401ffcc 	andi	r16,r16,2047
   2ce54:	50c6b03a 	or	r3,r10,r3
   2ce58:	380ed7fa 	srli	r7,r7,31
   2ce5c:	408ab03a 	or	r5,r8,r2
   2ce60:	300c90fa 	slli	r6,r6,3
   2ce64:	49009626 	beq	r9,r4,2d0c0 <__subdf3+0x2c0>
   2ce68:	39c0005c 	xori	r7,r7,1
   2ce6c:	8245c83a 	sub	r2,r16,r9
   2ce70:	3c807426 	beq	r7,r18,2d044 <__subdf3+0x244>
   2ce74:	0080af0e 	bge	zero,r2,2d134 <__subdf3+0x334>
   2ce78:	48002a1e 	bne	r9,zero,2cf24 <__subdf3+0x124>
   2ce7c:	2988b03a 	or	r4,r5,r6
   2ce80:	20009a1e 	bne	r4,zero,2d0ec <__subdf3+0x2ec>
   2ce84:	888001cc 	andi	r2,r17,7
   2ce88:	10000726 	beq	r2,zero,2cea8 <__subdf3+0xa8>
   2ce8c:	888003cc 	andi	r2,r17,15
   2ce90:	01000104 	movi	r4,4
   2ce94:	11000426 	beq	r2,r4,2cea8 <__subdf3+0xa8>
   2ce98:	890b883a 	add	r5,r17,r4
   2ce9c:	2c63803a 	cmpltu	r17,r5,r17
   2cea0:	1c47883a 	add	r3,r3,r17
   2cea4:	2823883a 	mov	r17,r5
   2cea8:	1880202c 	andhi	r2,r3,128
   2ceac:	10005926 	beq	r2,zero,2d014 <__subdf3+0x214>
   2ceb0:	84000044 	addi	r16,r16,1
   2ceb4:	0081ffc4 	movi	r2,2047
   2ceb8:	8080be26 	beq	r16,r2,2d1b4 <__subdf3+0x3b4>
   2cebc:	017fe034 	movhi	r5,65408
   2cec0:	297fffc4 	addi	r5,r5,-1
   2cec4:	1946703a 	and	r3,r3,r5
   2cec8:	1804977a 	slli	r2,r3,29
   2cecc:	1806927a 	slli	r3,r3,9
   2ced0:	8822d0fa 	srli	r17,r17,3
   2ced4:	8401ffcc 	andi	r16,r16,2047
   2ced8:	180ad33a 	srli	r5,r3,12
   2cedc:	9100004c 	andi	r4,r18,1
   2cee0:	1444b03a 	or	r2,r2,r17
   2cee4:	80c1ffcc 	andi	r3,r16,2047
   2cee8:	1820953a 	slli	r16,r3,20
   2ceec:	20c03fcc 	andi	r3,r4,255
   2cef0:	180897fa 	slli	r4,r3,31
   2cef4:	00c00434 	movhi	r3,16
   2cef8:	18ffffc4 	addi	r3,r3,-1
   2cefc:	28c6703a 	and	r3,r5,r3
   2cf00:	1c06b03a 	or	r3,r3,r16
   2cf04:	1906b03a 	or	r3,r3,r4
   2cf08:	dfc00417 	ldw	ra,16(sp)
   2cf0c:	dcc00317 	ldw	r19,12(sp)
   2cf10:	dc800217 	ldw	r18,8(sp)
   2cf14:	dc400117 	ldw	r17,4(sp)
   2cf18:	dc000017 	ldw	r16,0(sp)
   2cf1c:	dec00504 	addi	sp,sp,20
   2cf20:	f800283a 	ret
   2cf24:	0101ffc4 	movi	r4,2047
   2cf28:	813fd626 	beq	r16,r4,2ce84 <__alt_data_end+0xfffece84>
   2cf2c:	29402034 	orhi	r5,r5,128
   2cf30:	01000e04 	movi	r4,56
   2cf34:	2080a316 	blt	r4,r2,2d1c4 <__subdf3+0x3c4>
   2cf38:	010007c4 	movi	r4,31
   2cf3c:	2080c616 	blt	r4,r2,2d258 <__subdf3+0x458>
   2cf40:	01000804 	movi	r4,32
   2cf44:	2089c83a 	sub	r4,r4,r2
   2cf48:	2910983a 	sll	r8,r5,r4
   2cf4c:	308ed83a 	srl	r7,r6,r2
   2cf50:	3108983a 	sll	r4,r6,r4
   2cf54:	2884d83a 	srl	r2,r5,r2
   2cf58:	41ccb03a 	or	r6,r8,r7
   2cf5c:	2008c03a 	cmpne	r4,r4,zero
   2cf60:	310cb03a 	or	r6,r6,r4
   2cf64:	898dc83a 	sub	r6,r17,r6
   2cf68:	89a3803a 	cmpltu	r17,r17,r6
   2cf6c:	1887c83a 	sub	r3,r3,r2
   2cf70:	1c47c83a 	sub	r3,r3,r17
   2cf74:	3023883a 	mov	r17,r6
   2cf78:	1880202c 	andhi	r2,r3,128
   2cf7c:	10002326 	beq	r2,zero,2d00c <__subdf3+0x20c>
   2cf80:	04c02034 	movhi	r19,128
   2cf84:	9cffffc4 	addi	r19,r19,-1
   2cf88:	1ce6703a 	and	r19,r3,r19
   2cf8c:	98007a26 	beq	r19,zero,2d178 <__subdf3+0x378>
   2cf90:	9809883a 	mov	r4,r19
   2cf94:	002d9000 	call	2d900 <__clzsi2>
   2cf98:	113ffe04 	addi	r4,r2,-8
   2cf9c:	00c007c4 	movi	r3,31
   2cfa0:	19007b16 	blt	r3,r4,2d190 <__subdf3+0x390>
   2cfa4:	00800804 	movi	r2,32
   2cfa8:	1105c83a 	sub	r2,r2,r4
   2cfac:	8884d83a 	srl	r2,r17,r2
   2cfb0:	9906983a 	sll	r3,r19,r4
   2cfb4:	8922983a 	sll	r17,r17,r4
   2cfb8:	10c4b03a 	or	r2,r2,r3
   2cfbc:	24007816 	blt	r4,r16,2d1a0 <__subdf3+0x3a0>
   2cfc0:	2421c83a 	sub	r16,r4,r16
   2cfc4:	80c00044 	addi	r3,r16,1
   2cfc8:	010007c4 	movi	r4,31
   2cfcc:	20c09516 	blt	r4,r3,2d224 <__subdf3+0x424>
   2cfd0:	01400804 	movi	r5,32
   2cfd4:	28cbc83a 	sub	r5,r5,r3
   2cfd8:	88c8d83a 	srl	r4,r17,r3
   2cfdc:	8962983a 	sll	r17,r17,r5
   2cfe0:	114a983a 	sll	r5,r2,r5
   2cfe4:	10c6d83a 	srl	r3,r2,r3
   2cfe8:	8804c03a 	cmpne	r2,r17,zero
   2cfec:	290ab03a 	or	r5,r5,r4
   2cff0:	28a2b03a 	or	r17,r5,r2
   2cff4:	0021883a 	mov	r16,zero
   2cff8:	003fa206 	br	2ce84 <__alt_data_end+0xfffece84>
   2cffc:	2090b03a 	or	r8,r4,r2
   2d000:	40018e26 	beq	r8,zero,2d63c <__subdf3+0x83c>
   2d004:	1007883a 	mov	r3,r2
   2d008:	2023883a 	mov	r17,r4
   2d00c:	888001cc 	andi	r2,r17,7
   2d010:	103f9e1e 	bne	r2,zero,2ce8c <__alt_data_end+0xfffece8c>
   2d014:	1804977a 	slli	r2,r3,29
   2d018:	8822d0fa 	srli	r17,r17,3
   2d01c:	1810d0fa 	srli	r8,r3,3
   2d020:	9100004c 	andi	r4,r18,1
   2d024:	1444b03a 	or	r2,r2,r17
   2d028:	00c1ffc4 	movi	r3,2047
   2d02c:	80c02826 	beq	r16,r3,2d0d0 <__subdf3+0x2d0>
   2d030:	01400434 	movhi	r5,16
   2d034:	297fffc4 	addi	r5,r5,-1
   2d038:	80e0703a 	and	r16,r16,r3
   2d03c:	414a703a 	and	r5,r8,r5
   2d040:	003fa806 	br	2cee4 <__alt_data_end+0xfffecee4>
   2d044:	0080630e 	bge	zero,r2,2d1d4 <__subdf3+0x3d4>
   2d048:	48003026 	beq	r9,zero,2d10c <__subdf3+0x30c>
   2d04c:	0101ffc4 	movi	r4,2047
   2d050:	813f8c26 	beq	r16,r4,2ce84 <__alt_data_end+0xfffece84>
   2d054:	29402034 	orhi	r5,r5,128
   2d058:	01000e04 	movi	r4,56
   2d05c:	2080a90e 	bge	r4,r2,2d304 <__subdf3+0x504>
   2d060:	298cb03a 	or	r6,r5,r6
   2d064:	3012c03a 	cmpne	r9,r6,zero
   2d068:	0005883a 	mov	r2,zero
   2d06c:	4c53883a 	add	r9,r9,r17
   2d070:	4c63803a 	cmpltu	r17,r9,r17
   2d074:	10c7883a 	add	r3,r2,r3
   2d078:	88c7883a 	add	r3,r17,r3
   2d07c:	4823883a 	mov	r17,r9
   2d080:	1880202c 	andhi	r2,r3,128
   2d084:	1000d026 	beq	r2,zero,2d3c8 <__subdf3+0x5c8>
   2d088:	84000044 	addi	r16,r16,1
   2d08c:	0081ffc4 	movi	r2,2047
   2d090:	8080fe26 	beq	r16,r2,2d48c <__subdf3+0x68c>
   2d094:	00bfe034 	movhi	r2,65408
   2d098:	10bfffc4 	addi	r2,r2,-1
   2d09c:	1886703a 	and	r3,r3,r2
   2d0a0:	880ad07a 	srli	r5,r17,1
   2d0a4:	180497fa 	slli	r2,r3,31
   2d0a8:	8900004c 	andi	r4,r17,1
   2d0ac:	2922b03a 	or	r17,r5,r4
   2d0b0:	1806d07a 	srli	r3,r3,1
   2d0b4:	1462b03a 	or	r17,r2,r17
   2d0b8:	3825883a 	mov	r18,r7
   2d0bc:	003f7106 	br	2ce84 <__alt_data_end+0xfffece84>
   2d0c0:	2984b03a 	or	r2,r5,r6
   2d0c4:	103f6826 	beq	r2,zero,2ce68 <__alt_data_end+0xfffece68>
   2d0c8:	39c03fcc 	andi	r7,r7,255
   2d0cc:	003f6706 	br	2ce6c <__alt_data_end+0xfffece6c>
   2d0d0:	4086b03a 	or	r3,r8,r2
   2d0d4:	18015226 	beq	r3,zero,2d620 <__subdf3+0x820>
   2d0d8:	00c00434 	movhi	r3,16
   2d0dc:	41400234 	orhi	r5,r8,8
   2d0e0:	18ffffc4 	addi	r3,r3,-1
   2d0e4:	28ca703a 	and	r5,r5,r3
   2d0e8:	003f7e06 	br	2cee4 <__alt_data_end+0xfffecee4>
   2d0ec:	10bfffc4 	addi	r2,r2,-1
   2d0f0:	1000491e 	bne	r2,zero,2d218 <__subdf3+0x418>
   2d0f4:	898fc83a 	sub	r7,r17,r6
   2d0f8:	89e3803a 	cmpltu	r17,r17,r7
   2d0fc:	1947c83a 	sub	r3,r3,r5
   2d100:	1c47c83a 	sub	r3,r3,r17
   2d104:	3823883a 	mov	r17,r7
   2d108:	003f9b06 	br	2cf78 <__alt_data_end+0xfffecf78>
   2d10c:	2988b03a 	or	r4,r5,r6
   2d110:	203f5c26 	beq	r4,zero,2ce84 <__alt_data_end+0xfffece84>
   2d114:	10bfffc4 	addi	r2,r2,-1
   2d118:	1000931e 	bne	r2,zero,2d368 <__subdf3+0x568>
   2d11c:	898d883a 	add	r6,r17,r6
   2d120:	3463803a 	cmpltu	r17,r6,r17
   2d124:	1947883a 	add	r3,r3,r5
   2d128:	88c7883a 	add	r3,r17,r3
   2d12c:	3023883a 	mov	r17,r6
   2d130:	003fd306 	br	2d080 <__alt_data_end+0xfffed080>
   2d134:	1000541e 	bne	r2,zero,2d288 <__subdf3+0x488>
   2d138:	80800044 	addi	r2,r16,1
   2d13c:	1081ffcc 	andi	r2,r2,2047
   2d140:	01000044 	movi	r4,1
   2d144:	2080a20e 	bge	r4,r2,2d3d0 <__subdf3+0x5d0>
   2d148:	8989c83a 	sub	r4,r17,r6
   2d14c:	8905803a 	cmpltu	r2,r17,r4
   2d150:	1967c83a 	sub	r19,r3,r5
   2d154:	98a7c83a 	sub	r19,r19,r2
   2d158:	9880202c 	andhi	r2,r19,128
   2d15c:	10006326 	beq	r2,zero,2d2ec <__subdf3+0x4ec>
   2d160:	3463c83a 	sub	r17,r6,r17
   2d164:	28c7c83a 	sub	r3,r5,r3
   2d168:	344d803a 	cmpltu	r6,r6,r17
   2d16c:	19a7c83a 	sub	r19,r3,r6
   2d170:	3825883a 	mov	r18,r7
   2d174:	983f861e 	bne	r19,zero,2cf90 <__alt_data_end+0xfffecf90>
   2d178:	8809883a 	mov	r4,r17
   2d17c:	002d9000 	call	2d900 <__clzsi2>
   2d180:	10800804 	addi	r2,r2,32
   2d184:	113ffe04 	addi	r4,r2,-8
   2d188:	00c007c4 	movi	r3,31
   2d18c:	193f850e 	bge	r3,r4,2cfa4 <__alt_data_end+0xfffecfa4>
   2d190:	10bff604 	addi	r2,r2,-40
   2d194:	8884983a 	sll	r2,r17,r2
   2d198:	0023883a 	mov	r17,zero
   2d19c:	243f880e 	bge	r4,r16,2cfc0 <__alt_data_end+0xfffecfc0>
   2d1a0:	00ffe034 	movhi	r3,65408
   2d1a4:	18ffffc4 	addi	r3,r3,-1
   2d1a8:	8121c83a 	sub	r16,r16,r4
   2d1ac:	10c6703a 	and	r3,r2,r3
   2d1b0:	003f3406 	br	2ce84 <__alt_data_end+0xfffece84>
   2d1b4:	9100004c 	andi	r4,r18,1
   2d1b8:	000b883a 	mov	r5,zero
   2d1bc:	0005883a 	mov	r2,zero
   2d1c0:	003f4806 	br	2cee4 <__alt_data_end+0xfffecee4>
   2d1c4:	298cb03a 	or	r6,r5,r6
   2d1c8:	300cc03a 	cmpne	r6,r6,zero
   2d1cc:	0005883a 	mov	r2,zero
   2d1d0:	003f6406 	br	2cf64 <__alt_data_end+0xfffecf64>
   2d1d4:	10009a1e 	bne	r2,zero,2d440 <__subdf3+0x640>
   2d1d8:	82400044 	addi	r9,r16,1
   2d1dc:	4881ffcc 	andi	r2,r9,2047
   2d1e0:	02800044 	movi	r10,1
   2d1e4:	5080670e 	bge	r10,r2,2d384 <__subdf3+0x584>
   2d1e8:	0081ffc4 	movi	r2,2047
   2d1ec:	4880af26 	beq	r9,r2,2d4ac <__subdf3+0x6ac>
   2d1f0:	898d883a 	add	r6,r17,r6
   2d1f4:	1945883a 	add	r2,r3,r5
   2d1f8:	3447803a 	cmpltu	r3,r6,r17
   2d1fc:	1887883a 	add	r3,r3,r2
   2d200:	182297fa 	slli	r17,r3,31
   2d204:	300cd07a 	srli	r6,r6,1
   2d208:	1806d07a 	srli	r3,r3,1
   2d20c:	4821883a 	mov	r16,r9
   2d210:	89a2b03a 	or	r17,r17,r6
   2d214:	003f1b06 	br	2ce84 <__alt_data_end+0xfffece84>
   2d218:	0101ffc4 	movi	r4,2047
   2d21c:	813f441e 	bne	r16,r4,2cf30 <__alt_data_end+0xfffecf30>
   2d220:	003f1806 	br	2ce84 <__alt_data_end+0xfffece84>
   2d224:	843ff844 	addi	r16,r16,-31
   2d228:	01400804 	movi	r5,32
   2d22c:	1408d83a 	srl	r4,r2,r16
   2d230:	19405026 	beq	r3,r5,2d374 <__subdf3+0x574>
   2d234:	01401004 	movi	r5,64
   2d238:	28c7c83a 	sub	r3,r5,r3
   2d23c:	10c4983a 	sll	r2,r2,r3
   2d240:	88a2b03a 	or	r17,r17,r2
   2d244:	8822c03a 	cmpne	r17,r17,zero
   2d248:	2462b03a 	or	r17,r4,r17
   2d24c:	0007883a 	mov	r3,zero
   2d250:	0021883a 	mov	r16,zero
   2d254:	003f6d06 	br	2d00c <__alt_data_end+0xfffed00c>
   2d258:	11fff804 	addi	r7,r2,-32
   2d25c:	01000804 	movi	r4,32
   2d260:	29ced83a 	srl	r7,r5,r7
   2d264:	11004526 	beq	r2,r4,2d37c <__subdf3+0x57c>
   2d268:	01001004 	movi	r4,64
   2d26c:	2089c83a 	sub	r4,r4,r2
   2d270:	2904983a 	sll	r2,r5,r4
   2d274:	118cb03a 	or	r6,r2,r6
   2d278:	300cc03a 	cmpne	r6,r6,zero
   2d27c:	398cb03a 	or	r6,r7,r6
   2d280:	0005883a 	mov	r2,zero
   2d284:	003f3706 	br	2cf64 <__alt_data_end+0xfffecf64>
   2d288:	80002a26 	beq	r16,zero,2d334 <__subdf3+0x534>
   2d28c:	0101ffc4 	movi	r4,2047
   2d290:	49006626 	beq	r9,r4,2d42c <__subdf3+0x62c>
   2d294:	0085c83a 	sub	r2,zero,r2
   2d298:	18c02034 	orhi	r3,r3,128
   2d29c:	01000e04 	movi	r4,56
   2d2a0:	20807e16 	blt	r4,r2,2d49c <__subdf3+0x69c>
   2d2a4:	010007c4 	movi	r4,31
   2d2a8:	2080e716 	blt	r4,r2,2d648 <__subdf3+0x848>
   2d2ac:	01000804 	movi	r4,32
   2d2b0:	2089c83a 	sub	r4,r4,r2
   2d2b4:	1914983a 	sll	r10,r3,r4
   2d2b8:	8890d83a 	srl	r8,r17,r2
   2d2bc:	8908983a 	sll	r4,r17,r4
   2d2c0:	1884d83a 	srl	r2,r3,r2
   2d2c4:	5222b03a 	or	r17,r10,r8
   2d2c8:	2006c03a 	cmpne	r3,r4,zero
   2d2cc:	88e2b03a 	or	r17,r17,r3
   2d2d0:	3463c83a 	sub	r17,r6,r17
   2d2d4:	2885c83a 	sub	r2,r5,r2
   2d2d8:	344d803a 	cmpltu	r6,r6,r17
   2d2dc:	1187c83a 	sub	r3,r2,r6
   2d2e0:	4821883a 	mov	r16,r9
   2d2e4:	3825883a 	mov	r18,r7
   2d2e8:	003f2306 	br	2cf78 <__alt_data_end+0xfffecf78>
   2d2ec:	24d0b03a 	or	r8,r4,r19
   2d2f0:	40001b1e 	bne	r8,zero,2d360 <__subdf3+0x560>
   2d2f4:	0005883a 	mov	r2,zero
   2d2f8:	0009883a 	mov	r4,zero
   2d2fc:	0021883a 	mov	r16,zero
   2d300:	003f4906 	br	2d028 <__alt_data_end+0xfffed028>
   2d304:	010007c4 	movi	r4,31
   2d308:	20803a16 	blt	r4,r2,2d3f4 <__subdf3+0x5f4>
   2d30c:	01000804 	movi	r4,32
   2d310:	2089c83a 	sub	r4,r4,r2
   2d314:	2912983a 	sll	r9,r5,r4
   2d318:	3090d83a 	srl	r8,r6,r2
   2d31c:	3108983a 	sll	r4,r6,r4
   2d320:	2884d83a 	srl	r2,r5,r2
   2d324:	4a12b03a 	or	r9,r9,r8
   2d328:	2008c03a 	cmpne	r4,r4,zero
   2d32c:	4912b03a 	or	r9,r9,r4
   2d330:	003f4e06 	br	2d06c <__alt_data_end+0xfffed06c>
   2d334:	1c48b03a 	or	r4,r3,r17
   2d338:	20003c26 	beq	r4,zero,2d42c <__subdf3+0x62c>
   2d33c:	0084303a 	nor	r2,zero,r2
   2d340:	1000381e 	bne	r2,zero,2d424 <__subdf3+0x624>
   2d344:	3463c83a 	sub	r17,r6,r17
   2d348:	28c5c83a 	sub	r2,r5,r3
   2d34c:	344d803a 	cmpltu	r6,r6,r17
   2d350:	1187c83a 	sub	r3,r2,r6
   2d354:	4821883a 	mov	r16,r9
   2d358:	3825883a 	mov	r18,r7
   2d35c:	003f0606 	br	2cf78 <__alt_data_end+0xfffecf78>
   2d360:	2023883a 	mov	r17,r4
   2d364:	003f0906 	br	2cf8c <__alt_data_end+0xfffecf8c>
   2d368:	0101ffc4 	movi	r4,2047
   2d36c:	813f3a1e 	bne	r16,r4,2d058 <__alt_data_end+0xfffed058>
   2d370:	003ec406 	br	2ce84 <__alt_data_end+0xfffece84>
   2d374:	0005883a 	mov	r2,zero
   2d378:	003fb106 	br	2d240 <__alt_data_end+0xfffed240>
   2d37c:	0005883a 	mov	r2,zero
   2d380:	003fbc06 	br	2d274 <__alt_data_end+0xfffed274>
   2d384:	1c44b03a 	or	r2,r3,r17
   2d388:	80008e1e 	bne	r16,zero,2d5c4 <__subdf3+0x7c4>
   2d38c:	1000c826 	beq	r2,zero,2d6b0 <__subdf3+0x8b0>
   2d390:	2984b03a 	or	r2,r5,r6
   2d394:	103ebb26 	beq	r2,zero,2ce84 <__alt_data_end+0xfffece84>
   2d398:	8989883a 	add	r4,r17,r6
   2d39c:	1945883a 	add	r2,r3,r5
   2d3a0:	2447803a 	cmpltu	r3,r4,r17
   2d3a4:	1887883a 	add	r3,r3,r2
   2d3a8:	1880202c 	andhi	r2,r3,128
   2d3ac:	2023883a 	mov	r17,r4
   2d3b0:	103f1626 	beq	r2,zero,2d00c <__alt_data_end+0xfffed00c>
   2d3b4:	00bfe034 	movhi	r2,65408
   2d3b8:	10bfffc4 	addi	r2,r2,-1
   2d3bc:	5021883a 	mov	r16,r10
   2d3c0:	1886703a 	and	r3,r3,r2
   2d3c4:	003eaf06 	br	2ce84 <__alt_data_end+0xfffece84>
   2d3c8:	3825883a 	mov	r18,r7
   2d3cc:	003f0f06 	br	2d00c <__alt_data_end+0xfffed00c>
   2d3d0:	1c44b03a 	or	r2,r3,r17
   2d3d4:	8000251e 	bne	r16,zero,2d46c <__subdf3+0x66c>
   2d3d8:	1000661e 	bne	r2,zero,2d574 <__subdf3+0x774>
   2d3dc:	2990b03a 	or	r8,r5,r6
   2d3e0:	40009626 	beq	r8,zero,2d63c <__subdf3+0x83c>
   2d3e4:	2807883a 	mov	r3,r5
   2d3e8:	3023883a 	mov	r17,r6
   2d3ec:	3825883a 	mov	r18,r7
   2d3f0:	003ea406 	br	2ce84 <__alt_data_end+0xfffece84>
   2d3f4:	127ff804 	addi	r9,r2,-32
   2d3f8:	01000804 	movi	r4,32
   2d3fc:	2a52d83a 	srl	r9,r5,r9
   2d400:	11008c26 	beq	r2,r4,2d634 <__subdf3+0x834>
   2d404:	01001004 	movi	r4,64
   2d408:	2085c83a 	sub	r2,r4,r2
   2d40c:	2884983a 	sll	r2,r5,r2
   2d410:	118cb03a 	or	r6,r2,r6
   2d414:	300cc03a 	cmpne	r6,r6,zero
   2d418:	4992b03a 	or	r9,r9,r6
   2d41c:	0005883a 	mov	r2,zero
   2d420:	003f1206 	br	2d06c <__alt_data_end+0xfffed06c>
   2d424:	0101ffc4 	movi	r4,2047
   2d428:	493f9c1e 	bne	r9,r4,2d29c <__alt_data_end+0xfffed29c>
   2d42c:	2807883a 	mov	r3,r5
   2d430:	3023883a 	mov	r17,r6
   2d434:	4821883a 	mov	r16,r9
   2d438:	3825883a 	mov	r18,r7
   2d43c:	003e9106 	br	2ce84 <__alt_data_end+0xfffece84>
   2d440:	80001f1e 	bne	r16,zero,2d4c0 <__subdf3+0x6c0>
   2d444:	1c48b03a 	or	r4,r3,r17
   2d448:	20005a26 	beq	r4,zero,2d5b4 <__subdf3+0x7b4>
   2d44c:	0084303a 	nor	r2,zero,r2
   2d450:	1000561e 	bne	r2,zero,2d5ac <__subdf3+0x7ac>
   2d454:	89a3883a 	add	r17,r17,r6
   2d458:	1945883a 	add	r2,r3,r5
   2d45c:	898d803a 	cmpltu	r6,r17,r6
   2d460:	3087883a 	add	r3,r6,r2
   2d464:	4821883a 	mov	r16,r9
   2d468:	003f0506 	br	2d080 <__alt_data_end+0xfffed080>
   2d46c:	10002b1e 	bne	r2,zero,2d51c <__subdf3+0x71c>
   2d470:	2984b03a 	or	r2,r5,r6
   2d474:	10008026 	beq	r2,zero,2d678 <__subdf3+0x878>
   2d478:	2807883a 	mov	r3,r5
   2d47c:	3023883a 	mov	r17,r6
   2d480:	3825883a 	mov	r18,r7
   2d484:	0401ffc4 	movi	r16,2047
   2d488:	003e7e06 	br	2ce84 <__alt_data_end+0xfffece84>
   2d48c:	3809883a 	mov	r4,r7
   2d490:	0011883a 	mov	r8,zero
   2d494:	0005883a 	mov	r2,zero
   2d498:	003ee306 	br	2d028 <__alt_data_end+0xfffed028>
   2d49c:	1c62b03a 	or	r17,r3,r17
   2d4a0:	8822c03a 	cmpne	r17,r17,zero
   2d4a4:	0005883a 	mov	r2,zero
   2d4a8:	003f8906 	br	2d2d0 <__alt_data_end+0xfffed2d0>
   2d4ac:	3809883a 	mov	r4,r7
   2d4b0:	4821883a 	mov	r16,r9
   2d4b4:	0011883a 	mov	r8,zero
   2d4b8:	0005883a 	mov	r2,zero
   2d4bc:	003eda06 	br	2d028 <__alt_data_end+0xfffed028>
   2d4c0:	0101ffc4 	movi	r4,2047
   2d4c4:	49003b26 	beq	r9,r4,2d5b4 <__subdf3+0x7b4>
   2d4c8:	0085c83a 	sub	r2,zero,r2
   2d4cc:	18c02034 	orhi	r3,r3,128
   2d4d0:	01000e04 	movi	r4,56
   2d4d4:	20806e16 	blt	r4,r2,2d690 <__subdf3+0x890>
   2d4d8:	010007c4 	movi	r4,31
   2d4dc:	20807716 	blt	r4,r2,2d6bc <__subdf3+0x8bc>
   2d4e0:	01000804 	movi	r4,32
   2d4e4:	2089c83a 	sub	r4,r4,r2
   2d4e8:	1914983a 	sll	r10,r3,r4
   2d4ec:	8890d83a 	srl	r8,r17,r2
   2d4f0:	8908983a 	sll	r4,r17,r4
   2d4f4:	1884d83a 	srl	r2,r3,r2
   2d4f8:	5222b03a 	or	r17,r10,r8
   2d4fc:	2006c03a 	cmpne	r3,r4,zero
   2d500:	88e2b03a 	or	r17,r17,r3
   2d504:	89a3883a 	add	r17,r17,r6
   2d508:	1145883a 	add	r2,r2,r5
   2d50c:	898d803a 	cmpltu	r6,r17,r6
   2d510:	3087883a 	add	r3,r6,r2
   2d514:	4821883a 	mov	r16,r9
   2d518:	003ed906 	br	2d080 <__alt_data_end+0xfffed080>
   2d51c:	2984b03a 	or	r2,r5,r6
   2d520:	10004226 	beq	r2,zero,2d62c <__subdf3+0x82c>
   2d524:	1808d0fa 	srli	r4,r3,3
   2d528:	8822d0fa 	srli	r17,r17,3
   2d52c:	1806977a 	slli	r3,r3,29
   2d530:	2080022c 	andhi	r2,r4,8
   2d534:	1c62b03a 	or	r17,r3,r17
   2d538:	10000826 	beq	r2,zero,2d55c <__subdf3+0x75c>
   2d53c:	2812d0fa 	srli	r9,r5,3
   2d540:	4880022c 	andhi	r2,r9,8
   2d544:	1000051e 	bne	r2,zero,2d55c <__subdf3+0x75c>
   2d548:	300cd0fa 	srli	r6,r6,3
   2d54c:	2804977a 	slli	r2,r5,29
   2d550:	4809883a 	mov	r4,r9
   2d554:	3825883a 	mov	r18,r7
   2d558:	11a2b03a 	or	r17,r2,r6
   2d55c:	8806d77a 	srli	r3,r17,29
   2d560:	200890fa 	slli	r4,r4,3
   2d564:	882290fa 	slli	r17,r17,3
   2d568:	0401ffc4 	movi	r16,2047
   2d56c:	1906b03a 	or	r3,r3,r4
   2d570:	003e4406 	br	2ce84 <__alt_data_end+0xfffece84>
   2d574:	2984b03a 	or	r2,r5,r6
   2d578:	103e4226 	beq	r2,zero,2ce84 <__alt_data_end+0xfffece84>
   2d57c:	8989c83a 	sub	r4,r17,r6
   2d580:	8911803a 	cmpltu	r8,r17,r4
   2d584:	1945c83a 	sub	r2,r3,r5
   2d588:	1205c83a 	sub	r2,r2,r8
   2d58c:	1200202c 	andhi	r8,r2,128
   2d590:	403e9a26 	beq	r8,zero,2cffc <__alt_data_end+0xfffecffc>
   2d594:	3463c83a 	sub	r17,r6,r17
   2d598:	28c5c83a 	sub	r2,r5,r3
   2d59c:	344d803a 	cmpltu	r6,r6,r17
   2d5a0:	1187c83a 	sub	r3,r2,r6
   2d5a4:	3825883a 	mov	r18,r7
   2d5a8:	003e3606 	br	2ce84 <__alt_data_end+0xfffece84>
   2d5ac:	0101ffc4 	movi	r4,2047
   2d5b0:	493fc71e 	bne	r9,r4,2d4d0 <__alt_data_end+0xfffed4d0>
   2d5b4:	2807883a 	mov	r3,r5
   2d5b8:	3023883a 	mov	r17,r6
   2d5bc:	4821883a 	mov	r16,r9
   2d5c0:	003e3006 	br	2ce84 <__alt_data_end+0xfffece84>
   2d5c4:	10003626 	beq	r2,zero,2d6a0 <__subdf3+0x8a0>
   2d5c8:	2984b03a 	or	r2,r5,r6
   2d5cc:	10001726 	beq	r2,zero,2d62c <__subdf3+0x82c>
   2d5d0:	1808d0fa 	srli	r4,r3,3
   2d5d4:	8822d0fa 	srli	r17,r17,3
   2d5d8:	1806977a 	slli	r3,r3,29
   2d5dc:	2080022c 	andhi	r2,r4,8
   2d5e0:	1c62b03a 	or	r17,r3,r17
   2d5e4:	10000726 	beq	r2,zero,2d604 <__subdf3+0x804>
   2d5e8:	2812d0fa 	srli	r9,r5,3
   2d5ec:	4880022c 	andhi	r2,r9,8
   2d5f0:	1000041e 	bne	r2,zero,2d604 <__subdf3+0x804>
   2d5f4:	300cd0fa 	srli	r6,r6,3
   2d5f8:	2804977a 	slli	r2,r5,29
   2d5fc:	4809883a 	mov	r4,r9
   2d600:	11a2b03a 	or	r17,r2,r6
   2d604:	8806d77a 	srli	r3,r17,29
   2d608:	200890fa 	slli	r4,r4,3
   2d60c:	882290fa 	slli	r17,r17,3
   2d610:	3825883a 	mov	r18,r7
   2d614:	1906b03a 	or	r3,r3,r4
   2d618:	0401ffc4 	movi	r16,2047
   2d61c:	003e1906 	br	2ce84 <__alt_data_end+0xfffece84>
   2d620:	000b883a 	mov	r5,zero
   2d624:	0005883a 	mov	r2,zero
   2d628:	003e2e06 	br	2cee4 <__alt_data_end+0xfffecee4>
   2d62c:	0401ffc4 	movi	r16,2047
   2d630:	003e1406 	br	2ce84 <__alt_data_end+0xfffece84>
   2d634:	0005883a 	mov	r2,zero
   2d638:	003f7506 	br	2d410 <__alt_data_end+0xfffed410>
   2d63c:	0005883a 	mov	r2,zero
   2d640:	0009883a 	mov	r4,zero
   2d644:	003e7806 	br	2d028 <__alt_data_end+0xfffed028>
   2d648:	123ff804 	addi	r8,r2,-32
   2d64c:	01000804 	movi	r4,32
   2d650:	1a10d83a 	srl	r8,r3,r8
   2d654:	11002526 	beq	r2,r4,2d6ec <__subdf3+0x8ec>
   2d658:	01001004 	movi	r4,64
   2d65c:	2085c83a 	sub	r2,r4,r2
   2d660:	1884983a 	sll	r2,r3,r2
   2d664:	1444b03a 	or	r2,r2,r17
   2d668:	1004c03a 	cmpne	r2,r2,zero
   2d66c:	40a2b03a 	or	r17,r8,r2
   2d670:	0005883a 	mov	r2,zero
   2d674:	003f1606 	br	2d2d0 <__alt_data_end+0xfffed2d0>
   2d678:	02000434 	movhi	r8,16
   2d67c:	0009883a 	mov	r4,zero
   2d680:	423fffc4 	addi	r8,r8,-1
   2d684:	00bfffc4 	movi	r2,-1
   2d688:	0401ffc4 	movi	r16,2047
   2d68c:	003e6606 	br	2d028 <__alt_data_end+0xfffed028>
   2d690:	1c62b03a 	or	r17,r3,r17
   2d694:	8822c03a 	cmpne	r17,r17,zero
   2d698:	0005883a 	mov	r2,zero
   2d69c:	003f9906 	br	2d504 <__alt_data_end+0xfffed504>
   2d6a0:	2807883a 	mov	r3,r5
   2d6a4:	3023883a 	mov	r17,r6
   2d6a8:	0401ffc4 	movi	r16,2047
   2d6ac:	003df506 	br	2ce84 <__alt_data_end+0xfffece84>
   2d6b0:	2807883a 	mov	r3,r5
   2d6b4:	3023883a 	mov	r17,r6
   2d6b8:	003df206 	br	2ce84 <__alt_data_end+0xfffece84>
   2d6bc:	123ff804 	addi	r8,r2,-32
   2d6c0:	01000804 	movi	r4,32
   2d6c4:	1a10d83a 	srl	r8,r3,r8
   2d6c8:	11000a26 	beq	r2,r4,2d6f4 <__subdf3+0x8f4>
   2d6cc:	01001004 	movi	r4,64
   2d6d0:	2085c83a 	sub	r2,r4,r2
   2d6d4:	1884983a 	sll	r2,r3,r2
   2d6d8:	1444b03a 	or	r2,r2,r17
   2d6dc:	1004c03a 	cmpne	r2,r2,zero
   2d6e0:	40a2b03a 	or	r17,r8,r2
   2d6e4:	0005883a 	mov	r2,zero
   2d6e8:	003f8606 	br	2d504 <__alt_data_end+0xfffed504>
   2d6ec:	0005883a 	mov	r2,zero
   2d6f0:	003fdc06 	br	2d664 <__alt_data_end+0xfffed664>
   2d6f4:	0005883a 	mov	r2,zero
   2d6f8:	003ff706 	br	2d6d8 <__alt_data_end+0xfffed6d8>

0002d6fc <__fixdfsi>:
   2d6fc:	280cd53a 	srli	r6,r5,20
   2d700:	00c00434 	movhi	r3,16
   2d704:	18ffffc4 	addi	r3,r3,-1
   2d708:	3181ffcc 	andi	r6,r6,2047
   2d70c:	01c0ff84 	movi	r7,1022
   2d710:	28c6703a 	and	r3,r5,r3
   2d714:	280ad7fa 	srli	r5,r5,31
   2d718:	3980120e 	bge	r7,r6,2d764 <__fixdfsi+0x68>
   2d71c:	00810744 	movi	r2,1053
   2d720:	11800c16 	blt	r2,r6,2d754 <__fixdfsi+0x58>
   2d724:	00810cc4 	movi	r2,1075
   2d728:	1185c83a 	sub	r2,r2,r6
   2d72c:	01c007c4 	movi	r7,31
   2d730:	18c00434 	orhi	r3,r3,16
   2d734:	38800d16 	blt	r7,r2,2d76c <__fixdfsi+0x70>
   2d738:	31befb44 	addi	r6,r6,-1043
   2d73c:	2084d83a 	srl	r2,r4,r2
   2d740:	1986983a 	sll	r3,r3,r6
   2d744:	1884b03a 	or	r2,r3,r2
   2d748:	28000726 	beq	r5,zero,2d768 <__fixdfsi+0x6c>
   2d74c:	0085c83a 	sub	r2,zero,r2
   2d750:	f800283a 	ret
   2d754:	00a00034 	movhi	r2,32768
   2d758:	10bfffc4 	addi	r2,r2,-1
   2d75c:	2885883a 	add	r2,r5,r2
   2d760:	f800283a 	ret
   2d764:	0005883a 	mov	r2,zero
   2d768:	f800283a 	ret
   2d76c:	008104c4 	movi	r2,1043
   2d770:	1185c83a 	sub	r2,r2,r6
   2d774:	1884d83a 	srl	r2,r3,r2
   2d778:	003ff306 	br	2d748 <__alt_data_end+0xfffed748>

0002d77c <__floatsidf>:
   2d77c:	defffd04 	addi	sp,sp,-12
   2d780:	dfc00215 	stw	ra,8(sp)
   2d784:	dc400115 	stw	r17,4(sp)
   2d788:	dc000015 	stw	r16,0(sp)
   2d78c:	20002b26 	beq	r4,zero,2d83c <__floatsidf+0xc0>
   2d790:	2023883a 	mov	r17,r4
   2d794:	2020d7fa 	srli	r16,r4,31
   2d798:	20002d16 	blt	r4,zero,2d850 <__floatsidf+0xd4>
   2d79c:	8809883a 	mov	r4,r17
   2d7a0:	002d9000 	call	2d900 <__clzsi2>
   2d7a4:	01410784 	movi	r5,1054
   2d7a8:	288bc83a 	sub	r5,r5,r2
   2d7ac:	01010cc4 	movi	r4,1075
   2d7b0:	2149c83a 	sub	r4,r4,r5
   2d7b4:	00c007c4 	movi	r3,31
   2d7b8:	1900160e 	bge	r3,r4,2d814 <__floatsidf+0x98>
   2d7bc:	00c104c4 	movi	r3,1043
   2d7c0:	1947c83a 	sub	r3,r3,r5
   2d7c4:	88c6983a 	sll	r3,r17,r3
   2d7c8:	00800434 	movhi	r2,16
   2d7cc:	10bfffc4 	addi	r2,r2,-1
   2d7d0:	1886703a 	and	r3,r3,r2
   2d7d4:	2941ffcc 	andi	r5,r5,2047
   2d7d8:	800d883a 	mov	r6,r16
   2d7dc:	0005883a 	mov	r2,zero
   2d7e0:	280a953a 	slli	r5,r5,20
   2d7e4:	31803fcc 	andi	r6,r6,255
   2d7e8:	01000434 	movhi	r4,16
   2d7ec:	300c97fa 	slli	r6,r6,31
   2d7f0:	213fffc4 	addi	r4,r4,-1
   2d7f4:	1906703a 	and	r3,r3,r4
   2d7f8:	1946b03a 	or	r3,r3,r5
   2d7fc:	1986b03a 	or	r3,r3,r6
   2d800:	dfc00217 	ldw	ra,8(sp)
   2d804:	dc400117 	ldw	r17,4(sp)
   2d808:	dc000017 	ldw	r16,0(sp)
   2d80c:	dec00304 	addi	sp,sp,12
   2d810:	f800283a 	ret
   2d814:	00c002c4 	movi	r3,11
   2d818:	1887c83a 	sub	r3,r3,r2
   2d81c:	88c6d83a 	srl	r3,r17,r3
   2d820:	8904983a 	sll	r2,r17,r4
   2d824:	01000434 	movhi	r4,16
   2d828:	213fffc4 	addi	r4,r4,-1
   2d82c:	2941ffcc 	andi	r5,r5,2047
   2d830:	1906703a 	and	r3,r3,r4
   2d834:	800d883a 	mov	r6,r16
   2d838:	003fe906 	br	2d7e0 <__alt_data_end+0xfffed7e0>
   2d83c:	000d883a 	mov	r6,zero
   2d840:	000b883a 	mov	r5,zero
   2d844:	0007883a 	mov	r3,zero
   2d848:	0005883a 	mov	r2,zero
   2d84c:	003fe406 	br	2d7e0 <__alt_data_end+0xfffed7e0>
   2d850:	0123c83a 	sub	r17,zero,r4
   2d854:	003fd106 	br	2d79c <__alt_data_end+0xfffed79c>

0002d858 <__floatunsidf>:
   2d858:	defffe04 	addi	sp,sp,-8
   2d85c:	dc000015 	stw	r16,0(sp)
   2d860:	dfc00115 	stw	ra,4(sp)
   2d864:	2021883a 	mov	r16,r4
   2d868:	20002226 	beq	r4,zero,2d8f4 <__floatunsidf+0x9c>
   2d86c:	002d9000 	call	2d900 <__clzsi2>
   2d870:	01010784 	movi	r4,1054
   2d874:	2089c83a 	sub	r4,r4,r2
   2d878:	01810cc4 	movi	r6,1075
   2d87c:	310dc83a 	sub	r6,r6,r4
   2d880:	00c007c4 	movi	r3,31
   2d884:	1980120e 	bge	r3,r6,2d8d0 <__floatunsidf+0x78>
   2d888:	00c104c4 	movi	r3,1043
   2d88c:	1907c83a 	sub	r3,r3,r4
   2d890:	80ca983a 	sll	r5,r16,r3
   2d894:	00800434 	movhi	r2,16
   2d898:	10bfffc4 	addi	r2,r2,-1
   2d89c:	2101ffcc 	andi	r4,r4,2047
   2d8a0:	0021883a 	mov	r16,zero
   2d8a4:	288a703a 	and	r5,r5,r2
   2d8a8:	2008953a 	slli	r4,r4,20
   2d8ac:	00c00434 	movhi	r3,16
   2d8b0:	18ffffc4 	addi	r3,r3,-1
   2d8b4:	28c6703a 	and	r3,r5,r3
   2d8b8:	8005883a 	mov	r2,r16
   2d8bc:	1906b03a 	or	r3,r3,r4
   2d8c0:	dfc00117 	ldw	ra,4(sp)
   2d8c4:	dc000017 	ldw	r16,0(sp)
   2d8c8:	dec00204 	addi	sp,sp,8
   2d8cc:	f800283a 	ret
   2d8d0:	00c002c4 	movi	r3,11
   2d8d4:	188bc83a 	sub	r5,r3,r2
   2d8d8:	814ad83a 	srl	r5,r16,r5
   2d8dc:	00c00434 	movhi	r3,16
   2d8e0:	18ffffc4 	addi	r3,r3,-1
   2d8e4:	81a0983a 	sll	r16,r16,r6
   2d8e8:	2101ffcc 	andi	r4,r4,2047
   2d8ec:	28ca703a 	and	r5,r5,r3
   2d8f0:	003fed06 	br	2d8a8 <__alt_data_end+0xfffed8a8>
   2d8f4:	0009883a 	mov	r4,zero
   2d8f8:	000b883a 	mov	r5,zero
   2d8fc:	003fea06 	br	2d8a8 <__alt_data_end+0xfffed8a8>

0002d900 <__clzsi2>:
   2d900:	00bfffd4 	movui	r2,65535
   2d904:	11000536 	bltu	r2,r4,2d91c <__clzsi2+0x1c>
   2d908:	00803fc4 	movi	r2,255
   2d90c:	11000f36 	bltu	r2,r4,2d94c <__clzsi2+0x4c>
   2d910:	00800804 	movi	r2,32
   2d914:	0007883a 	mov	r3,zero
   2d918:	00000506 	br	2d930 <__clzsi2+0x30>
   2d91c:	00804034 	movhi	r2,256
   2d920:	10bfffc4 	addi	r2,r2,-1
   2d924:	11000c2e 	bgeu	r2,r4,2d958 <__clzsi2+0x58>
   2d928:	00800204 	movi	r2,8
   2d92c:	00c00604 	movi	r3,24
   2d930:	20c8d83a 	srl	r4,r4,r3
   2d934:	00c000f4 	movhi	r3,3
   2d938:	18c32b04 	addi	r3,r3,3244
   2d93c:	1909883a 	add	r4,r3,r4
   2d940:	20c00003 	ldbu	r3,0(r4)
   2d944:	10c5c83a 	sub	r2,r2,r3
   2d948:	f800283a 	ret
   2d94c:	00800604 	movi	r2,24
   2d950:	00c00204 	movi	r3,8
   2d954:	003ff606 	br	2d930 <__alt_data_end+0xfffed930>
   2d958:	00800404 	movi	r2,16
   2d95c:	1007883a 	mov	r3,r2
   2d960:	003ff306 	br	2d930 <__alt_data_end+0xfffed930>

0002d964 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d964:	defffe04 	addi	sp,sp,-8
   2d968:	dfc00115 	stw	ra,4(sp)
   2d96c:	df000015 	stw	fp,0(sp)
   2d970:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d974:	d0a00b17 	ldw	r2,-32724(gp)
   2d978:	10000326 	beq	r2,zero,2d988 <alt_get_errno+0x24>
   2d97c:	d0a00b17 	ldw	r2,-32724(gp)
   2d980:	103ee83a 	callr	r2
   2d984:	00000106 	br	2d98c <alt_get_errno+0x28>
   2d988:	d0a73704 	addi	r2,gp,-25380
}
   2d98c:	e037883a 	mov	sp,fp
   2d990:	dfc00117 	ldw	ra,4(sp)
   2d994:	df000017 	ldw	fp,0(sp)
   2d998:	dec00204 	addi	sp,sp,8
   2d99c:	f800283a 	ret

0002d9a0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2d9a0:	defffb04 	addi	sp,sp,-20
   2d9a4:	dfc00415 	stw	ra,16(sp)
   2d9a8:	df000315 	stw	fp,12(sp)
   2d9ac:	df000304 	addi	fp,sp,12
   2d9b0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   2d9b4:	e0bfff17 	ldw	r2,-4(fp)
   2d9b8:	10000816 	blt	r2,zero,2d9dc <close+0x3c>
   2d9bc:	01400304 	movi	r5,12
   2d9c0:	e13fff17 	ldw	r4,-4(fp)
   2d9c4:	002b0980 	call	2b098 <__mulsi3>
   2d9c8:	1007883a 	mov	r3,r2
   2d9cc:	008000f4 	movhi	r2,3
   2d9d0:	1085af04 	addi	r2,r2,5820
   2d9d4:	1885883a 	add	r2,r3,r2
   2d9d8:	00000106 	br	2d9e0 <close+0x40>
   2d9dc:	0005883a 	mov	r2,zero
   2d9e0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   2d9e4:	e0bffd17 	ldw	r2,-12(fp)
   2d9e8:	10001926 	beq	r2,zero,2da50 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2d9ec:	e0bffd17 	ldw	r2,-12(fp)
   2d9f0:	10800017 	ldw	r2,0(r2)
   2d9f4:	10800417 	ldw	r2,16(r2)
   2d9f8:	10000626 	beq	r2,zero,2da14 <close+0x74>
   2d9fc:	e0bffd17 	ldw	r2,-12(fp)
   2da00:	10800017 	ldw	r2,0(r2)
   2da04:	10800417 	ldw	r2,16(r2)
   2da08:	e13ffd17 	ldw	r4,-12(fp)
   2da0c:	103ee83a 	callr	r2
   2da10:	00000106 	br	2da18 <close+0x78>
   2da14:	0005883a 	mov	r2,zero
   2da18:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2da1c:	e13fff17 	ldw	r4,-4(fp)
   2da20:	002e3280 	call	2e328 <alt_release_fd>
    if (rval < 0)
   2da24:	e0bffe17 	ldw	r2,-8(fp)
   2da28:	1000070e 	bge	r2,zero,2da48 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   2da2c:	002d9640 	call	2d964 <alt_get_errno>
   2da30:	1007883a 	mov	r3,r2
   2da34:	e0bffe17 	ldw	r2,-8(fp)
   2da38:	0085c83a 	sub	r2,zero,r2
   2da3c:	18800015 	stw	r2,0(r3)
      return -1;
   2da40:	00bfffc4 	movi	r2,-1
   2da44:	00000706 	br	2da64 <close+0xc4>
    }
    return 0;
   2da48:	0005883a 	mov	r2,zero
   2da4c:	00000506 	br	2da64 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2da50:	002d9640 	call	2d964 <alt_get_errno>
   2da54:	1007883a 	mov	r3,r2
   2da58:	00801444 	movi	r2,81
   2da5c:	18800015 	stw	r2,0(r3)
    return -1;
   2da60:	00bfffc4 	movi	r2,-1
  }
}
   2da64:	e037883a 	mov	sp,fp
   2da68:	dfc00117 	ldw	ra,4(sp)
   2da6c:	df000017 	ldw	fp,0(sp)
   2da70:	dec00204 	addi	sp,sp,8
   2da74:	f800283a 	ret

0002da78 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   2da78:	defffc04 	addi	sp,sp,-16
   2da7c:	df000315 	stw	fp,12(sp)
   2da80:	df000304 	addi	fp,sp,12
   2da84:	e13ffd15 	stw	r4,-12(fp)
   2da88:	e17ffe15 	stw	r5,-8(fp)
   2da8c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   2da90:	e0bfff17 	ldw	r2,-4(fp)
}
   2da94:	e037883a 	mov	sp,fp
   2da98:	df000017 	ldw	fp,0(sp)
   2da9c:	dec00104 	addi	sp,sp,4
   2daa0:	f800283a 	ret

0002daa4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2daa4:	defffe04 	addi	sp,sp,-8
   2daa8:	dfc00115 	stw	ra,4(sp)
   2daac:	df000015 	stw	fp,0(sp)
   2dab0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2dab4:	d0a00b17 	ldw	r2,-32724(gp)
   2dab8:	10000326 	beq	r2,zero,2dac8 <alt_get_errno+0x24>
   2dabc:	d0a00b17 	ldw	r2,-32724(gp)
   2dac0:	103ee83a 	callr	r2
   2dac4:	00000106 	br	2dacc <alt_get_errno+0x28>
   2dac8:	d0a73704 	addi	r2,gp,-25380
}
   2dacc:	e037883a 	mov	sp,fp
   2dad0:	dfc00117 	ldw	ra,4(sp)
   2dad4:	df000017 	ldw	fp,0(sp)
   2dad8:	dec00204 	addi	sp,sp,8
   2dadc:	f800283a 	ret

0002dae0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   2dae0:	defffb04 	addi	sp,sp,-20
   2dae4:	dfc00415 	stw	ra,16(sp)
   2dae8:	df000315 	stw	fp,12(sp)
   2daec:	df000304 	addi	fp,sp,12
   2daf0:	e13ffe15 	stw	r4,-8(fp)
   2daf4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2daf8:	e0bffe17 	ldw	r2,-8(fp)
   2dafc:	10000816 	blt	r2,zero,2db20 <fstat+0x40>
   2db00:	01400304 	movi	r5,12
   2db04:	e13ffe17 	ldw	r4,-8(fp)
   2db08:	002b0980 	call	2b098 <__mulsi3>
   2db0c:	1007883a 	mov	r3,r2
   2db10:	008000f4 	movhi	r2,3
   2db14:	1085af04 	addi	r2,r2,5820
   2db18:	1885883a 	add	r2,r3,r2
   2db1c:	00000106 	br	2db24 <fstat+0x44>
   2db20:	0005883a 	mov	r2,zero
   2db24:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   2db28:	e0bffd17 	ldw	r2,-12(fp)
   2db2c:	10001026 	beq	r2,zero,2db70 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   2db30:	e0bffd17 	ldw	r2,-12(fp)
   2db34:	10800017 	ldw	r2,0(r2)
   2db38:	10800817 	ldw	r2,32(r2)
   2db3c:	10000726 	beq	r2,zero,2db5c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   2db40:	e0bffd17 	ldw	r2,-12(fp)
   2db44:	10800017 	ldw	r2,0(r2)
   2db48:	10800817 	ldw	r2,32(r2)
   2db4c:	e17fff17 	ldw	r5,-4(fp)
   2db50:	e13ffd17 	ldw	r4,-12(fp)
   2db54:	103ee83a 	callr	r2
   2db58:	00000a06 	br	2db84 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   2db5c:	e0bfff17 	ldw	r2,-4(fp)
   2db60:	00c80004 	movi	r3,8192
   2db64:	10c00115 	stw	r3,4(r2)
      return 0;
   2db68:	0005883a 	mov	r2,zero
   2db6c:	00000506 	br	2db84 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2db70:	002daa40 	call	2daa4 <alt_get_errno>
   2db74:	1007883a 	mov	r3,r2
   2db78:	00801444 	movi	r2,81
   2db7c:	18800015 	stw	r2,0(r3)
    return -1;
   2db80:	00bfffc4 	movi	r2,-1
  }
}
   2db84:	e037883a 	mov	sp,fp
   2db88:	dfc00117 	ldw	ra,4(sp)
   2db8c:	df000017 	ldw	fp,0(sp)
   2db90:	dec00204 	addi	sp,sp,8
   2db94:	f800283a 	ret

0002db98 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2db98:	defff904 	addi	sp,sp,-28
   2db9c:	dfc00615 	stw	ra,24(sp)
   2dba0:	df000515 	stw	fp,20(sp)
   2dba4:	df000504 	addi	fp,sp,20
   2dba8:	e13ffc15 	stw	r4,-16(fp)
   2dbac:	e17ffd15 	stw	r5,-12(fp)
   2dbb0:	e1bffe15 	stw	r6,-8(fp)
   2dbb4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   2dbb8:	e0800217 	ldw	r2,8(fp)
   2dbbc:	d8800015 	stw	r2,0(sp)
   2dbc0:	e1ffff17 	ldw	r7,-4(fp)
   2dbc4:	e1bffe17 	ldw	r6,-8(fp)
   2dbc8:	e17ffd17 	ldw	r5,-12(fp)
   2dbcc:	e13ffc17 	ldw	r4,-16(fp)
   2dbd0:	002dd480 	call	2dd48 <alt_iic_isr_register>
}  
   2dbd4:	e037883a 	mov	sp,fp
   2dbd8:	dfc00117 	ldw	ra,4(sp)
   2dbdc:	df000017 	ldw	fp,0(sp)
   2dbe0:	dec00204 	addi	sp,sp,8
   2dbe4:	f800283a 	ret

0002dbe8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   2dbe8:	defff904 	addi	sp,sp,-28
   2dbec:	df000615 	stw	fp,24(sp)
   2dbf0:	df000604 	addi	fp,sp,24
   2dbf4:	e13ffe15 	stw	r4,-8(fp)
   2dbf8:	e17fff15 	stw	r5,-4(fp)
   2dbfc:	e0bfff17 	ldw	r2,-4(fp)
   2dc00:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2dc04:	0005303a 	rdctl	r2,status
   2dc08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2dc0c:	e0fffb17 	ldw	r3,-20(fp)
   2dc10:	00bfff84 	movi	r2,-2
   2dc14:	1884703a 	and	r2,r3,r2
   2dc18:	1001703a 	wrctl	status,r2
  
  return context;
   2dc1c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2dc20:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   2dc24:	00c00044 	movi	r3,1
   2dc28:	e0bffa17 	ldw	r2,-24(fp)
   2dc2c:	1884983a 	sll	r2,r3,r2
   2dc30:	1007883a 	mov	r3,r2
   2dc34:	d0a73817 	ldw	r2,-25376(gp)
   2dc38:	1884b03a 	or	r2,r3,r2
   2dc3c:	d0a73815 	stw	r2,-25376(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2dc40:	d0a73817 	ldw	r2,-25376(gp)
   2dc44:	100170fa 	wrctl	ienable,r2
   2dc48:	e0bffc17 	ldw	r2,-16(fp)
   2dc4c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2dc50:	e0bffd17 	ldw	r2,-12(fp)
   2dc54:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2dc58:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   2dc5c:	0001883a 	nop
}
   2dc60:	e037883a 	mov	sp,fp
   2dc64:	df000017 	ldw	fp,0(sp)
   2dc68:	dec00104 	addi	sp,sp,4
   2dc6c:	f800283a 	ret

0002dc70 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   2dc70:	defff904 	addi	sp,sp,-28
   2dc74:	df000615 	stw	fp,24(sp)
   2dc78:	df000604 	addi	fp,sp,24
   2dc7c:	e13ffe15 	stw	r4,-8(fp)
   2dc80:	e17fff15 	stw	r5,-4(fp)
   2dc84:	e0bfff17 	ldw	r2,-4(fp)
   2dc88:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2dc8c:	0005303a 	rdctl	r2,status
   2dc90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2dc94:	e0fffb17 	ldw	r3,-20(fp)
   2dc98:	00bfff84 	movi	r2,-2
   2dc9c:	1884703a 	and	r2,r3,r2
   2dca0:	1001703a 	wrctl	status,r2
  
  return context;
   2dca4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2dca8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   2dcac:	00c00044 	movi	r3,1
   2dcb0:	e0bffa17 	ldw	r2,-24(fp)
   2dcb4:	1884983a 	sll	r2,r3,r2
   2dcb8:	0084303a 	nor	r2,zero,r2
   2dcbc:	1007883a 	mov	r3,r2
   2dcc0:	d0a73817 	ldw	r2,-25376(gp)
   2dcc4:	1884703a 	and	r2,r3,r2
   2dcc8:	d0a73815 	stw	r2,-25376(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2dccc:	d0a73817 	ldw	r2,-25376(gp)
   2dcd0:	100170fa 	wrctl	ienable,r2
   2dcd4:	e0bffc17 	ldw	r2,-16(fp)
   2dcd8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2dcdc:	e0bffd17 	ldw	r2,-12(fp)
   2dce0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2dce4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   2dce8:	0001883a 	nop
}
   2dcec:	e037883a 	mov	sp,fp
   2dcf0:	df000017 	ldw	fp,0(sp)
   2dcf4:	dec00104 	addi	sp,sp,4
   2dcf8:	f800283a 	ret

0002dcfc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   2dcfc:	defffc04 	addi	sp,sp,-16
   2dd00:	df000315 	stw	fp,12(sp)
   2dd04:	df000304 	addi	fp,sp,12
   2dd08:	e13ffe15 	stw	r4,-8(fp)
   2dd0c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   2dd10:	000530fa 	rdctl	r2,ienable
   2dd14:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   2dd18:	00c00044 	movi	r3,1
   2dd1c:	e0bfff17 	ldw	r2,-4(fp)
   2dd20:	1884983a 	sll	r2,r3,r2
   2dd24:	1007883a 	mov	r3,r2
   2dd28:	e0bffd17 	ldw	r2,-12(fp)
   2dd2c:	1884703a 	and	r2,r3,r2
   2dd30:	1004c03a 	cmpne	r2,r2,zero
   2dd34:	10803fcc 	andi	r2,r2,255
}
   2dd38:	e037883a 	mov	sp,fp
   2dd3c:	df000017 	ldw	fp,0(sp)
   2dd40:	dec00104 	addi	sp,sp,4
   2dd44:	f800283a 	ret

0002dd48 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2dd48:	defff504 	addi	sp,sp,-44
   2dd4c:	dfc00a15 	stw	ra,40(sp)
   2dd50:	df000915 	stw	fp,36(sp)
   2dd54:	df000904 	addi	fp,sp,36
   2dd58:	e13ffc15 	stw	r4,-16(fp)
   2dd5c:	e17ffd15 	stw	r5,-12(fp)
   2dd60:	e1bffe15 	stw	r6,-8(fp)
   2dd64:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   2dd68:	00bffa84 	movi	r2,-22
   2dd6c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   2dd70:	e0bffd17 	ldw	r2,-12(fp)
   2dd74:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   2dd78:	e0bff817 	ldw	r2,-32(fp)
   2dd7c:	10800808 	cmpgei	r2,r2,32
   2dd80:	1000271e 	bne	r2,zero,2de20 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2dd84:	0005303a 	rdctl	r2,status
   2dd88:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2dd8c:	e0fffb17 	ldw	r3,-20(fp)
   2dd90:	00bfff84 	movi	r2,-2
   2dd94:	1884703a 	and	r2,r3,r2
   2dd98:	1001703a 	wrctl	status,r2
  
  return context;
   2dd9c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   2dda0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   2dda4:	008000f4 	movhi	r2,3
   2dda8:	1095d204 	addi	r2,r2,22344
   2ddac:	e0fff817 	ldw	r3,-32(fp)
   2ddb0:	180690fa 	slli	r3,r3,3
   2ddb4:	10c5883a 	add	r2,r2,r3
   2ddb8:	e0fffe17 	ldw	r3,-8(fp)
   2ddbc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   2ddc0:	008000f4 	movhi	r2,3
   2ddc4:	1095d204 	addi	r2,r2,22344
   2ddc8:	e0fff817 	ldw	r3,-32(fp)
   2ddcc:	180690fa 	slli	r3,r3,3
   2ddd0:	10c5883a 	add	r2,r2,r3
   2ddd4:	10800104 	addi	r2,r2,4
   2ddd8:	e0ffff17 	ldw	r3,-4(fp)
   2dddc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   2dde0:	e0bffe17 	ldw	r2,-8(fp)
   2dde4:	10000526 	beq	r2,zero,2ddfc <alt_iic_isr_register+0xb4>
   2dde8:	e0bff817 	ldw	r2,-32(fp)
   2ddec:	100b883a 	mov	r5,r2
   2ddf0:	e13ffc17 	ldw	r4,-16(fp)
   2ddf4:	002dbe80 	call	2dbe8 <alt_ic_irq_enable>
   2ddf8:	00000406 	br	2de0c <alt_iic_isr_register+0xc4>
   2ddfc:	e0bff817 	ldw	r2,-32(fp)
   2de00:	100b883a 	mov	r5,r2
   2de04:	e13ffc17 	ldw	r4,-16(fp)
   2de08:	002dc700 	call	2dc70 <alt_ic_irq_disable>
   2de0c:	e0bff715 	stw	r2,-36(fp)
   2de10:	e0bffa17 	ldw	r2,-24(fp)
   2de14:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2de18:	e0bff917 	ldw	r2,-28(fp)
   2de1c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   2de20:	e0bff717 	ldw	r2,-36(fp)
}
   2de24:	e037883a 	mov	sp,fp
   2de28:	dfc00117 	ldw	ra,4(sp)
   2de2c:	df000017 	ldw	fp,0(sp)
   2de30:	dec00204 	addi	sp,sp,8
   2de34:	f800283a 	ret

0002de38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2de38:	defffe04 	addi	sp,sp,-8
   2de3c:	dfc00115 	stw	ra,4(sp)
   2de40:	df000015 	stw	fp,0(sp)
   2de44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2de48:	d0a00b17 	ldw	r2,-32724(gp)
   2de4c:	10000326 	beq	r2,zero,2de5c <alt_get_errno+0x24>
   2de50:	d0a00b17 	ldw	r2,-32724(gp)
   2de54:	103ee83a 	callr	r2
   2de58:	00000106 	br	2de60 <alt_get_errno+0x28>
   2de5c:	d0a73704 	addi	r2,gp,-25380
}
   2de60:	e037883a 	mov	sp,fp
   2de64:	dfc00117 	ldw	ra,4(sp)
   2de68:	df000017 	ldw	fp,0(sp)
   2de6c:	dec00204 	addi	sp,sp,8
   2de70:	f800283a 	ret

0002de74 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2de74:	deffed04 	addi	sp,sp,-76
   2de78:	dfc01215 	stw	ra,72(sp)
   2de7c:	df001115 	stw	fp,68(sp)
   2de80:	df001104 	addi	fp,sp,68
   2de84:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2de88:	e0bfff17 	ldw	r2,-4(fp)
   2de8c:	10000816 	blt	r2,zero,2deb0 <isatty+0x3c>
   2de90:	01400304 	movi	r5,12
   2de94:	e13fff17 	ldw	r4,-4(fp)
   2de98:	002b0980 	call	2b098 <__mulsi3>
   2de9c:	1007883a 	mov	r3,r2
   2dea0:	008000f4 	movhi	r2,3
   2dea4:	1085af04 	addi	r2,r2,5820
   2dea8:	1885883a 	add	r2,r3,r2
   2deac:	00000106 	br	2deb4 <isatty+0x40>
   2deb0:	0005883a 	mov	r2,zero
   2deb4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   2deb8:	e0bfef17 	ldw	r2,-68(fp)
   2debc:	10000e26 	beq	r2,zero,2def8 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   2dec0:	e0bfef17 	ldw	r2,-68(fp)
   2dec4:	10800017 	ldw	r2,0(r2)
   2dec8:	10800817 	ldw	r2,32(r2)
   2decc:	1000021e 	bne	r2,zero,2ded8 <isatty+0x64>
    {
      return 1;
   2ded0:	00800044 	movi	r2,1
   2ded4:	00000d06 	br	2df0c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   2ded8:	e0bff004 	addi	r2,fp,-64
   2dedc:	100b883a 	mov	r5,r2
   2dee0:	e13fff17 	ldw	r4,-4(fp)
   2dee4:	002dae00 	call	2dae0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   2dee8:	e0bff117 	ldw	r2,-60(fp)
   2deec:	10880020 	cmpeqi	r2,r2,8192
   2def0:	10803fcc 	andi	r2,r2,255
   2def4:	00000506 	br	2df0c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2def8:	002de380 	call	2de38 <alt_get_errno>
   2defc:	1007883a 	mov	r3,r2
   2df00:	00801444 	movi	r2,81
   2df04:	18800015 	stw	r2,0(r3)
    return 0;
   2df08:	0005883a 	mov	r2,zero
  }
}
   2df0c:	e037883a 	mov	sp,fp
   2df10:	dfc00117 	ldw	ra,4(sp)
   2df14:	df000017 	ldw	fp,0(sp)
   2df18:	dec00204 	addi	sp,sp,8
   2df1c:	f800283a 	ret

0002df20 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2df20:	defffc04 	addi	sp,sp,-16
   2df24:	df000315 	stw	fp,12(sp)
   2df28:	df000304 	addi	fp,sp,12
   2df2c:	e13ffd15 	stw	r4,-12(fp)
   2df30:	e17ffe15 	stw	r5,-8(fp)
   2df34:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   2df38:	e0fffe17 	ldw	r3,-8(fp)
   2df3c:	e0bffd17 	ldw	r2,-12(fp)
   2df40:	18800c26 	beq	r3,r2,2df74 <alt_load_section+0x54>
  {
    while( to != end )
   2df44:	00000806 	br	2df68 <alt_load_section+0x48>
    {
      *to++ = *from++;
   2df48:	e0bffe17 	ldw	r2,-8(fp)
   2df4c:	10c00104 	addi	r3,r2,4
   2df50:	e0fffe15 	stw	r3,-8(fp)
   2df54:	e0fffd17 	ldw	r3,-12(fp)
   2df58:	19000104 	addi	r4,r3,4
   2df5c:	e13ffd15 	stw	r4,-12(fp)
   2df60:	18c00017 	ldw	r3,0(r3)
   2df64:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   2df68:	e0fffe17 	ldw	r3,-8(fp)
   2df6c:	e0bfff17 	ldw	r2,-4(fp)
   2df70:	18bff51e 	bne	r3,r2,2df48 <__alt_data_end+0xfffedf48>
    {
      *to++ = *from++;
    }
  }
}
   2df74:	0001883a 	nop
   2df78:	e037883a 	mov	sp,fp
   2df7c:	df000017 	ldw	fp,0(sp)
   2df80:	dec00104 	addi	sp,sp,4
   2df84:	f800283a 	ret

0002df88 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   2df88:	defffe04 	addi	sp,sp,-8
   2df8c:	dfc00115 	stw	ra,4(sp)
   2df90:	df000015 	stw	fp,0(sp)
   2df94:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   2df98:	018000f4 	movhi	r6,3
   2df9c:	318a9904 	addi	r6,r6,10852
   2dfa0:	014000f4 	movhi	r5,3
   2dfa4:	29437c04 	addi	r5,r5,3568
   2dfa8:	010000f4 	movhi	r4,3
   2dfac:	210a9904 	addi	r4,r4,10852
   2dfb0:	002df200 	call	2df20 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2dfb4:	018000b4 	movhi	r6,2
   2dfb8:	31808c04 	addi	r6,r6,560
   2dfbc:	014000b4 	movhi	r5,2
   2dfc0:	29400804 	addi	r5,r5,32
   2dfc4:	010000b4 	movhi	r4,2
   2dfc8:	21000804 	addi	r4,r4,32
   2dfcc:	002df200 	call	2df20 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2dfd0:	018000f4 	movhi	r6,3
   2dfd4:	31837c04 	addi	r6,r6,3568
   2dfd8:	014000f4 	movhi	r5,3
   2dfdc:	2942a604 	addi	r5,r5,2712
   2dfe0:	010000f4 	movhi	r4,3
   2dfe4:	2102a604 	addi	r4,r4,2712
   2dfe8:	002df200 	call	2df20 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2dfec:	002fc800 	call	2fc80 <alt_dcache_flush_all>
  alt_icache_flush_all();
   2dff0:	002fe400 	call	2fe40 <alt_icache_flush_all>
}
   2dff4:	0001883a 	nop
   2dff8:	e037883a 	mov	sp,fp
   2dffc:	dfc00117 	ldw	ra,4(sp)
   2e000:	df000017 	ldw	fp,0(sp)
   2e004:	dec00204 	addi	sp,sp,8
   2e008:	f800283a 	ret

0002e00c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2e00c:	defffe04 	addi	sp,sp,-8
   2e010:	dfc00115 	stw	ra,4(sp)
   2e014:	df000015 	stw	fp,0(sp)
   2e018:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2e01c:	d0a00b17 	ldw	r2,-32724(gp)
   2e020:	10000326 	beq	r2,zero,2e030 <alt_get_errno+0x24>
   2e024:	d0a00b17 	ldw	r2,-32724(gp)
   2e028:	103ee83a 	callr	r2
   2e02c:	00000106 	br	2e034 <alt_get_errno+0x28>
   2e030:	d0a73704 	addi	r2,gp,-25380
}
   2e034:	e037883a 	mov	sp,fp
   2e038:	dfc00117 	ldw	ra,4(sp)
   2e03c:	df000017 	ldw	fp,0(sp)
   2e040:	dec00204 	addi	sp,sp,8
   2e044:	f800283a 	ret

0002e048 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   2e048:	defff904 	addi	sp,sp,-28
   2e04c:	dfc00615 	stw	ra,24(sp)
   2e050:	df000515 	stw	fp,20(sp)
   2e054:	df000504 	addi	fp,sp,20
   2e058:	e13ffd15 	stw	r4,-12(fp)
   2e05c:	e17ffe15 	stw	r5,-8(fp)
   2e060:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   2e064:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2e068:	e0bffd17 	ldw	r2,-12(fp)
   2e06c:	10000816 	blt	r2,zero,2e090 <lseek+0x48>
   2e070:	01400304 	movi	r5,12
   2e074:	e13ffd17 	ldw	r4,-12(fp)
   2e078:	002b0980 	call	2b098 <__mulsi3>
   2e07c:	1007883a 	mov	r3,r2
   2e080:	008000f4 	movhi	r2,3
   2e084:	1085af04 	addi	r2,r2,5820
   2e088:	1885883a 	add	r2,r3,r2
   2e08c:	00000106 	br	2e094 <lseek+0x4c>
   2e090:	0005883a 	mov	r2,zero
   2e094:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   2e098:	e0bffc17 	ldw	r2,-16(fp)
   2e09c:	10001026 	beq	r2,zero,2e0e0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   2e0a0:	e0bffc17 	ldw	r2,-16(fp)
   2e0a4:	10800017 	ldw	r2,0(r2)
   2e0a8:	10800717 	ldw	r2,28(r2)
   2e0ac:	10000926 	beq	r2,zero,2e0d4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   2e0b0:	e0bffc17 	ldw	r2,-16(fp)
   2e0b4:	10800017 	ldw	r2,0(r2)
   2e0b8:	10800717 	ldw	r2,28(r2)
   2e0bc:	e1bfff17 	ldw	r6,-4(fp)
   2e0c0:	e17ffe17 	ldw	r5,-8(fp)
   2e0c4:	e13ffc17 	ldw	r4,-16(fp)
   2e0c8:	103ee83a 	callr	r2
   2e0cc:	e0bffb15 	stw	r2,-20(fp)
   2e0d0:	00000506 	br	2e0e8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   2e0d4:	00bfde84 	movi	r2,-134
   2e0d8:	e0bffb15 	stw	r2,-20(fp)
   2e0dc:	00000206 	br	2e0e8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   2e0e0:	00bfebc4 	movi	r2,-81
   2e0e4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   2e0e8:	e0bffb17 	ldw	r2,-20(fp)
   2e0ec:	1000070e 	bge	r2,zero,2e10c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   2e0f0:	002e00c0 	call	2e00c <alt_get_errno>
   2e0f4:	1007883a 	mov	r3,r2
   2e0f8:	e0bffb17 	ldw	r2,-20(fp)
   2e0fc:	0085c83a 	sub	r2,zero,r2
   2e100:	18800015 	stw	r2,0(r3)
    rc = -1;
   2e104:	00bfffc4 	movi	r2,-1
   2e108:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   2e10c:	e0bffb17 	ldw	r2,-20(fp)
}
   2e110:	e037883a 	mov	sp,fp
   2e114:	dfc00117 	ldw	ra,4(sp)
   2e118:	df000017 	ldw	fp,0(sp)
   2e11c:	dec00204 	addi	sp,sp,8
   2e120:	f800283a 	ret

0002e124 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   2e124:	defffd04 	addi	sp,sp,-12
   2e128:	dfc00215 	stw	ra,8(sp)
   2e12c:	df000115 	stw	fp,4(sp)
   2e130:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   2e134:	0009883a 	mov	r4,zero
   2e138:	002e5fc0 	call	2e5fc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   2e13c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2e140:	002e6340 	call	2e634 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   2e144:	018000f4 	movhi	r6,3
   2e148:	31836e04 	addi	r6,r6,3512
   2e14c:	014000f4 	movhi	r5,3
   2e150:	29436e04 	addi	r5,r5,3512
   2e154:	010000f4 	movhi	r4,3
   2e158:	21036e04 	addi	r4,r4,3512
   2e15c:	002ffe00 	call	2ffe0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   2e160:	002fd800 	call	2fd80 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   2e164:	010000f4 	movhi	r4,3
   2e168:	213f7804 	addi	r4,r4,-544
   2e16c:	00307040 	call	30704 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   2e170:	d0a73917 	ldw	r2,-25372(gp)
   2e174:	d0e73a17 	ldw	r3,-25368(gp)
   2e178:	d1273b17 	ldw	r4,-25364(gp)
   2e17c:	200d883a 	mov	r6,r4
   2e180:	180b883a 	mov	r5,r3
   2e184:	1009883a 	mov	r4,r2
   2e188:	00209600 	call	20960 <main>
   2e18c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2e190:	01000044 	movi	r4,1
   2e194:	002d9a00 	call	2d9a0 <close>
  exit (result);
   2e198:	e13fff17 	ldw	r4,-4(fp)
   2e19c:	00307180 	call	30718 <exit>

0002e1a0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   2e1a0:	defffe04 	addi	sp,sp,-8
   2e1a4:	df000115 	stw	fp,4(sp)
   2e1a8:	df000104 	addi	fp,sp,4
   2e1ac:	e13fff15 	stw	r4,-4(fp)
}
   2e1b0:	0001883a 	nop
   2e1b4:	e037883a 	mov	sp,fp
   2e1b8:	df000017 	ldw	fp,0(sp)
   2e1bc:	dec00104 	addi	sp,sp,4
   2e1c0:	f800283a 	ret

0002e1c4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   2e1c4:	defffe04 	addi	sp,sp,-8
   2e1c8:	df000115 	stw	fp,4(sp)
   2e1cc:	df000104 	addi	fp,sp,4
   2e1d0:	e13fff15 	stw	r4,-4(fp)
}
   2e1d4:	0001883a 	nop
   2e1d8:	e037883a 	mov	sp,fp
   2e1dc:	df000017 	ldw	fp,0(sp)
   2e1e0:	dec00104 	addi	sp,sp,4
   2e1e4:	f800283a 	ret

0002e1e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2e1e8:	defffe04 	addi	sp,sp,-8
   2e1ec:	dfc00115 	stw	ra,4(sp)
   2e1f0:	df000015 	stw	fp,0(sp)
   2e1f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2e1f8:	d0a00b17 	ldw	r2,-32724(gp)
   2e1fc:	10000326 	beq	r2,zero,2e20c <alt_get_errno+0x24>
   2e200:	d0a00b17 	ldw	r2,-32724(gp)
   2e204:	103ee83a 	callr	r2
   2e208:	00000106 	br	2e210 <alt_get_errno+0x28>
   2e20c:	d0a73704 	addi	r2,gp,-25380
}
   2e210:	e037883a 	mov	sp,fp
   2e214:	dfc00117 	ldw	ra,4(sp)
   2e218:	df000017 	ldw	fp,0(sp)
   2e21c:	dec00204 	addi	sp,sp,8
   2e220:	f800283a 	ret

0002e224 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   2e224:	defff904 	addi	sp,sp,-28
   2e228:	dfc00615 	stw	ra,24(sp)
   2e22c:	df000515 	stw	fp,20(sp)
   2e230:	df000504 	addi	fp,sp,20
   2e234:	e13ffd15 	stw	r4,-12(fp)
   2e238:	e17ffe15 	stw	r5,-8(fp)
   2e23c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2e240:	e0bffd17 	ldw	r2,-12(fp)
   2e244:	10000816 	blt	r2,zero,2e268 <read+0x44>
   2e248:	01400304 	movi	r5,12
   2e24c:	e13ffd17 	ldw	r4,-12(fp)
   2e250:	002b0980 	call	2b098 <__mulsi3>
   2e254:	1007883a 	mov	r3,r2
   2e258:	008000f4 	movhi	r2,3
   2e25c:	1085af04 	addi	r2,r2,5820
   2e260:	1885883a 	add	r2,r3,r2
   2e264:	00000106 	br	2e26c <read+0x48>
   2e268:	0005883a 	mov	r2,zero
   2e26c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2e270:	e0bffb17 	ldw	r2,-20(fp)
   2e274:	10002226 	beq	r2,zero,2e300 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2e278:	e0bffb17 	ldw	r2,-20(fp)
   2e27c:	10800217 	ldw	r2,8(r2)
   2e280:	108000cc 	andi	r2,r2,3
   2e284:	10800060 	cmpeqi	r2,r2,1
   2e288:	1000181e 	bne	r2,zero,2e2ec <read+0xc8>
        (fd->dev->read))
   2e28c:	e0bffb17 	ldw	r2,-20(fp)
   2e290:	10800017 	ldw	r2,0(r2)
   2e294:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2e298:	10001426 	beq	r2,zero,2e2ec <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   2e29c:	e0bffb17 	ldw	r2,-20(fp)
   2e2a0:	10800017 	ldw	r2,0(r2)
   2e2a4:	10800517 	ldw	r2,20(r2)
   2e2a8:	e0ffff17 	ldw	r3,-4(fp)
   2e2ac:	180d883a 	mov	r6,r3
   2e2b0:	e17ffe17 	ldw	r5,-8(fp)
   2e2b4:	e13ffb17 	ldw	r4,-20(fp)
   2e2b8:	103ee83a 	callr	r2
   2e2bc:	e0bffc15 	stw	r2,-16(fp)
   2e2c0:	e0bffc17 	ldw	r2,-16(fp)
   2e2c4:	1000070e 	bge	r2,zero,2e2e4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   2e2c8:	002e1e80 	call	2e1e8 <alt_get_errno>
   2e2cc:	1007883a 	mov	r3,r2
   2e2d0:	e0bffc17 	ldw	r2,-16(fp)
   2e2d4:	0085c83a 	sub	r2,zero,r2
   2e2d8:	18800015 	stw	r2,0(r3)
          return -1;
   2e2dc:	00bfffc4 	movi	r2,-1
   2e2e0:	00000c06 	br	2e314 <read+0xf0>
        }
        return rval;
   2e2e4:	e0bffc17 	ldw	r2,-16(fp)
   2e2e8:	00000a06 	br	2e314 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   2e2ec:	002e1e80 	call	2e1e8 <alt_get_errno>
   2e2f0:	1007883a 	mov	r3,r2
   2e2f4:	00800344 	movi	r2,13
   2e2f8:	18800015 	stw	r2,0(r3)
   2e2fc:	00000406 	br	2e310 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   2e300:	002e1e80 	call	2e1e8 <alt_get_errno>
   2e304:	1007883a 	mov	r3,r2
   2e308:	00801444 	movi	r2,81
   2e30c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2e310:	00bfffc4 	movi	r2,-1
}
   2e314:	e037883a 	mov	sp,fp
   2e318:	dfc00117 	ldw	ra,4(sp)
   2e31c:	df000017 	ldw	fp,0(sp)
   2e320:	dec00204 	addi	sp,sp,8
   2e324:	f800283a 	ret

0002e328 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   2e328:	defffc04 	addi	sp,sp,-16
   2e32c:	dfc00315 	stw	ra,12(sp)
   2e330:	df000215 	stw	fp,8(sp)
   2e334:	dc000115 	stw	r16,4(sp)
   2e338:	df000204 	addi	fp,sp,8
   2e33c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   2e340:	e0bffe17 	ldw	r2,-8(fp)
   2e344:	108000d0 	cmplti	r2,r2,3
   2e348:	1000111e 	bne	r2,zero,2e390 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   2e34c:	040000f4 	movhi	r16,3
   2e350:	8405af04 	addi	r16,r16,5820
   2e354:	e0bffe17 	ldw	r2,-8(fp)
   2e358:	01400304 	movi	r5,12
   2e35c:	1009883a 	mov	r4,r2
   2e360:	002b0980 	call	2b098 <__mulsi3>
   2e364:	8085883a 	add	r2,r16,r2
   2e368:	10800204 	addi	r2,r2,8
   2e36c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   2e370:	040000f4 	movhi	r16,3
   2e374:	8405af04 	addi	r16,r16,5820
   2e378:	e0bffe17 	ldw	r2,-8(fp)
   2e37c:	01400304 	movi	r5,12
   2e380:	1009883a 	mov	r4,r2
   2e384:	002b0980 	call	2b098 <__mulsi3>
   2e388:	8085883a 	add	r2,r16,r2
   2e38c:	10000015 	stw	zero,0(r2)
  }
}
   2e390:	0001883a 	nop
   2e394:	e6ffff04 	addi	sp,fp,-4
   2e398:	dfc00217 	ldw	ra,8(sp)
   2e39c:	df000117 	ldw	fp,4(sp)
   2e3a0:	dc000017 	ldw	r16,0(sp)
   2e3a4:	dec00304 	addi	sp,sp,12
   2e3a8:	f800283a 	ret

0002e3ac <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   2e3ac:	defff904 	addi	sp,sp,-28
   2e3b0:	df000615 	stw	fp,24(sp)
   2e3b4:	df000604 	addi	fp,sp,24
   2e3b8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2e3bc:	0005303a 	rdctl	r2,status
   2e3c0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2e3c4:	e0fffe17 	ldw	r3,-8(fp)
   2e3c8:	00bfff84 	movi	r2,-2
   2e3cc:	1884703a 	and	r2,r3,r2
   2e3d0:	1001703a 	wrctl	status,r2
  
  return context;
   2e3d4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   2e3d8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   2e3dc:	d0a00d17 	ldw	r2,-32716(gp)
   2e3e0:	10c000c4 	addi	r3,r2,3
   2e3e4:	00bfff04 	movi	r2,-4
   2e3e8:	1884703a 	and	r2,r3,r2
   2e3ec:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   2e3f0:	d0e00d17 	ldw	r3,-32716(gp)
   2e3f4:	e0bfff17 	ldw	r2,-4(fp)
   2e3f8:	1887883a 	add	r3,r3,r2
   2e3fc:	00800134 	movhi	r2,4
   2e400:	10800004 	addi	r2,r2,0
   2e404:	10c0062e 	bgeu	r2,r3,2e420 <sbrk+0x74>
   2e408:	e0bffb17 	ldw	r2,-20(fp)
   2e40c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2e410:	e0bffa17 	ldw	r2,-24(fp)
   2e414:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   2e418:	00bfffc4 	movi	r2,-1
   2e41c:	00000b06 	br	2e44c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   2e420:	d0a00d17 	ldw	r2,-32716(gp)
   2e424:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   2e428:	d0e00d17 	ldw	r3,-32716(gp)
   2e42c:	e0bfff17 	ldw	r2,-4(fp)
   2e430:	1885883a 	add	r2,r3,r2
   2e434:	d0a00d15 	stw	r2,-32716(gp)
   2e438:	e0bffb17 	ldw	r2,-20(fp)
   2e43c:	e0bffc15 	stw	r2,-16(fp)
   2e440:	e0bffc17 	ldw	r2,-16(fp)
   2e444:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   2e448:	e0bffd17 	ldw	r2,-12(fp)
} 
   2e44c:	e037883a 	mov	sp,fp
   2e450:	df000017 	ldw	fp,0(sp)
   2e454:	dec00104 	addi	sp,sp,4
   2e458:	f800283a 	ret

0002e45c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   2e45c:	defffd04 	addi	sp,sp,-12
   2e460:	dfc00215 	stw	ra,8(sp)
   2e464:	df000115 	stw	fp,4(sp)
   2e468:	df000104 	addi	fp,sp,4
   2e46c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   2e470:	e13fff17 	ldw	r4,-4(fp)
   2e474:	002fb280 	call	2fb28 <alt_busy_sleep>
}
   2e478:	e037883a 	mov	sp,fp
   2e47c:	dfc00117 	ldw	ra,4(sp)
   2e480:	df000017 	ldw	fp,0(sp)
   2e484:	dec00204 	addi	sp,sp,8
   2e488:	f800283a 	ret

0002e48c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2e48c:	defffe04 	addi	sp,sp,-8
   2e490:	dfc00115 	stw	ra,4(sp)
   2e494:	df000015 	stw	fp,0(sp)
   2e498:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2e49c:	d0a00b17 	ldw	r2,-32724(gp)
   2e4a0:	10000326 	beq	r2,zero,2e4b0 <alt_get_errno+0x24>
   2e4a4:	d0a00b17 	ldw	r2,-32724(gp)
   2e4a8:	103ee83a 	callr	r2
   2e4ac:	00000106 	br	2e4b4 <alt_get_errno+0x28>
   2e4b0:	d0a73704 	addi	r2,gp,-25380
}
   2e4b4:	e037883a 	mov	sp,fp
   2e4b8:	dfc00117 	ldw	ra,4(sp)
   2e4bc:	df000017 	ldw	fp,0(sp)
   2e4c0:	dec00204 	addi	sp,sp,8
   2e4c4:	f800283a 	ret

0002e4c8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   2e4c8:	defff904 	addi	sp,sp,-28
   2e4cc:	dfc00615 	stw	ra,24(sp)
   2e4d0:	df000515 	stw	fp,20(sp)
   2e4d4:	df000504 	addi	fp,sp,20
   2e4d8:	e13ffd15 	stw	r4,-12(fp)
   2e4dc:	e17ffe15 	stw	r5,-8(fp)
   2e4e0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2e4e4:	e0bffd17 	ldw	r2,-12(fp)
   2e4e8:	10000816 	blt	r2,zero,2e50c <write+0x44>
   2e4ec:	01400304 	movi	r5,12
   2e4f0:	e13ffd17 	ldw	r4,-12(fp)
   2e4f4:	002b0980 	call	2b098 <__mulsi3>
   2e4f8:	1007883a 	mov	r3,r2
   2e4fc:	008000f4 	movhi	r2,3
   2e500:	1085af04 	addi	r2,r2,5820
   2e504:	1885883a 	add	r2,r3,r2
   2e508:	00000106 	br	2e510 <write+0x48>
   2e50c:	0005883a 	mov	r2,zero
   2e510:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2e514:	e0bffb17 	ldw	r2,-20(fp)
   2e518:	10002126 	beq	r2,zero,2e5a0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   2e51c:	e0bffb17 	ldw	r2,-20(fp)
   2e520:	10800217 	ldw	r2,8(r2)
   2e524:	108000cc 	andi	r2,r2,3
   2e528:	10001826 	beq	r2,zero,2e58c <write+0xc4>
   2e52c:	e0bffb17 	ldw	r2,-20(fp)
   2e530:	10800017 	ldw	r2,0(r2)
   2e534:	10800617 	ldw	r2,24(r2)
   2e538:	10001426 	beq	r2,zero,2e58c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   2e53c:	e0bffb17 	ldw	r2,-20(fp)
   2e540:	10800017 	ldw	r2,0(r2)
   2e544:	10800617 	ldw	r2,24(r2)
   2e548:	e0ffff17 	ldw	r3,-4(fp)
   2e54c:	180d883a 	mov	r6,r3
   2e550:	e17ffe17 	ldw	r5,-8(fp)
   2e554:	e13ffb17 	ldw	r4,-20(fp)
   2e558:	103ee83a 	callr	r2
   2e55c:	e0bffc15 	stw	r2,-16(fp)
   2e560:	e0bffc17 	ldw	r2,-16(fp)
   2e564:	1000070e 	bge	r2,zero,2e584 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   2e568:	002e48c0 	call	2e48c <alt_get_errno>
   2e56c:	1007883a 	mov	r3,r2
   2e570:	e0bffc17 	ldw	r2,-16(fp)
   2e574:	0085c83a 	sub	r2,zero,r2
   2e578:	18800015 	stw	r2,0(r3)
        return -1;
   2e57c:	00bfffc4 	movi	r2,-1
   2e580:	00000c06 	br	2e5b4 <write+0xec>
      }
      return rval;
   2e584:	e0bffc17 	ldw	r2,-16(fp)
   2e588:	00000a06 	br	2e5b4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   2e58c:	002e48c0 	call	2e48c <alt_get_errno>
   2e590:	1007883a 	mov	r3,r2
   2e594:	00800344 	movi	r2,13
   2e598:	18800015 	stw	r2,0(r3)
   2e59c:	00000406 	br	2e5b0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   2e5a0:	002e48c0 	call	2e48c <alt_get_errno>
   2e5a4:	1007883a 	mov	r3,r2
   2e5a8:	00801444 	movi	r2,81
   2e5ac:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2e5b0:	00bfffc4 	movi	r2,-1
}
   2e5b4:	e037883a 	mov	sp,fp
   2e5b8:	dfc00117 	ldw	ra,4(sp)
   2e5bc:	df000017 	ldw	fp,0(sp)
   2e5c0:	dec00204 	addi	sp,sp,8
   2e5c4:	f800283a 	ret

0002e5c8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   2e5c8:	defffd04 	addi	sp,sp,-12
   2e5cc:	dfc00215 	stw	ra,8(sp)
   2e5d0:	df000115 	stw	fp,4(sp)
   2e5d4:	df000104 	addi	fp,sp,4
   2e5d8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   2e5dc:	d1600804 	addi	r5,gp,-32736
   2e5e0:	e13fff17 	ldw	r4,-4(fp)
   2e5e4:	002fcdc0 	call	2fcdc <alt_dev_llist_insert>
}
   2e5e8:	e037883a 	mov	sp,fp
   2e5ec:	dfc00117 	ldw	ra,4(sp)
   2e5f0:	df000017 	ldw	fp,0(sp)
   2e5f4:	dec00204 	addi	sp,sp,8
   2e5f8:	f800283a 	ret

0002e5fc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   2e5fc:	defffd04 	addi	sp,sp,-12
   2e600:	dfc00215 	stw	ra,8(sp)
   2e604:	df000115 	stw	fp,4(sp)
   2e608:	df000104 	addi	fp,sp,4
   2e60c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, NIOS2);
   2e610:	00304840 	call	30484 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   2e614:	00800044 	movi	r2,1
   2e618:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   2e61c:	0001883a 	nop
   2e620:	e037883a 	mov	sp,fp
   2e624:	dfc00117 	ldw	ra,4(sp)
   2e628:	df000017 	ldw	fp,0(sp)
   2e62c:	dec00204 	addi	sp,sp,8
   2e630:	f800283a 	ret

0002e634 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   2e634:	defffe04 	addi	sp,sp,-8
   2e638:	dfc00115 	stw	ra,4(sp)
   2e63c:	df000015 	stw	fp,0(sp)
   2e640:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   2e644:	01800044 	movi	r6,1
   2e648:	000b883a 	mov	r5,zero
   2e64c:	010000f4 	movhi	r4,3
   2e650:	21061904 	addi	r4,r4,6244
   2e654:	002e8200 	call	2e820 <altera_avalon_jtag_uart_init>
   2e658:	010000f4 	movhi	r4,3
   2e65c:	21060f04 	addi	r4,r4,6204
   2e660:	002e5c80 	call	2e5c8 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_0, UART_0);
   2e664:	000d883a 	mov	r6,zero
   2e668:	000b883a 	mov	r5,zero
   2e66c:	010000f4 	movhi	r4,3
   2e670:	210a3104 	addi	r4,r4,10436
   2e674:	002f2340 	call	2f234 <altera_avalon_uart_init>
   2e678:	010000f4 	movhi	r4,3
   2e67c:	210a2704 	addi	r4,r4,10396
   2e680:	002e5c80 	call	2e5c8 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_1, UART_1);
   2e684:	01800084 	movi	r6,2
   2e688:	000b883a 	mov	r5,zero
   2e68c:	010000f4 	movhi	r4,3
   2e690:	210a6204 	addi	r4,r4,10632
   2e694:	002f2340 	call	2f234 <altera_avalon_uart_init>
   2e698:	010000f4 	movhi	r4,3
   2e69c:	210a5804 	addi	r4,r4,10592
   2e6a0:	002e5c80 	call	2e5c8 <alt_dev_reg>
}
   2e6a4:	0001883a 	nop
   2e6a8:	e037883a 	mov	sp,fp
   2e6ac:	dfc00117 	ldw	ra,4(sp)
   2e6b0:	df000017 	ldw	fp,0(sp)
   2e6b4:	dec00204 	addi	sp,sp,8
   2e6b8:	f800283a 	ret

0002e6bc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2e6bc:	defffa04 	addi	sp,sp,-24
   2e6c0:	dfc00515 	stw	ra,20(sp)
   2e6c4:	df000415 	stw	fp,16(sp)
   2e6c8:	df000404 	addi	fp,sp,16
   2e6cc:	e13ffd15 	stw	r4,-12(fp)
   2e6d0:	e17ffe15 	stw	r5,-8(fp)
   2e6d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2e6d8:	e0bffd17 	ldw	r2,-12(fp)
   2e6dc:	10800017 	ldw	r2,0(r2)
   2e6e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2e6e4:	e0bffc17 	ldw	r2,-16(fp)
   2e6e8:	10c00a04 	addi	r3,r2,40
   2e6ec:	e0bffd17 	ldw	r2,-12(fp)
   2e6f0:	10800217 	ldw	r2,8(r2)
   2e6f4:	100f883a 	mov	r7,r2
   2e6f8:	e1bfff17 	ldw	r6,-4(fp)
   2e6fc:	e17ffe17 	ldw	r5,-8(fp)
   2e700:	1809883a 	mov	r4,r3
   2e704:	002ece40 	call	2ece4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2e708:	e037883a 	mov	sp,fp
   2e70c:	dfc00117 	ldw	ra,4(sp)
   2e710:	df000017 	ldw	fp,0(sp)
   2e714:	dec00204 	addi	sp,sp,8
   2e718:	f800283a 	ret

0002e71c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2e71c:	defffa04 	addi	sp,sp,-24
   2e720:	dfc00515 	stw	ra,20(sp)
   2e724:	df000415 	stw	fp,16(sp)
   2e728:	df000404 	addi	fp,sp,16
   2e72c:	e13ffd15 	stw	r4,-12(fp)
   2e730:	e17ffe15 	stw	r5,-8(fp)
   2e734:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2e738:	e0bffd17 	ldw	r2,-12(fp)
   2e73c:	10800017 	ldw	r2,0(r2)
   2e740:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2e744:	e0bffc17 	ldw	r2,-16(fp)
   2e748:	10c00a04 	addi	r3,r2,40
   2e74c:	e0bffd17 	ldw	r2,-12(fp)
   2e750:	10800217 	ldw	r2,8(r2)
   2e754:	100f883a 	mov	r7,r2
   2e758:	e1bfff17 	ldw	r6,-4(fp)
   2e75c:	e17ffe17 	ldw	r5,-8(fp)
   2e760:	1809883a 	mov	r4,r3
   2e764:	002ef000 	call	2ef00 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2e768:	e037883a 	mov	sp,fp
   2e76c:	dfc00117 	ldw	ra,4(sp)
   2e770:	df000017 	ldw	fp,0(sp)
   2e774:	dec00204 	addi	sp,sp,8
   2e778:	f800283a 	ret

0002e77c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   2e77c:	defffc04 	addi	sp,sp,-16
   2e780:	dfc00315 	stw	ra,12(sp)
   2e784:	df000215 	stw	fp,8(sp)
   2e788:	df000204 	addi	fp,sp,8
   2e78c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2e790:	e0bfff17 	ldw	r2,-4(fp)
   2e794:	10800017 	ldw	r2,0(r2)
   2e798:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   2e79c:	e0bffe17 	ldw	r2,-8(fp)
   2e7a0:	10c00a04 	addi	r3,r2,40
   2e7a4:	e0bfff17 	ldw	r2,-4(fp)
   2e7a8:	10800217 	ldw	r2,8(r2)
   2e7ac:	100b883a 	mov	r5,r2
   2e7b0:	1809883a 	mov	r4,r3
   2e7b4:	002eb8c0 	call	2eb8c <altera_avalon_jtag_uart_close>
}
   2e7b8:	e037883a 	mov	sp,fp
   2e7bc:	dfc00117 	ldw	ra,4(sp)
   2e7c0:	df000017 	ldw	fp,0(sp)
   2e7c4:	dec00204 	addi	sp,sp,8
   2e7c8:	f800283a 	ret

0002e7cc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   2e7cc:	defffa04 	addi	sp,sp,-24
   2e7d0:	dfc00515 	stw	ra,20(sp)
   2e7d4:	df000415 	stw	fp,16(sp)
   2e7d8:	df000404 	addi	fp,sp,16
   2e7dc:	e13ffd15 	stw	r4,-12(fp)
   2e7e0:	e17ffe15 	stw	r5,-8(fp)
   2e7e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   2e7e8:	e0bffd17 	ldw	r2,-12(fp)
   2e7ec:	10800017 	ldw	r2,0(r2)
   2e7f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   2e7f4:	e0bffc17 	ldw	r2,-16(fp)
   2e7f8:	10800a04 	addi	r2,r2,40
   2e7fc:	e1bfff17 	ldw	r6,-4(fp)
   2e800:	e17ffe17 	ldw	r5,-8(fp)
   2e804:	1009883a 	mov	r4,r2
   2e808:	002ebf40 	call	2ebf4 <altera_avalon_jtag_uart_ioctl>
}
   2e80c:	e037883a 	mov	sp,fp
   2e810:	dfc00117 	ldw	ra,4(sp)
   2e814:	df000017 	ldw	fp,0(sp)
   2e818:	dec00204 	addi	sp,sp,8
   2e81c:	f800283a 	ret

0002e820 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   2e820:	defffa04 	addi	sp,sp,-24
   2e824:	dfc00515 	stw	ra,20(sp)
   2e828:	df000415 	stw	fp,16(sp)
   2e82c:	df000404 	addi	fp,sp,16
   2e830:	e13ffd15 	stw	r4,-12(fp)
   2e834:	e17ffe15 	stw	r5,-8(fp)
   2e838:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2e83c:	e0bffd17 	ldw	r2,-12(fp)
   2e840:	00c00044 	movi	r3,1
   2e844:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   2e848:	e0bffd17 	ldw	r2,-12(fp)
   2e84c:	10800017 	ldw	r2,0(r2)
   2e850:	10800104 	addi	r2,r2,4
   2e854:	1007883a 	mov	r3,r2
   2e858:	e0bffd17 	ldw	r2,-12(fp)
   2e85c:	10800817 	ldw	r2,32(r2)
   2e860:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   2e864:	e0bffe17 	ldw	r2,-8(fp)
   2e868:	e0ffff17 	ldw	r3,-4(fp)
   2e86c:	d8000015 	stw	zero,0(sp)
   2e870:	e1fffd17 	ldw	r7,-12(fp)
   2e874:	018000f4 	movhi	r6,3
   2e878:	31ba3804 	addi	r6,r6,-5920
   2e87c:	180b883a 	mov	r5,r3
   2e880:	1009883a 	mov	r4,r2
   2e884:	002db980 	call	2db98 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   2e888:	e0bffd17 	ldw	r2,-12(fp)
   2e88c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   2e890:	e0bffd17 	ldw	r2,-12(fp)
   2e894:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2e898:	d0e73d17 	ldw	r3,-25356(gp)
   2e89c:	e1fffd17 	ldw	r7,-12(fp)
   2e8a0:	018000f4 	movhi	r6,3
   2e8a4:	31babb04 	addi	r6,r6,-5396
   2e8a8:	180b883a 	mov	r5,r3
   2e8ac:	1009883a 	mov	r4,r2
   2e8b0:	002f9fc0 	call	2f9fc <alt_alarm_start>
   2e8b4:	1000040e 	bge	r2,zero,2e8c8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   2e8b8:	e0fffd17 	ldw	r3,-12(fp)
   2e8bc:	00a00034 	movhi	r2,32768
   2e8c0:	10bfffc4 	addi	r2,r2,-1
   2e8c4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   2e8c8:	0001883a 	nop
   2e8cc:	e037883a 	mov	sp,fp
   2e8d0:	dfc00117 	ldw	ra,4(sp)
   2e8d4:	df000017 	ldw	fp,0(sp)
   2e8d8:	dec00204 	addi	sp,sp,8
   2e8dc:	f800283a 	ret

0002e8e0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   2e8e0:	defff804 	addi	sp,sp,-32
   2e8e4:	df000715 	stw	fp,28(sp)
   2e8e8:	df000704 	addi	fp,sp,28
   2e8ec:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   2e8f0:	e0bfff17 	ldw	r2,-4(fp)
   2e8f4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   2e8f8:	e0bffb17 	ldw	r2,-20(fp)
   2e8fc:	10800017 	ldw	r2,0(r2)
   2e900:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2e904:	e0bffc17 	ldw	r2,-16(fp)
   2e908:	10800104 	addi	r2,r2,4
   2e90c:	10800037 	ldwio	r2,0(r2)
   2e910:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   2e914:	e0bffd17 	ldw	r2,-12(fp)
   2e918:	1080c00c 	andi	r2,r2,768
   2e91c:	10006d26 	beq	r2,zero,2ead4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   2e920:	e0bffd17 	ldw	r2,-12(fp)
   2e924:	1080400c 	andi	r2,r2,256
   2e928:	10003526 	beq	r2,zero,2ea00 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   2e92c:	00800074 	movhi	r2,1
   2e930:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2e934:	e0bffb17 	ldw	r2,-20(fp)
   2e938:	10800a17 	ldw	r2,40(r2)
   2e93c:	10800044 	addi	r2,r2,1
   2e940:	1081ffcc 	andi	r2,r2,2047
   2e944:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   2e948:	e0bffb17 	ldw	r2,-20(fp)
   2e94c:	10c00b17 	ldw	r3,44(r2)
   2e950:	e0bffe17 	ldw	r2,-8(fp)
   2e954:	18801526 	beq	r3,r2,2e9ac <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   2e958:	e0bffc17 	ldw	r2,-16(fp)
   2e95c:	10800037 	ldwio	r2,0(r2)
   2e960:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   2e964:	e0bff917 	ldw	r2,-28(fp)
   2e968:	10a0000c 	andi	r2,r2,32768
   2e96c:	10001126 	beq	r2,zero,2e9b4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   2e970:	e0bffb17 	ldw	r2,-20(fp)
   2e974:	10800a17 	ldw	r2,40(r2)
   2e978:	e0fff917 	ldw	r3,-28(fp)
   2e97c:	1809883a 	mov	r4,r3
   2e980:	e0fffb17 	ldw	r3,-20(fp)
   2e984:	1885883a 	add	r2,r3,r2
   2e988:	10800e04 	addi	r2,r2,56
   2e98c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2e990:	e0bffb17 	ldw	r2,-20(fp)
   2e994:	10800a17 	ldw	r2,40(r2)
   2e998:	10800044 	addi	r2,r2,1
   2e99c:	10c1ffcc 	andi	r3,r2,2047
   2e9a0:	e0bffb17 	ldw	r2,-20(fp)
   2e9a4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   2e9a8:	003fe206 	br	2e934 <__alt_data_end+0xfffee934>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   2e9ac:	0001883a 	nop
   2e9b0:	00000106 	br	2e9b8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   2e9b4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   2e9b8:	e0bff917 	ldw	r2,-28(fp)
   2e9bc:	10bfffec 	andhi	r2,r2,65535
   2e9c0:	10000f26 	beq	r2,zero,2ea00 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2e9c4:	e0bffb17 	ldw	r2,-20(fp)
   2e9c8:	10c00817 	ldw	r3,32(r2)
   2e9cc:	00bfff84 	movi	r2,-2
   2e9d0:	1886703a 	and	r3,r3,r2
   2e9d4:	e0bffb17 	ldw	r2,-20(fp)
   2e9d8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   2e9dc:	e0bffc17 	ldw	r2,-16(fp)
   2e9e0:	10800104 	addi	r2,r2,4
   2e9e4:	1007883a 	mov	r3,r2
   2e9e8:	e0bffb17 	ldw	r2,-20(fp)
   2e9ec:	10800817 	ldw	r2,32(r2)
   2e9f0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2e9f4:	e0bffc17 	ldw	r2,-16(fp)
   2e9f8:	10800104 	addi	r2,r2,4
   2e9fc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   2ea00:	e0bffd17 	ldw	r2,-12(fp)
   2ea04:	1080800c 	andi	r2,r2,512
   2ea08:	103fbe26 	beq	r2,zero,2e904 <__alt_data_end+0xfffee904>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   2ea0c:	e0bffd17 	ldw	r2,-12(fp)
   2ea10:	1004d43a 	srli	r2,r2,16
   2ea14:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   2ea18:	00001406 	br	2ea6c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   2ea1c:	e0bffc17 	ldw	r2,-16(fp)
   2ea20:	e0fffb17 	ldw	r3,-20(fp)
   2ea24:	18c00d17 	ldw	r3,52(r3)
   2ea28:	e13ffb17 	ldw	r4,-20(fp)
   2ea2c:	20c7883a 	add	r3,r4,r3
   2ea30:	18c20e04 	addi	r3,r3,2104
   2ea34:	18c00003 	ldbu	r3,0(r3)
   2ea38:	18c03fcc 	andi	r3,r3,255
   2ea3c:	18c0201c 	xori	r3,r3,128
   2ea40:	18ffe004 	addi	r3,r3,-128
   2ea44:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2ea48:	e0bffb17 	ldw	r2,-20(fp)
   2ea4c:	10800d17 	ldw	r2,52(r2)
   2ea50:	10800044 	addi	r2,r2,1
   2ea54:	10c1ffcc 	andi	r3,r2,2047
   2ea58:	e0bffb17 	ldw	r2,-20(fp)
   2ea5c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   2ea60:	e0bffa17 	ldw	r2,-24(fp)
   2ea64:	10bfffc4 	addi	r2,r2,-1
   2ea68:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   2ea6c:	e0bffa17 	ldw	r2,-24(fp)
   2ea70:	10000526 	beq	r2,zero,2ea88 <altera_avalon_jtag_uart_irq+0x1a8>
   2ea74:	e0bffb17 	ldw	r2,-20(fp)
   2ea78:	10c00d17 	ldw	r3,52(r2)
   2ea7c:	e0bffb17 	ldw	r2,-20(fp)
   2ea80:	10800c17 	ldw	r2,48(r2)
   2ea84:	18bfe51e 	bne	r3,r2,2ea1c <__alt_data_end+0xfffeea1c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   2ea88:	e0bffa17 	ldw	r2,-24(fp)
   2ea8c:	103f9d26 	beq	r2,zero,2e904 <__alt_data_end+0xfffee904>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2ea90:	e0bffb17 	ldw	r2,-20(fp)
   2ea94:	10c00817 	ldw	r3,32(r2)
   2ea98:	00bfff44 	movi	r2,-3
   2ea9c:	1886703a 	and	r3,r3,r2
   2eaa0:	e0bffb17 	ldw	r2,-20(fp)
   2eaa4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2eaa8:	e0bffb17 	ldw	r2,-20(fp)
   2eaac:	10800017 	ldw	r2,0(r2)
   2eab0:	10800104 	addi	r2,r2,4
   2eab4:	1007883a 	mov	r3,r2
   2eab8:	e0bffb17 	ldw	r2,-20(fp)
   2eabc:	10800817 	ldw	r2,32(r2)
   2eac0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2eac4:	e0bffc17 	ldw	r2,-16(fp)
   2eac8:	10800104 	addi	r2,r2,4
   2eacc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   2ead0:	003f8c06 	br	2e904 <__alt_data_end+0xfffee904>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   2ead4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   2ead8:	0001883a 	nop
   2eadc:	e037883a 	mov	sp,fp
   2eae0:	df000017 	ldw	fp,0(sp)
   2eae4:	dec00104 	addi	sp,sp,4
   2eae8:	f800283a 	ret

0002eaec <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   2eaec:	defff804 	addi	sp,sp,-32
   2eaf0:	df000715 	stw	fp,28(sp)
   2eaf4:	df000704 	addi	fp,sp,28
   2eaf8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   2eafc:	e0bffb17 	ldw	r2,-20(fp)
   2eb00:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   2eb04:	e0bff917 	ldw	r2,-28(fp)
   2eb08:	10800017 	ldw	r2,0(r2)
   2eb0c:	10800104 	addi	r2,r2,4
   2eb10:	10800037 	ldwio	r2,0(r2)
   2eb14:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   2eb18:	e0bffa17 	ldw	r2,-24(fp)
   2eb1c:	1081000c 	andi	r2,r2,1024
   2eb20:	10000b26 	beq	r2,zero,2eb50 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   2eb24:	e0bff917 	ldw	r2,-28(fp)
   2eb28:	10800017 	ldw	r2,0(r2)
   2eb2c:	10800104 	addi	r2,r2,4
   2eb30:	1007883a 	mov	r3,r2
   2eb34:	e0bff917 	ldw	r2,-28(fp)
   2eb38:	10800817 	ldw	r2,32(r2)
   2eb3c:	10810014 	ori	r2,r2,1024
   2eb40:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   2eb44:	e0bff917 	ldw	r2,-28(fp)
   2eb48:	10000915 	stw	zero,36(r2)
   2eb4c:	00000a06 	br	2eb78 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   2eb50:	e0bff917 	ldw	r2,-28(fp)
   2eb54:	10c00917 	ldw	r3,36(r2)
   2eb58:	00a00034 	movhi	r2,32768
   2eb5c:	10bfff04 	addi	r2,r2,-4
   2eb60:	10c00536 	bltu	r2,r3,2eb78 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   2eb64:	e0bff917 	ldw	r2,-28(fp)
   2eb68:	10800917 	ldw	r2,36(r2)
   2eb6c:	10c00044 	addi	r3,r2,1
   2eb70:	e0bff917 	ldw	r2,-28(fp)
   2eb74:	10c00915 	stw	r3,36(r2)
   2eb78:	d0a73d17 	ldw	r2,-25356(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   2eb7c:	e037883a 	mov	sp,fp
   2eb80:	df000017 	ldw	fp,0(sp)
   2eb84:	dec00104 	addi	sp,sp,4
   2eb88:	f800283a 	ret

0002eb8c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   2eb8c:	defffd04 	addi	sp,sp,-12
   2eb90:	df000215 	stw	fp,8(sp)
   2eb94:	df000204 	addi	fp,sp,8
   2eb98:	e13ffe15 	stw	r4,-8(fp)
   2eb9c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2eba0:	00000506 	br	2ebb8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   2eba4:	e0bfff17 	ldw	r2,-4(fp)
   2eba8:	1090000c 	andi	r2,r2,16384
   2ebac:	10000226 	beq	r2,zero,2ebb8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   2ebb0:	00bffd44 	movi	r2,-11
   2ebb4:	00000b06 	br	2ebe4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2ebb8:	e0bffe17 	ldw	r2,-8(fp)
   2ebbc:	10c00d17 	ldw	r3,52(r2)
   2ebc0:	e0bffe17 	ldw	r2,-8(fp)
   2ebc4:	10800c17 	ldw	r2,48(r2)
   2ebc8:	18800526 	beq	r3,r2,2ebe0 <altera_avalon_jtag_uart_close+0x54>
   2ebcc:	e0bffe17 	ldw	r2,-8(fp)
   2ebd0:	10c00917 	ldw	r3,36(r2)
   2ebd4:	e0bffe17 	ldw	r2,-8(fp)
   2ebd8:	10800117 	ldw	r2,4(r2)
   2ebdc:	18bff136 	bltu	r3,r2,2eba4 <__alt_data_end+0xfffeeba4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   2ebe0:	0005883a 	mov	r2,zero
}
   2ebe4:	e037883a 	mov	sp,fp
   2ebe8:	df000017 	ldw	fp,0(sp)
   2ebec:	dec00104 	addi	sp,sp,4
   2ebf0:	f800283a 	ret

0002ebf4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   2ebf4:	defffa04 	addi	sp,sp,-24
   2ebf8:	df000515 	stw	fp,20(sp)
   2ebfc:	df000504 	addi	fp,sp,20
   2ec00:	e13ffd15 	stw	r4,-12(fp)
   2ec04:	e17ffe15 	stw	r5,-8(fp)
   2ec08:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   2ec0c:	00bff9c4 	movi	r2,-25
   2ec10:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   2ec14:	e0bffe17 	ldw	r2,-8(fp)
   2ec18:	10da8060 	cmpeqi	r3,r2,27137
   2ec1c:	1800031e 	bne	r3,zero,2ec2c <altera_avalon_jtag_uart_ioctl+0x38>
   2ec20:	109a80a0 	cmpeqi	r2,r2,27138
   2ec24:	1000181e 	bne	r2,zero,2ec88 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   2ec28:	00002906 	br	2ecd0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   2ec2c:	e0bffd17 	ldw	r2,-12(fp)
   2ec30:	10c00117 	ldw	r3,4(r2)
   2ec34:	00a00034 	movhi	r2,32768
   2ec38:	10bfffc4 	addi	r2,r2,-1
   2ec3c:	18802126 	beq	r3,r2,2ecc4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   2ec40:	e0bfff17 	ldw	r2,-4(fp)
   2ec44:	10800017 	ldw	r2,0(r2)
   2ec48:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   2ec4c:	e0bffc17 	ldw	r2,-16(fp)
   2ec50:	10800090 	cmplti	r2,r2,2
   2ec54:	1000061e 	bne	r2,zero,2ec70 <altera_avalon_jtag_uart_ioctl+0x7c>
   2ec58:	e0fffc17 	ldw	r3,-16(fp)
   2ec5c:	00a00034 	movhi	r2,32768
   2ec60:	10bfffc4 	addi	r2,r2,-1
   2ec64:	18800226 	beq	r3,r2,2ec70 <altera_avalon_jtag_uart_ioctl+0x7c>
   2ec68:	e0bffc17 	ldw	r2,-16(fp)
   2ec6c:	00000206 	br	2ec78 <altera_avalon_jtag_uart_ioctl+0x84>
   2ec70:	00a00034 	movhi	r2,32768
   2ec74:	10bfff84 	addi	r2,r2,-2
   2ec78:	e0fffd17 	ldw	r3,-12(fp)
   2ec7c:	18800115 	stw	r2,4(r3)
      rc = 0;
   2ec80:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2ec84:	00000f06 	br	2ecc4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   2ec88:	e0bffd17 	ldw	r2,-12(fp)
   2ec8c:	10c00117 	ldw	r3,4(r2)
   2ec90:	00a00034 	movhi	r2,32768
   2ec94:	10bfffc4 	addi	r2,r2,-1
   2ec98:	18800c26 	beq	r3,r2,2eccc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   2ec9c:	e0bffd17 	ldw	r2,-12(fp)
   2eca0:	10c00917 	ldw	r3,36(r2)
   2eca4:	e0bffd17 	ldw	r2,-12(fp)
   2eca8:	10800117 	ldw	r2,4(r2)
   2ecac:	1885803a 	cmpltu	r2,r3,r2
   2ecb0:	10c03fcc 	andi	r3,r2,255
   2ecb4:	e0bfff17 	ldw	r2,-4(fp)
   2ecb8:	10c00015 	stw	r3,0(r2)
      rc = 0;
   2ecbc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2ecc0:	00000206 	br	2eccc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   2ecc4:	0001883a 	nop
   2ecc8:	00000106 	br	2ecd0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   2eccc:	0001883a 	nop

  default:
    break;
  }

  return rc;
   2ecd0:	e0bffb17 	ldw	r2,-20(fp)
}
   2ecd4:	e037883a 	mov	sp,fp
   2ecd8:	df000017 	ldw	fp,0(sp)
   2ecdc:	dec00104 	addi	sp,sp,4
   2ece0:	f800283a 	ret

0002ece4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   2ece4:	defff304 	addi	sp,sp,-52
   2ece8:	dfc00c15 	stw	ra,48(sp)
   2ecec:	df000b15 	stw	fp,44(sp)
   2ecf0:	df000b04 	addi	fp,sp,44
   2ecf4:	e13ffc15 	stw	r4,-16(fp)
   2ecf8:	e17ffd15 	stw	r5,-12(fp)
   2ecfc:	e1bffe15 	stw	r6,-8(fp)
   2ed00:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   2ed04:	e0bffd17 	ldw	r2,-12(fp)
   2ed08:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2ed0c:	00004706 	br	2ee2c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   2ed10:	e0bffc17 	ldw	r2,-16(fp)
   2ed14:	10800a17 	ldw	r2,40(r2)
   2ed18:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   2ed1c:	e0bffc17 	ldw	r2,-16(fp)
   2ed20:	10800b17 	ldw	r2,44(r2)
   2ed24:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   2ed28:	e0fff717 	ldw	r3,-36(fp)
   2ed2c:	e0bff817 	ldw	r2,-32(fp)
   2ed30:	18800536 	bltu	r3,r2,2ed48 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   2ed34:	e0fff717 	ldw	r3,-36(fp)
   2ed38:	e0bff817 	ldw	r2,-32(fp)
   2ed3c:	1885c83a 	sub	r2,r3,r2
   2ed40:	e0bff615 	stw	r2,-40(fp)
   2ed44:	00000406 	br	2ed58 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   2ed48:	00c20004 	movi	r3,2048
   2ed4c:	e0bff817 	ldw	r2,-32(fp)
   2ed50:	1885c83a 	sub	r2,r3,r2
   2ed54:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2ed58:	e0bff617 	ldw	r2,-40(fp)
   2ed5c:	10001e26 	beq	r2,zero,2edd8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   2ed60:	e0fffe17 	ldw	r3,-8(fp)
   2ed64:	e0bff617 	ldw	r2,-40(fp)
   2ed68:	1880022e 	bgeu	r3,r2,2ed74 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   2ed6c:	e0bffe17 	ldw	r2,-8(fp)
   2ed70:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   2ed74:	e0bffc17 	ldw	r2,-16(fp)
   2ed78:	10c00e04 	addi	r3,r2,56
   2ed7c:	e0bff817 	ldw	r2,-32(fp)
   2ed80:	1885883a 	add	r2,r3,r2
   2ed84:	e1bff617 	ldw	r6,-40(fp)
   2ed88:	100b883a 	mov	r5,r2
   2ed8c:	e13ff517 	ldw	r4,-44(fp)
   2ed90:	00267cc0 	call	267cc <memcpy>
      ptr   += n;
   2ed94:	e0fff517 	ldw	r3,-44(fp)
   2ed98:	e0bff617 	ldw	r2,-40(fp)
   2ed9c:	1885883a 	add	r2,r3,r2
   2eda0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   2eda4:	e0fffe17 	ldw	r3,-8(fp)
   2eda8:	e0bff617 	ldw	r2,-40(fp)
   2edac:	1885c83a 	sub	r2,r3,r2
   2edb0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2edb4:	e0fff817 	ldw	r3,-32(fp)
   2edb8:	e0bff617 	ldw	r2,-40(fp)
   2edbc:	1885883a 	add	r2,r3,r2
   2edc0:	10c1ffcc 	andi	r3,r2,2047
   2edc4:	e0bffc17 	ldw	r2,-16(fp)
   2edc8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   2edcc:	e0bffe17 	ldw	r2,-8(fp)
   2edd0:	00bfcf16 	blt	zero,r2,2ed10 <__alt_data_end+0xfffeed10>
   2edd4:	00000106 	br	2eddc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   2edd8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   2eddc:	e0fff517 	ldw	r3,-44(fp)
   2ede0:	e0bffd17 	ldw	r2,-12(fp)
   2ede4:	1880141e 	bne	r3,r2,2ee38 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   2ede8:	e0bfff17 	ldw	r2,-4(fp)
   2edec:	1090000c 	andi	r2,r2,16384
   2edf0:	1000131e 	bne	r2,zero,2ee40 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   2edf4:	0001883a 	nop
   2edf8:	e0bffc17 	ldw	r2,-16(fp)
   2edfc:	10c00a17 	ldw	r3,40(r2)
   2ee00:	e0bff717 	ldw	r2,-36(fp)
   2ee04:	1880051e 	bne	r3,r2,2ee1c <altera_avalon_jtag_uart_read+0x138>
   2ee08:	e0bffc17 	ldw	r2,-16(fp)
   2ee0c:	10c00917 	ldw	r3,36(r2)
   2ee10:	e0bffc17 	ldw	r2,-16(fp)
   2ee14:	10800117 	ldw	r2,4(r2)
   2ee18:	18bff736 	bltu	r3,r2,2edf8 <__alt_data_end+0xfffeedf8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   2ee1c:	e0bffc17 	ldw	r2,-16(fp)
   2ee20:	10c00a17 	ldw	r3,40(r2)
   2ee24:	e0bff717 	ldw	r2,-36(fp)
   2ee28:	18800726 	beq	r3,r2,2ee48 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2ee2c:	e0bffe17 	ldw	r2,-8(fp)
   2ee30:	00bfb716 	blt	zero,r2,2ed10 <__alt_data_end+0xfffeed10>
   2ee34:	00000506 	br	2ee4c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   2ee38:	0001883a 	nop
   2ee3c:	00000306 	br	2ee4c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   2ee40:	0001883a 	nop
   2ee44:	00000106 	br	2ee4c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   2ee48:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   2ee4c:	e0fff517 	ldw	r3,-44(fp)
   2ee50:	e0bffd17 	ldw	r2,-12(fp)
   2ee54:	18801826 	beq	r3,r2,2eeb8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2ee58:	0005303a 	rdctl	r2,status
   2ee5c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2ee60:	e0fffb17 	ldw	r3,-20(fp)
   2ee64:	00bfff84 	movi	r2,-2
   2ee68:	1884703a 	and	r2,r3,r2
   2ee6c:	1001703a 	wrctl	status,r2
  
  return context;
   2ee70:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   2ee74:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2ee78:	e0bffc17 	ldw	r2,-16(fp)
   2ee7c:	10800817 	ldw	r2,32(r2)
   2ee80:	10c00054 	ori	r3,r2,1
   2ee84:	e0bffc17 	ldw	r2,-16(fp)
   2ee88:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2ee8c:	e0bffc17 	ldw	r2,-16(fp)
   2ee90:	10800017 	ldw	r2,0(r2)
   2ee94:	10800104 	addi	r2,r2,4
   2ee98:	1007883a 	mov	r3,r2
   2ee9c:	e0bffc17 	ldw	r2,-16(fp)
   2eea0:	10800817 	ldw	r2,32(r2)
   2eea4:	18800035 	stwio	r2,0(r3)
   2eea8:	e0bffa17 	ldw	r2,-24(fp)
   2eeac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2eeb0:	e0bff917 	ldw	r2,-28(fp)
   2eeb4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   2eeb8:	e0fff517 	ldw	r3,-44(fp)
   2eebc:	e0bffd17 	ldw	r2,-12(fp)
   2eec0:	18800426 	beq	r3,r2,2eed4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   2eec4:	e0fff517 	ldw	r3,-44(fp)
   2eec8:	e0bffd17 	ldw	r2,-12(fp)
   2eecc:	1885c83a 	sub	r2,r3,r2
   2eed0:	00000606 	br	2eeec <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   2eed4:	e0bfff17 	ldw	r2,-4(fp)
   2eed8:	1090000c 	andi	r2,r2,16384
   2eedc:	10000226 	beq	r2,zero,2eee8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   2eee0:	00bffd44 	movi	r2,-11
   2eee4:	00000106 	br	2eeec <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   2eee8:	00bffec4 	movi	r2,-5
}
   2eeec:	e037883a 	mov	sp,fp
   2eef0:	dfc00117 	ldw	ra,4(sp)
   2eef4:	df000017 	ldw	fp,0(sp)
   2eef8:	dec00204 	addi	sp,sp,8
   2eefc:	f800283a 	ret

0002ef00 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2ef00:	defff304 	addi	sp,sp,-52
   2ef04:	dfc00c15 	stw	ra,48(sp)
   2ef08:	df000b15 	stw	fp,44(sp)
   2ef0c:	df000b04 	addi	fp,sp,44
   2ef10:	e13ffc15 	stw	r4,-16(fp)
   2ef14:	e17ffd15 	stw	r5,-12(fp)
   2ef18:	e1bffe15 	stw	r6,-8(fp)
   2ef1c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   2ef20:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   2ef24:	e0bffd17 	ldw	r2,-12(fp)
   2ef28:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2ef2c:	00003706 	br	2f00c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   2ef30:	e0bffc17 	ldw	r2,-16(fp)
   2ef34:	10800c17 	ldw	r2,48(r2)
   2ef38:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   2ef3c:	e0bffc17 	ldw	r2,-16(fp)
   2ef40:	10800d17 	ldw	r2,52(r2)
   2ef44:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   2ef48:	e0fff917 	ldw	r3,-28(fp)
   2ef4c:	e0bff517 	ldw	r2,-44(fp)
   2ef50:	1880062e 	bgeu	r3,r2,2ef6c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   2ef54:	e0fff517 	ldw	r3,-44(fp)
   2ef58:	e0bff917 	ldw	r2,-28(fp)
   2ef5c:	1885c83a 	sub	r2,r3,r2
   2ef60:	10bfffc4 	addi	r2,r2,-1
   2ef64:	e0bff615 	stw	r2,-40(fp)
   2ef68:	00000b06 	br	2ef98 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   2ef6c:	e0bff517 	ldw	r2,-44(fp)
   2ef70:	10000526 	beq	r2,zero,2ef88 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   2ef74:	00c20004 	movi	r3,2048
   2ef78:	e0bff917 	ldw	r2,-28(fp)
   2ef7c:	1885c83a 	sub	r2,r3,r2
   2ef80:	e0bff615 	stw	r2,-40(fp)
   2ef84:	00000406 	br	2ef98 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   2ef88:	00c1ffc4 	movi	r3,2047
   2ef8c:	e0bff917 	ldw	r2,-28(fp)
   2ef90:	1885c83a 	sub	r2,r3,r2
   2ef94:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2ef98:	e0bff617 	ldw	r2,-40(fp)
   2ef9c:	10001e26 	beq	r2,zero,2f018 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   2efa0:	e0fffe17 	ldw	r3,-8(fp)
   2efa4:	e0bff617 	ldw	r2,-40(fp)
   2efa8:	1880022e 	bgeu	r3,r2,2efb4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   2efac:	e0bffe17 	ldw	r2,-8(fp)
   2efb0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   2efb4:	e0bffc17 	ldw	r2,-16(fp)
   2efb8:	10c20e04 	addi	r3,r2,2104
   2efbc:	e0bff917 	ldw	r2,-28(fp)
   2efc0:	1885883a 	add	r2,r3,r2
   2efc4:	e1bff617 	ldw	r6,-40(fp)
   2efc8:	e17ffd17 	ldw	r5,-12(fp)
   2efcc:	1009883a 	mov	r4,r2
   2efd0:	00267cc0 	call	267cc <memcpy>
      ptr   += n;
   2efd4:	e0fffd17 	ldw	r3,-12(fp)
   2efd8:	e0bff617 	ldw	r2,-40(fp)
   2efdc:	1885883a 	add	r2,r3,r2
   2efe0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   2efe4:	e0fffe17 	ldw	r3,-8(fp)
   2efe8:	e0bff617 	ldw	r2,-40(fp)
   2efec:	1885c83a 	sub	r2,r3,r2
   2eff0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2eff4:	e0fff917 	ldw	r3,-28(fp)
   2eff8:	e0bff617 	ldw	r2,-40(fp)
   2effc:	1885883a 	add	r2,r3,r2
   2f000:	10c1ffcc 	andi	r3,r2,2047
   2f004:	e0bffc17 	ldw	r2,-16(fp)
   2f008:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2f00c:	e0bffe17 	ldw	r2,-8(fp)
   2f010:	00bfc716 	blt	zero,r2,2ef30 <__alt_data_end+0xfffeef30>
   2f014:	00000106 	br	2f01c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   2f018:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2f01c:	0005303a 	rdctl	r2,status
   2f020:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2f024:	e0fffb17 	ldw	r3,-20(fp)
   2f028:	00bfff84 	movi	r2,-2
   2f02c:	1884703a 	and	r2,r3,r2
   2f030:	1001703a 	wrctl	status,r2
  
  return context;
   2f034:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   2f038:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2f03c:	e0bffc17 	ldw	r2,-16(fp)
   2f040:	10800817 	ldw	r2,32(r2)
   2f044:	10c00094 	ori	r3,r2,2
   2f048:	e0bffc17 	ldw	r2,-16(fp)
   2f04c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2f050:	e0bffc17 	ldw	r2,-16(fp)
   2f054:	10800017 	ldw	r2,0(r2)
   2f058:	10800104 	addi	r2,r2,4
   2f05c:	1007883a 	mov	r3,r2
   2f060:	e0bffc17 	ldw	r2,-16(fp)
   2f064:	10800817 	ldw	r2,32(r2)
   2f068:	18800035 	stwio	r2,0(r3)
   2f06c:	e0bffa17 	ldw	r2,-24(fp)
   2f070:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2f074:	e0bff817 	ldw	r2,-32(fp)
   2f078:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   2f07c:	e0bffe17 	ldw	r2,-8(fp)
   2f080:	0080100e 	bge	zero,r2,2f0c4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   2f084:	e0bfff17 	ldw	r2,-4(fp)
   2f088:	1090000c 	andi	r2,r2,16384
   2f08c:	1000101e 	bne	r2,zero,2f0d0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   2f090:	0001883a 	nop
   2f094:	e0bffc17 	ldw	r2,-16(fp)
   2f098:	10c00d17 	ldw	r3,52(r2)
   2f09c:	e0bff517 	ldw	r2,-44(fp)
   2f0a0:	1880051e 	bne	r3,r2,2f0b8 <altera_avalon_jtag_uart_write+0x1b8>
   2f0a4:	e0bffc17 	ldw	r2,-16(fp)
   2f0a8:	10c00917 	ldw	r3,36(r2)
   2f0ac:	e0bffc17 	ldw	r2,-16(fp)
   2f0b0:	10800117 	ldw	r2,4(r2)
   2f0b4:	18bff736 	bltu	r3,r2,2f094 <__alt_data_end+0xfffef094>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   2f0b8:	e0bffc17 	ldw	r2,-16(fp)
   2f0bc:	10800917 	ldw	r2,36(r2)
   2f0c0:	1000051e 	bne	r2,zero,2f0d8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   2f0c4:	e0bffe17 	ldw	r2,-8(fp)
   2f0c8:	00bfd016 	blt	zero,r2,2f00c <__alt_data_end+0xfffef00c>
   2f0cc:	00000306 	br	2f0dc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   2f0d0:	0001883a 	nop
   2f0d4:	00000106 	br	2f0dc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   2f0d8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   2f0dc:	e0fffd17 	ldw	r3,-12(fp)
   2f0e0:	e0bff717 	ldw	r2,-36(fp)
   2f0e4:	18800426 	beq	r3,r2,2f0f8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   2f0e8:	e0fffd17 	ldw	r3,-12(fp)
   2f0ec:	e0bff717 	ldw	r2,-36(fp)
   2f0f0:	1885c83a 	sub	r2,r3,r2
   2f0f4:	00000606 	br	2f110 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   2f0f8:	e0bfff17 	ldw	r2,-4(fp)
   2f0fc:	1090000c 	andi	r2,r2,16384
   2f100:	10000226 	beq	r2,zero,2f10c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   2f104:	00bffd44 	movi	r2,-11
   2f108:	00000106 	br	2f110 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   2f10c:	00bffec4 	movi	r2,-5
}
   2f110:	e037883a 	mov	sp,fp
   2f114:	dfc00117 	ldw	ra,4(sp)
   2f118:	df000017 	ldw	fp,0(sp)
   2f11c:	dec00204 	addi	sp,sp,8
   2f120:	f800283a 	ret

0002f124 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2f124:	defffa04 	addi	sp,sp,-24
   2f128:	dfc00515 	stw	ra,20(sp)
   2f12c:	df000415 	stw	fp,16(sp)
   2f130:	df000404 	addi	fp,sp,16
   2f134:	e13ffd15 	stw	r4,-12(fp)
   2f138:	e17ffe15 	stw	r5,-8(fp)
   2f13c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   2f140:	e0bffd17 	ldw	r2,-12(fp)
   2f144:	10800017 	ldw	r2,0(r2)
   2f148:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   2f14c:	e0bffc17 	ldw	r2,-16(fp)
   2f150:	10c00a04 	addi	r3,r2,40
   2f154:	e0bffd17 	ldw	r2,-12(fp)
   2f158:	10800217 	ldw	r2,8(r2)
   2f15c:	100f883a 	mov	r7,r2
   2f160:	e1bfff17 	ldw	r6,-4(fp)
   2f164:	e17ffe17 	ldw	r5,-8(fp)
   2f168:	1809883a 	mov	r4,r3
   2f16c:	002f6380 	call	2f638 <altera_avalon_uart_read>
      fd->fd_flags);
}
   2f170:	e037883a 	mov	sp,fp
   2f174:	dfc00117 	ldw	ra,4(sp)
   2f178:	df000017 	ldw	fp,0(sp)
   2f17c:	dec00204 	addi	sp,sp,8
   2f180:	f800283a 	ret

0002f184 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2f184:	defffa04 	addi	sp,sp,-24
   2f188:	dfc00515 	stw	ra,20(sp)
   2f18c:	df000415 	stw	fp,16(sp)
   2f190:	df000404 	addi	fp,sp,16
   2f194:	e13ffd15 	stw	r4,-12(fp)
   2f198:	e17ffe15 	stw	r5,-8(fp)
   2f19c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   2f1a0:	e0bffd17 	ldw	r2,-12(fp)
   2f1a4:	10800017 	ldw	r2,0(r2)
   2f1a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   2f1ac:	e0bffc17 	ldw	r2,-16(fp)
   2f1b0:	10c00a04 	addi	r3,r2,40
   2f1b4:	e0bffd17 	ldw	r2,-12(fp)
   2f1b8:	10800217 	ldw	r2,8(r2)
   2f1bc:	100f883a 	mov	r7,r2
   2f1c0:	e1bfff17 	ldw	r6,-4(fp)
   2f1c4:	e17ffe17 	ldw	r5,-8(fp)
   2f1c8:	1809883a 	mov	r4,r3
   2f1cc:	002f8500 	call	2f850 <altera_avalon_uart_write>
      fd->fd_flags);
}
   2f1d0:	e037883a 	mov	sp,fp
   2f1d4:	dfc00117 	ldw	ra,4(sp)
   2f1d8:	df000017 	ldw	fp,0(sp)
   2f1dc:	dec00204 	addi	sp,sp,8
   2f1e0:	f800283a 	ret

0002f1e4 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   2f1e4:	defffc04 	addi	sp,sp,-16
   2f1e8:	dfc00315 	stw	ra,12(sp)
   2f1ec:	df000215 	stw	fp,8(sp)
   2f1f0:	df000204 	addi	fp,sp,8
   2f1f4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   2f1f8:	e0bfff17 	ldw	r2,-4(fp)
   2f1fc:	10800017 	ldw	r2,0(r2)
   2f200:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   2f204:	e0bffe17 	ldw	r2,-8(fp)
   2f208:	10c00a04 	addi	r3,r2,40
   2f20c:	e0bfff17 	ldw	r2,-4(fp)
   2f210:	10800217 	ldw	r2,8(r2)
   2f214:	100b883a 	mov	r5,r2
   2f218:	1809883a 	mov	r4,r3
   2f21c:	002f5a80 	call	2f5a8 <altera_avalon_uart_close>
}
   2f220:	e037883a 	mov	sp,fp
   2f224:	dfc00117 	ldw	ra,4(sp)
   2f228:	df000017 	ldw	fp,0(sp)
   2f22c:	dec00204 	addi	sp,sp,8
   2f230:	f800283a 	ret

0002f234 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   2f234:	defff804 	addi	sp,sp,-32
   2f238:	dfc00715 	stw	ra,28(sp)
   2f23c:	df000615 	stw	fp,24(sp)
   2f240:	df000604 	addi	fp,sp,24
   2f244:	e13ffd15 	stw	r4,-12(fp)
   2f248:	e17ffe15 	stw	r5,-8(fp)
   2f24c:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   2f250:	e0bffd17 	ldw	r2,-12(fp)
   2f254:	10800017 	ldw	r2,0(r2)
   2f258:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   2f25c:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   2f260:	1000041e 	bne	r2,zero,2f274 <altera_avalon_uart_init+0x40>
   2f264:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   2f268:	1000021e 	bne	r2,zero,2f274 <altera_avalon_uart_init+0x40>
   2f26c:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   2f270:	10000226 	beq	r2,zero,2f27c <altera_avalon_uart_init+0x48>
   2f274:	00800044 	movi	r2,1
   2f278:	00000106 	br	2f280 <altera_avalon_uart_init+0x4c>
   2f27c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   2f280:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   2f284:	e0bffc17 	ldw	r2,-16(fp)
   2f288:	10000f1e 	bne	r2,zero,2f2c8 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   2f28c:	e0bffd17 	ldw	r2,-12(fp)
   2f290:	00c32004 	movi	r3,3200
   2f294:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   2f298:	e0bffb17 	ldw	r2,-20(fp)
   2f29c:	10800304 	addi	r2,r2,12
   2f2a0:	e0fffd17 	ldw	r3,-12(fp)
   2f2a4:	18c00117 	ldw	r3,4(r3)
   2f2a8:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   2f2ac:	d8000015 	stw	zero,0(sp)
   2f2b0:	e1fffd17 	ldw	r7,-12(fp)
   2f2b4:	018000f4 	movhi	r6,3
   2f2b8:	31bcb804 	addi	r6,r6,-3360
   2f2bc:	e17fff17 	ldw	r5,-4(fp)
   2f2c0:	e13ffe17 	ldw	r4,-8(fp)
   2f2c4:	002db980 	call	2db98 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   2f2c8:	0001883a 	nop
   2f2cc:	e037883a 	mov	sp,fp
   2f2d0:	dfc00117 	ldw	ra,4(sp)
   2f2d4:	df000017 	ldw	fp,0(sp)
   2f2d8:	dec00204 	addi	sp,sp,8
   2f2dc:	f800283a 	ret

0002f2e0 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   2f2e0:	defffa04 	addi	sp,sp,-24
   2f2e4:	dfc00515 	stw	ra,20(sp)
   2f2e8:	df000415 	stw	fp,16(sp)
   2f2ec:	df000404 	addi	fp,sp,16
   2f2f0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   2f2f4:	e0bfff17 	ldw	r2,-4(fp)
   2f2f8:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   2f2fc:	e0bffc17 	ldw	r2,-16(fp)
   2f300:	10800017 	ldw	r2,0(r2)
   2f304:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   2f308:	e0bffd17 	ldw	r2,-12(fp)
   2f30c:	10800204 	addi	r2,r2,8
   2f310:	10800037 	ldwio	r2,0(r2)
   2f314:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   2f318:	e0bffd17 	ldw	r2,-12(fp)
   2f31c:	10800204 	addi	r2,r2,8
   2f320:	0007883a 	mov	r3,zero
   2f324:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   2f328:	e0bffd17 	ldw	r2,-12(fp)
   2f32c:	10800204 	addi	r2,r2,8
   2f330:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   2f334:	e0bffe17 	ldw	r2,-8(fp)
   2f338:	1080200c 	andi	r2,r2,128
   2f33c:	10000326 	beq	r2,zero,2f34c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   2f340:	e17ffe17 	ldw	r5,-8(fp)
   2f344:	e13ffc17 	ldw	r4,-16(fp)
   2f348:	002f37c0 	call	2f37c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   2f34c:	e0bffe17 	ldw	r2,-8(fp)
   2f350:	1081100c 	andi	r2,r2,1088
   2f354:	10000326 	beq	r2,zero,2f364 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   2f358:	e17ffe17 	ldw	r5,-8(fp)
   2f35c:	e13ffc17 	ldw	r4,-16(fp)
   2f360:	002f4600 	call	2f460 <altera_avalon_uart_txirq>
  }
  

}
   2f364:	0001883a 	nop
   2f368:	e037883a 	mov	sp,fp
   2f36c:	dfc00117 	ldw	ra,4(sp)
   2f370:	df000017 	ldw	fp,0(sp)
   2f374:	dec00204 	addi	sp,sp,8
   2f378:	f800283a 	ret

0002f37c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   2f37c:	defffc04 	addi	sp,sp,-16
   2f380:	df000315 	stw	fp,12(sp)
   2f384:	df000304 	addi	fp,sp,12
   2f388:	e13ffe15 	stw	r4,-8(fp)
   2f38c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   2f390:	e0bfff17 	ldw	r2,-4(fp)
   2f394:	108000cc 	andi	r2,r2,3
   2f398:	10002c1e 	bne	r2,zero,2f44c <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   2f39c:	e0bffe17 	ldw	r2,-8(fp)
   2f3a0:	10800317 	ldw	r2,12(r2)
   2f3a4:	e0bffe17 	ldw	r2,-8(fp)
   2f3a8:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   2f3ac:	e0bffe17 	ldw	r2,-8(fp)
   2f3b0:	10800317 	ldw	r2,12(r2)
   2f3b4:	10800044 	addi	r2,r2,1
   2f3b8:	10800fcc 	andi	r2,r2,63
   2f3bc:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   2f3c0:	e0bffe17 	ldw	r2,-8(fp)
   2f3c4:	10800317 	ldw	r2,12(r2)
   2f3c8:	e0fffe17 	ldw	r3,-8(fp)
   2f3cc:	18c00017 	ldw	r3,0(r3)
   2f3d0:	18c00037 	ldwio	r3,0(r3)
   2f3d4:	1809883a 	mov	r4,r3
   2f3d8:	e0fffe17 	ldw	r3,-8(fp)
   2f3dc:	1885883a 	add	r2,r3,r2
   2f3e0:	10800704 	addi	r2,r2,28
   2f3e4:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   2f3e8:	e0bffe17 	ldw	r2,-8(fp)
   2f3ec:	e0fffd17 	ldw	r3,-12(fp)
   2f3f0:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   2f3f4:	e0bffe17 	ldw	r2,-8(fp)
   2f3f8:	10800317 	ldw	r2,12(r2)
   2f3fc:	10800044 	addi	r2,r2,1
   2f400:	10800fcc 	andi	r2,r2,63
   2f404:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   2f408:	e0bffe17 	ldw	r2,-8(fp)
   2f40c:	10c00217 	ldw	r3,8(r2)
   2f410:	e0bffd17 	ldw	r2,-12(fp)
   2f414:	18800e1e 	bne	r3,r2,2f450 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   2f418:	e0bffe17 	ldw	r2,-8(fp)
   2f41c:	10c00117 	ldw	r3,4(r2)
   2f420:	00bfdfc4 	movi	r2,-129
   2f424:	1886703a 	and	r3,r3,r2
   2f428:	e0bffe17 	ldw	r2,-8(fp)
   2f42c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   2f430:	e0bffe17 	ldw	r2,-8(fp)
   2f434:	10800017 	ldw	r2,0(r2)
   2f438:	10800304 	addi	r2,r2,12
   2f43c:	e0fffe17 	ldw	r3,-8(fp)
   2f440:	18c00117 	ldw	r3,4(r3)
   2f444:	10c00035 	stwio	r3,0(r2)
   2f448:	00000106 	br	2f450 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   2f44c:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
   2f450:	e037883a 	mov	sp,fp
   2f454:	df000017 	ldw	fp,0(sp)
   2f458:	dec00104 	addi	sp,sp,4
   2f45c:	f800283a 	ret

0002f460 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   2f460:	defffb04 	addi	sp,sp,-20
   2f464:	df000415 	stw	fp,16(sp)
   2f468:	df000404 	addi	fp,sp,16
   2f46c:	e13ffc15 	stw	r4,-16(fp)
   2f470:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   2f474:	e0bffc17 	ldw	r2,-16(fp)
   2f478:	10c00417 	ldw	r3,16(r2)
   2f47c:	e0bffc17 	ldw	r2,-16(fp)
   2f480:	10800517 	ldw	r2,20(r2)
   2f484:	18803226 	beq	r3,r2,2f550 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   2f488:	e0bffc17 	ldw	r2,-16(fp)
   2f48c:	10800617 	ldw	r2,24(r2)
   2f490:	1080008c 	andi	r2,r2,2
   2f494:	10000326 	beq	r2,zero,2f4a4 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   2f498:	e0bffd17 	ldw	r2,-12(fp)
   2f49c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   2f4a0:	10001d26 	beq	r2,zero,2f518 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   2f4a4:	e0bffc17 	ldw	r2,-16(fp)
   2f4a8:	10800417 	ldw	r2,16(r2)
   2f4ac:	e0bffc17 	ldw	r2,-16(fp)
   2f4b0:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   2f4b4:	e0bffc17 	ldw	r2,-16(fp)
   2f4b8:	10800017 	ldw	r2,0(r2)
   2f4bc:	10800104 	addi	r2,r2,4
   2f4c0:	e0fffc17 	ldw	r3,-16(fp)
   2f4c4:	18c00417 	ldw	r3,16(r3)
   2f4c8:	e13ffc17 	ldw	r4,-16(fp)
   2f4cc:	20c7883a 	add	r3,r4,r3
   2f4d0:	18c01704 	addi	r3,r3,92
   2f4d4:	18c00003 	ldbu	r3,0(r3)
   2f4d8:	18c03fcc 	andi	r3,r3,255
   2f4dc:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   2f4e0:	e0bffc17 	ldw	r2,-16(fp)
   2f4e4:	10800417 	ldw	r2,16(r2)
   2f4e8:	10800044 	addi	r2,r2,1
   2f4ec:	e0fffc17 	ldw	r3,-16(fp)
   2f4f0:	18800415 	stw	r2,16(r3)
   2f4f4:	10c00fcc 	andi	r3,r2,63
   2f4f8:	e0bffc17 	ldw	r2,-16(fp)
   2f4fc:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   2f500:	e0bffc17 	ldw	r2,-16(fp)
   2f504:	10800117 	ldw	r2,4(r2)
   2f508:	10c01014 	ori	r3,r2,64
   2f50c:	e0bffc17 	ldw	r2,-16(fp)
   2f510:	10c00115 	stw	r3,4(r2)
   2f514:	00000e06 	br	2f550 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   2f518:	e0bffc17 	ldw	r2,-16(fp)
   2f51c:	10800017 	ldw	r2,0(r2)
   2f520:	10800204 	addi	r2,r2,8
   2f524:	10800037 	ldwio	r2,0(r2)
   2f528:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   2f52c:	e0bffd17 	ldw	r2,-12(fp)
   2f530:	1082000c 	andi	r2,r2,2048
   2f534:	1000061e 	bne	r2,zero,2f550 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   2f538:	e0bffc17 	ldw	r2,-16(fp)
   2f53c:	10c00117 	ldw	r3,4(r2)
   2f540:	00bfefc4 	movi	r2,-65
   2f544:	1886703a 	and	r3,r3,r2
   2f548:	e0bffc17 	ldw	r2,-16(fp)
   2f54c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   2f550:	e0bffc17 	ldw	r2,-16(fp)
   2f554:	10c00417 	ldw	r3,16(r2)
   2f558:	e0bffc17 	ldw	r2,-16(fp)
   2f55c:	10800517 	ldw	r2,20(r2)
   2f560:	1880061e 	bne	r3,r2,2f57c <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   2f564:	e0bffc17 	ldw	r2,-16(fp)
   2f568:	10c00117 	ldw	r3,4(r2)
   2f56c:	00beefc4 	movi	r2,-1089
   2f570:	1886703a 	and	r3,r3,r2
   2f574:	e0bffc17 	ldw	r2,-16(fp)
   2f578:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2f57c:	e0bffc17 	ldw	r2,-16(fp)
   2f580:	10800017 	ldw	r2,0(r2)
   2f584:	10800304 	addi	r2,r2,12
   2f588:	e0fffc17 	ldw	r3,-16(fp)
   2f58c:	18c00117 	ldw	r3,4(r3)
   2f590:	10c00035 	stwio	r3,0(r2)
}
   2f594:	0001883a 	nop
   2f598:	e037883a 	mov	sp,fp
   2f59c:	df000017 	ldw	fp,0(sp)
   2f5a0:	dec00104 	addi	sp,sp,4
   2f5a4:	f800283a 	ret

0002f5a8 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   2f5a8:	defffd04 	addi	sp,sp,-12
   2f5ac:	df000215 	stw	fp,8(sp)
   2f5b0:	df000204 	addi	fp,sp,8
   2f5b4:	e13ffe15 	stw	r4,-8(fp)
   2f5b8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   2f5bc:	00000506 	br	2f5d4 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   2f5c0:	e0bfff17 	ldw	r2,-4(fp)
   2f5c4:	1090000c 	andi	r2,r2,16384
   2f5c8:	10000226 	beq	r2,zero,2f5d4 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   2f5cc:	00bffd44 	movi	r2,-11
   2f5d0:	00000606 	br	2f5ec <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   2f5d4:	e0bffe17 	ldw	r2,-8(fp)
   2f5d8:	10c00417 	ldw	r3,16(r2)
   2f5dc:	e0bffe17 	ldw	r2,-8(fp)
   2f5e0:	10800517 	ldw	r2,20(r2)
   2f5e4:	18bff61e 	bne	r3,r2,2f5c0 <__alt_data_end+0xfffef5c0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   2f5e8:	0005883a 	mov	r2,zero
}
   2f5ec:	e037883a 	mov	sp,fp
   2f5f0:	df000017 	ldw	fp,0(sp)
   2f5f4:	dec00104 	addi	sp,sp,4
   2f5f8:	f800283a 	ret

0002f5fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2f5fc:	defffe04 	addi	sp,sp,-8
   2f600:	dfc00115 	stw	ra,4(sp)
   2f604:	df000015 	stw	fp,0(sp)
   2f608:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2f60c:	d0a00b17 	ldw	r2,-32724(gp)
   2f610:	10000326 	beq	r2,zero,2f620 <alt_get_errno+0x24>
   2f614:	d0a00b17 	ldw	r2,-32724(gp)
   2f618:	103ee83a 	callr	r2
   2f61c:	00000106 	br	2f624 <alt_get_errno+0x28>
   2f620:	d0a73704 	addi	r2,gp,-25380
}
   2f624:	e037883a 	mov	sp,fp
   2f628:	dfc00117 	ldw	ra,4(sp)
   2f62c:	df000017 	ldw	fp,0(sp)
   2f630:	dec00204 	addi	sp,sp,8
   2f634:	f800283a 	ret

0002f638 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   2f638:	defff204 	addi	sp,sp,-56
   2f63c:	dfc00d15 	stw	ra,52(sp)
   2f640:	df000c15 	stw	fp,48(sp)
   2f644:	df000c04 	addi	fp,sp,48
   2f648:	e13ffc15 	stw	r4,-16(fp)
   2f64c:	e17ffd15 	stw	r5,-12(fp)
   2f650:	e1bffe15 	stw	r6,-8(fp)
   2f654:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   2f658:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   2f65c:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   2f660:	e0bfff17 	ldw	r2,-4(fp)
   2f664:	1090000c 	andi	r2,r2,16384
   2f668:	1005003a 	cmpeq	r2,r2,zero
   2f66c:	10803fcc 	andi	r2,r2,255
   2f670:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   2f674:	00001306 	br	2f6c4 <altera_avalon_uart_read+0x8c>
    {
      count++;
   2f678:	e0bff517 	ldw	r2,-44(fp)
   2f67c:	10800044 	addi	r2,r2,1
   2f680:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   2f684:	e0bffd17 	ldw	r2,-12(fp)
   2f688:	10c00044 	addi	r3,r2,1
   2f68c:	e0fffd15 	stw	r3,-12(fp)
   2f690:	e0fffc17 	ldw	r3,-16(fp)
   2f694:	18c00217 	ldw	r3,8(r3)
   2f698:	e13ffc17 	ldw	r4,-16(fp)
   2f69c:	20c7883a 	add	r3,r4,r3
   2f6a0:	18c00704 	addi	r3,r3,28
   2f6a4:	18c00003 	ldbu	r3,0(r3)
   2f6a8:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   2f6ac:	e0bffc17 	ldw	r2,-16(fp)
   2f6b0:	10800217 	ldw	r2,8(r2)
   2f6b4:	10800044 	addi	r2,r2,1
   2f6b8:	10c00fcc 	andi	r3,r2,63
   2f6bc:	e0bffc17 	ldw	r2,-16(fp)
   2f6c0:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   2f6c4:	e0fff517 	ldw	r3,-44(fp)
   2f6c8:	e0bffe17 	ldw	r2,-8(fp)
   2f6cc:	1880050e 	bge	r3,r2,2f6e4 <altera_avalon_uart_read+0xac>
   2f6d0:	e0bffc17 	ldw	r2,-16(fp)
   2f6d4:	10c00217 	ldw	r3,8(r2)
   2f6d8:	e0bffc17 	ldw	r2,-16(fp)
   2f6dc:	10800317 	ldw	r2,12(r2)
   2f6e0:	18bfe51e 	bne	r3,r2,2f678 <__alt_data_end+0xfffef678>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   2f6e4:	e0bff517 	ldw	r2,-44(fp)
   2f6e8:	1000251e 	bne	r2,zero,2f780 <altera_avalon_uart_read+0x148>
   2f6ec:	e0bffc17 	ldw	r2,-16(fp)
   2f6f0:	10c00217 	ldw	r3,8(r2)
   2f6f4:	e0bffc17 	ldw	r2,-16(fp)
   2f6f8:	10800317 	ldw	r2,12(r2)
   2f6fc:	1880201e 	bne	r3,r2,2f780 <altera_avalon_uart_read+0x148>
    {
      if (!block)
   2f700:	e0bff617 	ldw	r2,-40(fp)
   2f704:	1000071e 	bne	r2,zero,2f724 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   2f708:	002f5fc0 	call	2f5fc <alt_get_errno>
   2f70c:	1007883a 	mov	r3,r2
   2f710:	008002c4 	movi	r2,11
   2f714:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   2f718:	00800044 	movi	r2,1
   2f71c:	e0bff405 	stb	r2,-48(fp)
        break;
   2f720:	00001b06 	br	2f790 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2f724:	0005303a 	rdctl	r2,status
   2f728:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2f72c:	e0fff917 	ldw	r3,-28(fp)
   2f730:	00bfff84 	movi	r2,-2
   2f734:	1884703a 	and	r2,r3,r2
   2f738:	1001703a 	wrctl	status,r2
  
  return context;
   2f73c:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   2f740:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   2f744:	e0bffc17 	ldw	r2,-16(fp)
   2f748:	10800117 	ldw	r2,4(r2)
   2f74c:	10c02014 	ori	r3,r2,128
   2f750:	e0bffc17 	ldw	r2,-16(fp)
   2f754:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2f758:	e0bffc17 	ldw	r2,-16(fp)
   2f75c:	10800017 	ldw	r2,0(r2)
   2f760:	10800304 	addi	r2,r2,12
   2f764:	e0fffc17 	ldw	r3,-16(fp)
   2f768:	18c00117 	ldw	r3,4(r3)
   2f76c:	10c00035 	stwio	r3,0(r2)
   2f770:	e0bff817 	ldw	r2,-32(fp)
   2f774:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2f778:	e0bffa17 	ldw	r2,-24(fp)
   2f77c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   2f780:	e0bff517 	ldw	r2,-44(fp)
   2f784:	1000021e 	bne	r2,zero,2f790 <altera_avalon_uart_read+0x158>
   2f788:	e0bffe17 	ldw	r2,-8(fp)
   2f78c:	103fcd1e 	bne	r2,zero,2f6c4 <__alt_data_end+0xfffef6c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2f790:	0005303a 	rdctl	r2,status
   2f794:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2f798:	e0fffb17 	ldw	r3,-20(fp)
   2f79c:	00bfff84 	movi	r2,-2
   2f7a0:	1884703a 	and	r2,r3,r2
   2f7a4:	1001703a 	wrctl	status,r2
  
  return context;
   2f7a8:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   2f7ac:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   2f7b0:	e0bffc17 	ldw	r2,-16(fp)
   2f7b4:	10800117 	ldw	r2,4(r2)
   2f7b8:	10c02014 	ori	r3,r2,128
   2f7bc:	e0bffc17 	ldw	r2,-16(fp)
   2f7c0:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2f7c4:	e0bffc17 	ldw	r2,-16(fp)
   2f7c8:	10800017 	ldw	r2,0(r2)
   2f7cc:	10800304 	addi	r2,r2,12
   2f7d0:	e0fffc17 	ldw	r3,-16(fp)
   2f7d4:	18c00117 	ldw	r3,4(r3)
   2f7d8:	10c00035 	stwio	r3,0(r2)
   2f7dc:	e0bff817 	ldw	r2,-32(fp)
   2f7e0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2f7e4:	e0bff717 	ldw	r2,-36(fp)
   2f7e8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   2f7ec:	e0bff403 	ldbu	r2,-48(fp)
   2f7f0:	10000226 	beq	r2,zero,2f7fc <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   2f7f4:	00bffd44 	movi	r2,-11
   2f7f8:	00000106 	br	2f800 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   2f7fc:	e0bff517 	ldw	r2,-44(fp)
  }
}
   2f800:	e037883a 	mov	sp,fp
   2f804:	dfc00117 	ldw	ra,4(sp)
   2f808:	df000017 	ldw	fp,0(sp)
   2f80c:	dec00204 	addi	sp,sp,8
   2f810:	f800283a 	ret

0002f814 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2f814:	defffe04 	addi	sp,sp,-8
   2f818:	dfc00115 	stw	ra,4(sp)
   2f81c:	df000015 	stw	fp,0(sp)
   2f820:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2f824:	d0a00b17 	ldw	r2,-32724(gp)
   2f828:	10000326 	beq	r2,zero,2f838 <alt_get_errno+0x24>
   2f82c:	d0a00b17 	ldw	r2,-32724(gp)
   2f830:	103ee83a 	callr	r2
   2f834:	00000106 	br	2f83c <alt_get_errno+0x28>
   2f838:	d0a73704 	addi	r2,gp,-25380
}
   2f83c:	e037883a 	mov	sp,fp
   2f840:	dfc00117 	ldw	ra,4(sp)
   2f844:	df000017 	ldw	fp,0(sp)
   2f848:	dec00204 	addi	sp,sp,8
   2f84c:	f800283a 	ret

0002f850 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   2f850:	defff204 	addi	sp,sp,-56
   2f854:	dfc00d15 	stw	ra,52(sp)
   2f858:	df000c15 	stw	fp,48(sp)
   2f85c:	df000c04 	addi	fp,sp,48
   2f860:	e13ffc15 	stw	r4,-16(fp)
   2f864:	e17ffd15 	stw	r5,-12(fp)
   2f868:	e1bffe15 	stw	r6,-8(fp)
   2f86c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   2f870:	e0bffe17 	ldw	r2,-8(fp)
   2f874:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   2f878:	e0bfff17 	ldw	r2,-4(fp)
   2f87c:	1090000c 	andi	r2,r2,16384
   2f880:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   2f884:	00003c06 	br	2f978 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   2f888:	e0bffc17 	ldw	r2,-16(fp)
   2f88c:	10800517 	ldw	r2,20(r2)
   2f890:	10800044 	addi	r2,r2,1
   2f894:	10800fcc 	andi	r2,r2,63
   2f898:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   2f89c:	e0bffc17 	ldw	r2,-16(fp)
   2f8a0:	10c00417 	ldw	r3,16(r2)
   2f8a4:	e0bff717 	ldw	r2,-36(fp)
   2f8a8:	1880221e 	bne	r3,r2,2f934 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   2f8ac:	e0bff517 	ldw	r2,-44(fp)
   2f8b0:	10000526 	beq	r2,zero,2f8c8 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   2f8b4:	002f8140 	call	2f814 <alt_get_errno>
   2f8b8:	1007883a 	mov	r3,r2
   2f8bc:	008002c4 	movi	r2,11
   2f8c0:	18800015 	stw	r2,0(r3)
        break;
   2f8c4:	00002e06 	br	2f980 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2f8c8:	0005303a 	rdctl	r2,status
   2f8cc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2f8d0:	e0fff917 	ldw	r3,-28(fp)
   2f8d4:	00bfff84 	movi	r2,-2
   2f8d8:	1884703a 	and	r2,r3,r2
   2f8dc:	1001703a 	wrctl	status,r2
  
  return context;
   2f8e0:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   2f8e4:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   2f8e8:	e0bffc17 	ldw	r2,-16(fp)
   2f8ec:	10800117 	ldw	r2,4(r2)
   2f8f0:	10c11014 	ori	r3,r2,1088
   2f8f4:	e0bffc17 	ldw	r2,-16(fp)
   2f8f8:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2f8fc:	e0bffc17 	ldw	r2,-16(fp)
   2f900:	10800017 	ldw	r2,0(r2)
   2f904:	10800304 	addi	r2,r2,12
   2f908:	e0fffc17 	ldw	r3,-16(fp)
   2f90c:	18c00117 	ldw	r3,4(r3)
   2f910:	10c00035 	stwio	r3,0(r2)
   2f914:	e0bff817 	ldw	r2,-32(fp)
   2f918:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2f91c:	e0bff617 	ldw	r2,-40(fp)
   2f920:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   2f924:	e0bffc17 	ldw	r2,-16(fp)
   2f928:	10c00417 	ldw	r3,16(r2)
   2f92c:	e0bff717 	ldw	r2,-36(fp)
   2f930:	18bffc26 	beq	r3,r2,2f924 <__alt_data_end+0xfffef924>
      }
    }

    count--;
   2f934:	e0bff417 	ldw	r2,-48(fp)
   2f938:	10bfffc4 	addi	r2,r2,-1
   2f93c:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   2f940:	e0bffc17 	ldw	r2,-16(fp)
   2f944:	10c00517 	ldw	r3,20(r2)
   2f948:	e0bffd17 	ldw	r2,-12(fp)
   2f94c:	11000044 	addi	r4,r2,1
   2f950:	e13ffd15 	stw	r4,-12(fp)
   2f954:	10800003 	ldbu	r2,0(r2)
   2f958:	1009883a 	mov	r4,r2
   2f95c:	e0bffc17 	ldw	r2,-16(fp)
   2f960:	10c5883a 	add	r2,r2,r3
   2f964:	10801704 	addi	r2,r2,92
   2f968:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   2f96c:	e0bffc17 	ldw	r2,-16(fp)
   2f970:	e0fff717 	ldw	r3,-36(fp)
   2f974:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   2f978:	e0bff417 	ldw	r2,-48(fp)
   2f97c:	103fc21e 	bne	r2,zero,2f888 <__alt_data_end+0xfffef888>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2f980:	0005303a 	rdctl	r2,status
   2f984:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2f988:	e0fffb17 	ldw	r3,-20(fp)
   2f98c:	00bfff84 	movi	r2,-2
   2f990:	1884703a 	and	r2,r3,r2
   2f994:	1001703a 	wrctl	status,r2
  
  return context;
   2f998:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   2f99c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   2f9a0:	e0bffc17 	ldw	r2,-16(fp)
   2f9a4:	10800117 	ldw	r2,4(r2)
   2f9a8:	10c11014 	ori	r3,r2,1088
   2f9ac:	e0bffc17 	ldw	r2,-16(fp)
   2f9b0:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2f9b4:	e0bffc17 	ldw	r2,-16(fp)
   2f9b8:	10800017 	ldw	r2,0(r2)
   2f9bc:	10800304 	addi	r2,r2,12
   2f9c0:	e0fffc17 	ldw	r3,-16(fp)
   2f9c4:	18c00117 	ldw	r3,4(r3)
   2f9c8:	10c00035 	stwio	r3,0(r2)
   2f9cc:	e0bff817 	ldw	r2,-32(fp)
   2f9d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2f9d4:	e0bffa17 	ldw	r2,-24(fp)
   2f9d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   2f9dc:	e0fffe17 	ldw	r3,-8(fp)
   2f9e0:	e0bff417 	ldw	r2,-48(fp)
   2f9e4:	1885c83a 	sub	r2,r3,r2
}
   2f9e8:	e037883a 	mov	sp,fp
   2f9ec:	dfc00117 	ldw	ra,4(sp)
   2f9f0:	df000017 	ldw	fp,0(sp)
   2f9f4:	dec00204 	addi	sp,sp,8
   2f9f8:	f800283a 	ret

0002f9fc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   2f9fc:	defff504 	addi	sp,sp,-44
   2fa00:	df000a15 	stw	fp,40(sp)
   2fa04:	df000a04 	addi	fp,sp,40
   2fa08:	e13ffc15 	stw	r4,-16(fp)
   2fa0c:	e17ffd15 	stw	r5,-12(fp)
   2fa10:	e1bffe15 	stw	r6,-8(fp)
   2fa14:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   2fa18:	e03ff615 	stw	zero,-40(fp)
   2fa1c:	d0a73d17 	ldw	r2,-25356(gp)
  
  if (alt_ticks_per_second ())
   2fa20:	10003c26 	beq	r2,zero,2fb14 <alt_alarm_start+0x118>
  {
    if (alarm)
   2fa24:	e0bffc17 	ldw	r2,-16(fp)
   2fa28:	10003826 	beq	r2,zero,2fb0c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   2fa2c:	e0bffc17 	ldw	r2,-16(fp)
   2fa30:	e0fffe17 	ldw	r3,-8(fp)
   2fa34:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   2fa38:	e0bffc17 	ldw	r2,-16(fp)
   2fa3c:	e0ffff17 	ldw	r3,-4(fp)
   2fa40:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2fa44:	0005303a 	rdctl	r2,status
   2fa48:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2fa4c:	e0fff917 	ldw	r3,-28(fp)
   2fa50:	00bfff84 	movi	r2,-2
   2fa54:	1884703a 	and	r2,r3,r2
   2fa58:	1001703a 	wrctl	status,r2
  
  return context;
   2fa5c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   2fa60:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   2fa64:	d0a73e17 	ldw	r2,-25352(gp)
      
      current_nticks = alt_nticks();
   2fa68:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   2fa6c:	e0fffd17 	ldw	r3,-12(fp)
   2fa70:	e0bff617 	ldw	r2,-40(fp)
   2fa74:	1885883a 	add	r2,r3,r2
   2fa78:	10c00044 	addi	r3,r2,1
   2fa7c:	e0bffc17 	ldw	r2,-16(fp)
   2fa80:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   2fa84:	e0bffc17 	ldw	r2,-16(fp)
   2fa88:	10c00217 	ldw	r3,8(r2)
   2fa8c:	e0bff617 	ldw	r2,-40(fp)
   2fa90:	1880042e 	bgeu	r3,r2,2faa4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   2fa94:	e0bffc17 	ldw	r2,-16(fp)
   2fa98:	00c00044 	movi	r3,1
   2fa9c:	10c00405 	stb	r3,16(r2)
   2faa0:	00000206 	br	2faac <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   2faa4:	e0bffc17 	ldw	r2,-16(fp)
   2faa8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   2faac:	e0bffc17 	ldw	r2,-16(fp)
   2fab0:	d0e00e04 	addi	r3,gp,-32712
   2fab4:	e0fffa15 	stw	r3,-24(fp)
   2fab8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2fabc:	e0bffb17 	ldw	r2,-20(fp)
   2fac0:	e0fffa17 	ldw	r3,-24(fp)
   2fac4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2fac8:	e0bffa17 	ldw	r2,-24(fp)
   2facc:	10c00017 	ldw	r3,0(r2)
   2fad0:	e0bffb17 	ldw	r2,-20(fp)
   2fad4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2fad8:	e0bffa17 	ldw	r2,-24(fp)
   2fadc:	10800017 	ldw	r2,0(r2)
   2fae0:	e0fffb17 	ldw	r3,-20(fp)
   2fae4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2fae8:	e0bffa17 	ldw	r2,-24(fp)
   2faec:	e0fffb17 	ldw	r3,-20(fp)
   2faf0:	10c00015 	stw	r3,0(r2)
   2faf4:	e0bff817 	ldw	r2,-32(fp)
   2faf8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2fafc:	e0bff717 	ldw	r2,-36(fp)
   2fb00:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   2fb04:	0005883a 	mov	r2,zero
   2fb08:	00000306 	br	2fb18 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   2fb0c:	00bffa84 	movi	r2,-22
   2fb10:	00000106 	br	2fb18 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   2fb14:	00bfde84 	movi	r2,-134
  }
}
   2fb18:	e037883a 	mov	sp,fp
   2fb1c:	df000017 	ldw	fp,0(sp)
   2fb20:	dec00104 	addi	sp,sp,4
   2fb24:	f800283a 	ret

0002fb28 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   2fb28:	defffa04 	addi	sp,sp,-24
   2fb2c:	dfc00515 	stw	ra,20(sp)
   2fb30:	df000415 	stw	fp,16(sp)
   2fb34:	df000404 	addi	fp,sp,16
   2fb38:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   2fb3c:	00800244 	movi	r2,9
   2fb40:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   2fb44:	014003f4 	movhi	r5,15
   2fb48:	29509004 	addi	r5,r5,16960
   2fb4c:	e13ffd17 	ldw	r4,-12(fp)
   2fb50:	002b0980 	call	2b098 <__mulsi3>
   2fb54:	100b883a 	mov	r5,r2
   2fb58:	0100bef4 	movhi	r4,763
   2fb5c:	213c2004 	addi	r4,r4,-3968
   2fb60:	0020b1c0 	call	20b1c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   2fb64:	100b883a 	mov	r5,r2
   2fb68:	01200034 	movhi	r4,32768
   2fb6c:	213fffc4 	addi	r4,r4,-1
   2fb70:	0020b1c0 	call	20b1c <__udivsi3>
   2fb74:	100b883a 	mov	r5,r2
   2fb78:	e13fff17 	ldw	r4,-4(fp)
   2fb7c:	0020b1c0 	call	20b1c <__udivsi3>
   2fb80:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   2fb84:	e0bffe17 	ldw	r2,-8(fp)
   2fb88:	10002a26 	beq	r2,zero,2fc34 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   2fb8c:	e03ffc15 	stw	zero,-16(fp)
   2fb90:	00001706 	br	2fbf0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   2fb94:	00a00034 	movhi	r2,32768
   2fb98:	10bfffc4 	addi	r2,r2,-1
   2fb9c:	10bfffc4 	addi	r2,r2,-1
   2fba0:	103ffe1e 	bne	r2,zero,2fb9c <__alt_data_end+0xfffefb9c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   2fba4:	014003f4 	movhi	r5,15
   2fba8:	29509004 	addi	r5,r5,16960
   2fbac:	e13ffd17 	ldw	r4,-12(fp)
   2fbb0:	002b0980 	call	2b098 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   2fbb4:	100b883a 	mov	r5,r2
   2fbb8:	0100bef4 	movhi	r4,763
   2fbbc:	213c2004 	addi	r4,r4,-3968
   2fbc0:	0020b1c0 	call	20b1c <__udivsi3>
   2fbc4:	100b883a 	mov	r5,r2
   2fbc8:	01200034 	movhi	r4,32768
   2fbcc:	213fffc4 	addi	r4,r4,-1
   2fbd0:	0020b1c0 	call	20b1c <__udivsi3>
   2fbd4:	1007883a 	mov	r3,r2
   2fbd8:	e0bfff17 	ldw	r2,-4(fp)
   2fbdc:	10c5c83a 	sub	r2,r2,r3
   2fbe0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   2fbe4:	e0bffc17 	ldw	r2,-16(fp)
   2fbe8:	10800044 	addi	r2,r2,1
   2fbec:	e0bffc15 	stw	r2,-16(fp)
   2fbf0:	e0fffc17 	ldw	r3,-16(fp)
   2fbf4:	e0bffe17 	ldw	r2,-8(fp)
   2fbf8:	18bfe616 	blt	r3,r2,2fb94 <__alt_data_end+0xfffefb94>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   2fbfc:	014003f4 	movhi	r5,15
   2fc00:	29509004 	addi	r5,r5,16960
   2fc04:	e13ffd17 	ldw	r4,-12(fp)
   2fc08:	002b0980 	call	2b098 <__mulsi3>
   2fc0c:	100b883a 	mov	r5,r2
   2fc10:	0100bef4 	movhi	r4,763
   2fc14:	213c2004 	addi	r4,r4,-3968
   2fc18:	0020b1c0 	call	20b1c <__udivsi3>
   2fc1c:	e17fff17 	ldw	r5,-4(fp)
   2fc20:	1009883a 	mov	r4,r2
   2fc24:	002b0980 	call	2b098 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   2fc28:	10bfffc4 	addi	r2,r2,-1
   2fc2c:	103ffe1e 	bne	r2,zero,2fc28 <__alt_data_end+0xfffefc28>
   2fc30:	00000d06 	br	2fc68 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   2fc34:	014003f4 	movhi	r5,15
   2fc38:	29509004 	addi	r5,r5,16960
   2fc3c:	e13ffd17 	ldw	r4,-12(fp)
   2fc40:	002b0980 	call	2b098 <__mulsi3>
   2fc44:	100b883a 	mov	r5,r2
   2fc48:	0100bef4 	movhi	r4,763
   2fc4c:	213c2004 	addi	r4,r4,-3968
   2fc50:	0020b1c0 	call	20b1c <__udivsi3>
   2fc54:	e17fff17 	ldw	r5,-4(fp)
   2fc58:	1009883a 	mov	r4,r2
   2fc5c:	002b0980 	call	2b098 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   2fc60:	10bfffc4 	addi	r2,r2,-1
   2fc64:	00bffe16 	blt	zero,r2,2fc60 <__alt_data_end+0xfffefc60>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   2fc68:	0005883a 	mov	r2,zero
}
   2fc6c:	e037883a 	mov	sp,fp
   2fc70:	dfc00117 	ldw	ra,4(sp)
   2fc74:	df000017 	ldw	fp,0(sp)
   2fc78:	dec00204 	addi	sp,sp,8
   2fc7c:	f800283a 	ret

0002fc80 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   2fc80:	deffff04 	addi	sp,sp,-4
   2fc84:	df000015 	stw	fp,0(sp)
   2fc88:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   2fc8c:	0001883a 	nop
   2fc90:	e037883a 	mov	sp,fp
   2fc94:	df000017 	ldw	fp,0(sp)
   2fc98:	dec00104 	addi	sp,sp,4
   2fc9c:	f800283a 	ret

0002fca0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2fca0:	defffe04 	addi	sp,sp,-8
   2fca4:	dfc00115 	stw	ra,4(sp)
   2fca8:	df000015 	stw	fp,0(sp)
   2fcac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2fcb0:	d0a00b17 	ldw	r2,-32724(gp)
   2fcb4:	10000326 	beq	r2,zero,2fcc4 <alt_get_errno+0x24>
   2fcb8:	d0a00b17 	ldw	r2,-32724(gp)
   2fcbc:	103ee83a 	callr	r2
   2fcc0:	00000106 	br	2fcc8 <alt_get_errno+0x28>
   2fcc4:	d0a73704 	addi	r2,gp,-25380
}
   2fcc8:	e037883a 	mov	sp,fp
   2fccc:	dfc00117 	ldw	ra,4(sp)
   2fcd0:	df000017 	ldw	fp,0(sp)
   2fcd4:	dec00204 	addi	sp,sp,8
   2fcd8:	f800283a 	ret

0002fcdc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   2fcdc:	defffa04 	addi	sp,sp,-24
   2fce0:	dfc00515 	stw	ra,20(sp)
   2fce4:	df000415 	stw	fp,16(sp)
   2fce8:	df000404 	addi	fp,sp,16
   2fcec:	e13ffe15 	stw	r4,-8(fp)
   2fcf0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   2fcf4:	e0bffe17 	ldw	r2,-8(fp)
   2fcf8:	10000326 	beq	r2,zero,2fd08 <alt_dev_llist_insert+0x2c>
   2fcfc:	e0bffe17 	ldw	r2,-8(fp)
   2fd00:	10800217 	ldw	r2,8(r2)
   2fd04:	1000061e 	bne	r2,zero,2fd20 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   2fd08:	002fca00 	call	2fca0 <alt_get_errno>
   2fd0c:	1007883a 	mov	r3,r2
   2fd10:	00800584 	movi	r2,22
   2fd14:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   2fd18:	00bffa84 	movi	r2,-22
   2fd1c:	00001306 	br	2fd6c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   2fd20:	e0bffe17 	ldw	r2,-8(fp)
   2fd24:	e0ffff17 	ldw	r3,-4(fp)
   2fd28:	e0fffc15 	stw	r3,-16(fp)
   2fd2c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2fd30:	e0bffd17 	ldw	r2,-12(fp)
   2fd34:	e0fffc17 	ldw	r3,-16(fp)
   2fd38:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2fd3c:	e0bffc17 	ldw	r2,-16(fp)
   2fd40:	10c00017 	ldw	r3,0(r2)
   2fd44:	e0bffd17 	ldw	r2,-12(fp)
   2fd48:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2fd4c:	e0bffc17 	ldw	r2,-16(fp)
   2fd50:	10800017 	ldw	r2,0(r2)
   2fd54:	e0fffd17 	ldw	r3,-12(fp)
   2fd58:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2fd5c:	e0bffc17 	ldw	r2,-16(fp)
   2fd60:	e0fffd17 	ldw	r3,-12(fp)
   2fd64:	10c00015 	stw	r3,0(r2)

  return 0;  
   2fd68:	0005883a 	mov	r2,zero
}
   2fd6c:	e037883a 	mov	sp,fp
   2fd70:	dfc00117 	ldw	ra,4(sp)
   2fd74:	df000017 	ldw	fp,0(sp)
   2fd78:	dec00204 	addi	sp,sp,8
   2fd7c:	f800283a 	ret

0002fd80 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   2fd80:	defffd04 	addi	sp,sp,-12
   2fd84:	dfc00215 	stw	ra,8(sp)
   2fd88:	df000115 	stw	fp,4(sp)
   2fd8c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2fd90:	008000f4 	movhi	r2,3
   2fd94:	1082a504 	addi	r2,r2,2708
   2fd98:	e0bfff15 	stw	r2,-4(fp)
   2fd9c:	00000606 	br	2fdb8 <_do_ctors+0x38>
        (*ctor) (); 
   2fda0:	e0bfff17 	ldw	r2,-4(fp)
   2fda4:	10800017 	ldw	r2,0(r2)
   2fda8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2fdac:	e0bfff17 	ldw	r2,-4(fp)
   2fdb0:	10bfff04 	addi	r2,r2,-4
   2fdb4:	e0bfff15 	stw	r2,-4(fp)
   2fdb8:	e0ffff17 	ldw	r3,-4(fp)
   2fdbc:	008000f4 	movhi	r2,3
   2fdc0:	1082a604 	addi	r2,r2,2712
   2fdc4:	18bff62e 	bgeu	r3,r2,2fda0 <__alt_data_end+0xfffefda0>
        (*ctor) (); 
}
   2fdc8:	0001883a 	nop
   2fdcc:	e037883a 	mov	sp,fp
   2fdd0:	dfc00117 	ldw	ra,4(sp)
   2fdd4:	df000017 	ldw	fp,0(sp)
   2fdd8:	dec00204 	addi	sp,sp,8
   2fddc:	f800283a 	ret

0002fde0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   2fde0:	defffd04 	addi	sp,sp,-12
   2fde4:	dfc00215 	stw	ra,8(sp)
   2fde8:	df000115 	stw	fp,4(sp)
   2fdec:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2fdf0:	008000f4 	movhi	r2,3
   2fdf4:	1082a504 	addi	r2,r2,2708
   2fdf8:	e0bfff15 	stw	r2,-4(fp)
   2fdfc:	00000606 	br	2fe18 <_do_dtors+0x38>
        (*dtor) (); 
   2fe00:	e0bfff17 	ldw	r2,-4(fp)
   2fe04:	10800017 	ldw	r2,0(r2)
   2fe08:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2fe0c:	e0bfff17 	ldw	r2,-4(fp)
   2fe10:	10bfff04 	addi	r2,r2,-4
   2fe14:	e0bfff15 	stw	r2,-4(fp)
   2fe18:	e0ffff17 	ldw	r3,-4(fp)
   2fe1c:	008000f4 	movhi	r2,3
   2fe20:	1082a604 	addi	r2,r2,2712
   2fe24:	18bff62e 	bgeu	r3,r2,2fe00 <__alt_data_end+0xfffefe00>
        (*dtor) (); 
}
   2fe28:	0001883a 	nop
   2fe2c:	e037883a 	mov	sp,fp
   2fe30:	dfc00117 	ldw	ra,4(sp)
   2fe34:	df000017 	ldw	fp,0(sp)
   2fe38:	dec00204 	addi	sp,sp,8
   2fe3c:	f800283a 	ret

0002fe40 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2fe40:	deffff04 	addi	sp,sp,-4
   2fe44:	df000015 	stw	fp,0(sp)
   2fe48:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   2fe4c:	0001883a 	nop
   2fe50:	e037883a 	mov	sp,fp
   2fe54:	df000017 	ldw	fp,0(sp)
   2fe58:	dec00104 	addi	sp,sp,4
   2fe5c:	f800283a 	ret

0002fe60 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   2fe60:	defffe04 	addi	sp,sp,-8
   2fe64:	df000115 	stw	fp,4(sp)
   2fe68:	df000104 	addi	fp,sp,4
   2fe6c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   2fe70:	e0bfff17 	ldw	r2,-4(fp)
   2fe74:	10bffe84 	addi	r2,r2,-6
   2fe78:	10c00428 	cmpgeui	r3,r2,16
   2fe7c:	18001a1e 	bne	r3,zero,2fee8 <alt_exception_cause_generated_bad_addr+0x88>
   2fe80:	100690ba 	slli	r3,r2,2
   2fe84:	008000f4 	movhi	r2,3
   2fe88:	10bfa604 	addi	r2,r2,-360
   2fe8c:	1885883a 	add	r2,r3,r2
   2fe90:	10800017 	ldw	r2,0(r2)
   2fe94:	1000683a 	jmp	r2
   2fe98:	0002fed8 	cmpnei	zero,zero,3067
   2fe9c:	0002fed8 	cmpnei	zero,zero,3067
   2fea0:	0002fee8 	cmpgeui	zero,zero,3067
   2fea4:	0002fee8 	cmpgeui	zero,zero,3067
   2fea8:	0002fee8 	cmpgeui	zero,zero,3067
   2feac:	0002fed8 	cmpnei	zero,zero,3067
   2feb0:	0002fee0 	cmpeqi	zero,zero,3067
   2feb4:	0002fee8 	cmpgeui	zero,zero,3067
   2feb8:	0002fed8 	cmpnei	zero,zero,3067
   2febc:	0002fed8 	cmpnei	zero,zero,3067
   2fec0:	0002fee8 	cmpgeui	zero,zero,3067
   2fec4:	0002fed8 	cmpnei	zero,zero,3067
   2fec8:	0002fee0 	cmpeqi	zero,zero,3067
   2fecc:	0002fee8 	cmpgeui	zero,zero,3067
   2fed0:	0002fee8 	cmpgeui	zero,zero,3067
   2fed4:	0002fed8 	cmpnei	zero,zero,3067
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   2fed8:	00800044 	movi	r2,1
   2fedc:	00000306 	br	2feec <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   2fee0:	0005883a 	mov	r2,zero
   2fee4:	00000106 	br	2feec <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   2fee8:	0005883a 	mov	r2,zero
  }
}
   2feec:	e037883a 	mov	sp,fp
   2fef0:	df000017 	ldw	fp,0(sp)
   2fef4:	dec00104 	addi	sp,sp,4
   2fef8:	f800283a 	ret

0002fefc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   2fefc:	defff804 	addi	sp,sp,-32
   2ff00:	dfc00715 	stw	ra,28(sp)
   2ff04:	df000615 	stw	fp,24(sp)
   2ff08:	dc000515 	stw	r16,20(sp)
   2ff0c:	df000604 	addi	fp,sp,24
   2ff10:	e13ffb15 	stw	r4,-20(fp)
   2ff14:	e17ffc15 	stw	r5,-16(fp)
   2ff18:	e1bffd15 	stw	r6,-12(fp)
   2ff1c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   2ff20:	e1bffe17 	ldw	r6,-8(fp)
   2ff24:	e17ffd17 	ldw	r5,-12(fp)
   2ff28:	e13ffc17 	ldw	r4,-16(fp)
   2ff2c:	00301840 	call	30184 <open>
   2ff30:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   2ff34:	e0bffa17 	ldw	r2,-24(fp)
   2ff38:	10002216 	blt	r2,zero,2ffc4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   2ff3c:	040000f4 	movhi	r16,3
   2ff40:	8405af04 	addi	r16,r16,5820
   2ff44:	e0bffa17 	ldw	r2,-24(fp)
   2ff48:	01400304 	movi	r5,12
   2ff4c:	1009883a 	mov	r4,r2
   2ff50:	002b0980 	call	2b098 <__mulsi3>
   2ff54:	8085883a 	add	r2,r16,r2
   2ff58:	10c00017 	ldw	r3,0(r2)
   2ff5c:	e0bffb17 	ldw	r2,-20(fp)
   2ff60:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   2ff64:	040000f4 	movhi	r16,3
   2ff68:	8405af04 	addi	r16,r16,5820
   2ff6c:	e0bffa17 	ldw	r2,-24(fp)
   2ff70:	01400304 	movi	r5,12
   2ff74:	1009883a 	mov	r4,r2
   2ff78:	002b0980 	call	2b098 <__mulsi3>
   2ff7c:	8085883a 	add	r2,r16,r2
   2ff80:	10800104 	addi	r2,r2,4
   2ff84:	10c00017 	ldw	r3,0(r2)
   2ff88:	e0bffb17 	ldw	r2,-20(fp)
   2ff8c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   2ff90:	040000f4 	movhi	r16,3
   2ff94:	8405af04 	addi	r16,r16,5820
   2ff98:	e0bffa17 	ldw	r2,-24(fp)
   2ff9c:	01400304 	movi	r5,12
   2ffa0:	1009883a 	mov	r4,r2
   2ffa4:	002b0980 	call	2b098 <__mulsi3>
   2ffa8:	8085883a 	add	r2,r16,r2
   2ffac:	10800204 	addi	r2,r2,8
   2ffb0:	10c00017 	ldw	r3,0(r2)
   2ffb4:	e0bffb17 	ldw	r2,-20(fp)
   2ffb8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   2ffbc:	e13ffa17 	ldw	r4,-24(fp)
   2ffc0:	002e3280 	call	2e328 <alt_release_fd>
  }
} 
   2ffc4:	0001883a 	nop
   2ffc8:	e6ffff04 	addi	sp,fp,-4
   2ffcc:	dfc00217 	ldw	ra,8(sp)
   2ffd0:	df000117 	ldw	fp,4(sp)
   2ffd4:	dc000017 	ldw	r16,0(sp)
   2ffd8:	dec00304 	addi	sp,sp,12
   2ffdc:	f800283a 	ret

0002ffe0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   2ffe0:	defffb04 	addi	sp,sp,-20
   2ffe4:	dfc00415 	stw	ra,16(sp)
   2ffe8:	df000315 	stw	fp,12(sp)
   2ffec:	df000304 	addi	fp,sp,12
   2fff0:	e13ffd15 	stw	r4,-12(fp)
   2fff4:	e17ffe15 	stw	r5,-8(fp)
   2fff8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   2fffc:	01c07fc4 	movi	r7,511
   30000:	01800044 	movi	r6,1
   30004:	e17ffd17 	ldw	r5,-12(fp)
   30008:	010000f4 	movhi	r4,3
   3000c:	2105b204 	addi	r4,r4,5832
   30010:	002fefc0 	call	2fefc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   30014:	01c07fc4 	movi	r7,511
   30018:	000d883a 	mov	r6,zero
   3001c:	e17ffe17 	ldw	r5,-8(fp)
   30020:	010000f4 	movhi	r4,3
   30024:	2105af04 	addi	r4,r4,5820
   30028:	002fefc0 	call	2fefc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   3002c:	01c07fc4 	movi	r7,511
   30030:	01800044 	movi	r6,1
   30034:	e17fff17 	ldw	r5,-4(fp)
   30038:	010000f4 	movhi	r4,3
   3003c:	2105b504 	addi	r4,r4,5844
   30040:	002fefc0 	call	2fefc <alt_open_fd>
}  
   30044:	0001883a 	nop
   30048:	e037883a 	mov	sp,fp
   3004c:	dfc00117 	ldw	ra,4(sp)
   30050:	df000017 	ldw	fp,0(sp)
   30054:	dec00204 	addi	sp,sp,8
   30058:	f800283a 	ret

0003005c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3005c:	defffe04 	addi	sp,sp,-8
   30060:	dfc00115 	stw	ra,4(sp)
   30064:	df000015 	stw	fp,0(sp)
   30068:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   3006c:	d0a00b17 	ldw	r2,-32724(gp)
   30070:	10000326 	beq	r2,zero,30080 <alt_get_errno+0x24>
   30074:	d0a00b17 	ldw	r2,-32724(gp)
   30078:	103ee83a 	callr	r2
   3007c:	00000106 	br	30084 <alt_get_errno+0x28>
   30080:	d0a73704 	addi	r2,gp,-25380
}
   30084:	e037883a 	mov	sp,fp
   30088:	dfc00117 	ldw	ra,4(sp)
   3008c:	df000017 	ldw	fp,0(sp)
   30090:	dec00204 	addi	sp,sp,8
   30094:	f800283a 	ret

00030098 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   30098:	defffb04 	addi	sp,sp,-20
   3009c:	dfc00415 	stw	ra,16(sp)
   300a0:	df000315 	stw	fp,12(sp)
   300a4:	dc000215 	stw	r16,8(sp)
   300a8:	df000304 	addi	fp,sp,12
   300ac:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   300b0:	e0bffe17 	ldw	r2,-8(fp)
   300b4:	10800217 	ldw	r2,8(r2)
   300b8:	10d00034 	orhi	r3,r2,16384
   300bc:	e0bffe17 	ldw	r2,-8(fp)
   300c0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   300c4:	e03ffd15 	stw	zero,-12(fp)
   300c8:	00002306 	br	30158 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   300cc:	040000f4 	movhi	r16,3
   300d0:	8405af04 	addi	r16,r16,5820
   300d4:	e0bffd17 	ldw	r2,-12(fp)
   300d8:	01400304 	movi	r5,12
   300dc:	1009883a 	mov	r4,r2
   300e0:	002b0980 	call	2b098 <__mulsi3>
   300e4:	8085883a 	add	r2,r16,r2
   300e8:	10c00017 	ldw	r3,0(r2)
   300ec:	e0bffe17 	ldw	r2,-8(fp)
   300f0:	10800017 	ldw	r2,0(r2)
   300f4:	1880151e 	bne	r3,r2,3014c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   300f8:	040000f4 	movhi	r16,3
   300fc:	8405af04 	addi	r16,r16,5820
   30100:	e0bffd17 	ldw	r2,-12(fp)
   30104:	01400304 	movi	r5,12
   30108:	1009883a 	mov	r4,r2
   3010c:	002b0980 	call	2b098 <__mulsi3>
   30110:	8085883a 	add	r2,r16,r2
   30114:	10800204 	addi	r2,r2,8
   30118:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   3011c:	10000b0e 	bge	r2,zero,3014c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   30120:	01400304 	movi	r5,12
   30124:	e13ffd17 	ldw	r4,-12(fp)
   30128:	002b0980 	call	2b098 <__mulsi3>
   3012c:	1007883a 	mov	r3,r2
   30130:	008000f4 	movhi	r2,3
   30134:	1085af04 	addi	r2,r2,5820
   30138:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   3013c:	e0bffe17 	ldw	r2,-8(fp)
   30140:	18800226 	beq	r3,r2,3014c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   30144:	00bffcc4 	movi	r2,-13
   30148:	00000806 	br	3016c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   3014c:	e0bffd17 	ldw	r2,-12(fp)
   30150:	10800044 	addi	r2,r2,1
   30154:	e0bffd15 	stw	r2,-12(fp)
   30158:	d0a00a17 	ldw	r2,-32728(gp)
   3015c:	1007883a 	mov	r3,r2
   30160:	e0bffd17 	ldw	r2,-12(fp)
   30164:	18bfd92e 	bgeu	r3,r2,300cc <__alt_data_end+0xffff00cc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   30168:	0005883a 	mov	r2,zero
}
   3016c:	e6ffff04 	addi	sp,fp,-4
   30170:	dfc00217 	ldw	ra,8(sp)
   30174:	df000117 	ldw	fp,4(sp)
   30178:	dc000017 	ldw	r16,0(sp)
   3017c:	dec00304 	addi	sp,sp,12
   30180:	f800283a 	ret

00030184 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   30184:	defff604 	addi	sp,sp,-40
   30188:	dfc00915 	stw	ra,36(sp)
   3018c:	df000815 	stw	fp,32(sp)
   30190:	df000804 	addi	fp,sp,32
   30194:	e13ffd15 	stw	r4,-12(fp)
   30198:	e17ffe15 	stw	r5,-8(fp)
   3019c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   301a0:	00bfffc4 	movi	r2,-1
   301a4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   301a8:	00bffb44 	movi	r2,-19
   301ac:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   301b0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   301b4:	d1600804 	addi	r5,gp,-32736
   301b8:	e13ffd17 	ldw	r4,-12(fp)
   301bc:	00304a80 	call	304a8 <alt_find_dev>
   301c0:	e0bff815 	stw	r2,-32(fp)
   301c4:	e0bff817 	ldw	r2,-32(fp)
   301c8:	1000051e 	bne	r2,zero,301e0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   301cc:	e13ffd17 	ldw	r4,-12(fp)
   301d0:	00305380 	call	30538 <alt_find_file>
   301d4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   301d8:	00800044 	movi	r2,1
   301dc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   301e0:	e0bff817 	ldw	r2,-32(fp)
   301e4:	10002b26 	beq	r2,zero,30294 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   301e8:	e13ff817 	ldw	r4,-32(fp)
   301ec:	00306400 	call	30640 <alt_get_fd>
   301f0:	e0bff915 	stw	r2,-28(fp)
   301f4:	e0bff917 	ldw	r2,-28(fp)
   301f8:	1000030e 	bge	r2,zero,30208 <open+0x84>
    {
      status = index;
   301fc:	e0bff917 	ldw	r2,-28(fp)
   30200:	e0bffa15 	stw	r2,-24(fp)
   30204:	00002506 	br	3029c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   30208:	01400304 	movi	r5,12
   3020c:	e13ff917 	ldw	r4,-28(fp)
   30210:	002b0980 	call	2b098 <__mulsi3>
   30214:	1007883a 	mov	r3,r2
   30218:	008000f4 	movhi	r2,3
   3021c:	1085af04 	addi	r2,r2,5820
   30220:	1885883a 	add	r2,r3,r2
   30224:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   30228:	e0fffe17 	ldw	r3,-8(fp)
   3022c:	00900034 	movhi	r2,16384
   30230:	10bfffc4 	addi	r2,r2,-1
   30234:	1886703a 	and	r3,r3,r2
   30238:	e0bffc17 	ldw	r2,-16(fp)
   3023c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   30240:	e0bffb17 	ldw	r2,-20(fp)
   30244:	1000051e 	bne	r2,zero,3025c <open+0xd8>
   30248:	e13ffc17 	ldw	r4,-16(fp)
   3024c:	00300980 	call	30098 <alt_file_locked>
   30250:	e0bffa15 	stw	r2,-24(fp)
   30254:	e0bffa17 	ldw	r2,-24(fp)
   30258:	10001016 	blt	r2,zero,3029c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   3025c:	e0bff817 	ldw	r2,-32(fp)
   30260:	10800317 	ldw	r2,12(r2)
   30264:	10000826 	beq	r2,zero,30288 <open+0x104>
   30268:	e0bff817 	ldw	r2,-32(fp)
   3026c:	10800317 	ldw	r2,12(r2)
   30270:	e1ffff17 	ldw	r7,-4(fp)
   30274:	e1bffe17 	ldw	r6,-8(fp)
   30278:	e17ffd17 	ldw	r5,-12(fp)
   3027c:	e13ffc17 	ldw	r4,-16(fp)
   30280:	103ee83a 	callr	r2
   30284:	00000106 	br	3028c <open+0x108>
   30288:	0005883a 	mov	r2,zero
   3028c:	e0bffa15 	stw	r2,-24(fp)
   30290:	00000206 	br	3029c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   30294:	00bffb44 	movi	r2,-19
   30298:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   3029c:	e0bffa17 	ldw	r2,-24(fp)
   302a0:	1000090e 	bge	r2,zero,302c8 <open+0x144>
  {
    alt_release_fd (index);  
   302a4:	e13ff917 	ldw	r4,-28(fp)
   302a8:	002e3280 	call	2e328 <alt_release_fd>
    ALT_ERRNO = -status;
   302ac:	003005c0 	call	3005c <alt_get_errno>
   302b0:	1007883a 	mov	r3,r2
   302b4:	e0bffa17 	ldw	r2,-24(fp)
   302b8:	0085c83a 	sub	r2,zero,r2
   302bc:	18800015 	stw	r2,0(r3)
    return -1;
   302c0:	00bfffc4 	movi	r2,-1
   302c4:	00000106 	br	302cc <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   302c8:	e0bff917 	ldw	r2,-28(fp)
}
   302cc:	e037883a 	mov	sp,fp
   302d0:	dfc00117 	ldw	ra,4(sp)
   302d4:	df000017 	ldw	fp,0(sp)
   302d8:	dec00204 	addi	sp,sp,8
   302dc:	f800283a 	ret

000302e0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   302e0:	defffa04 	addi	sp,sp,-24
   302e4:	df000515 	stw	fp,20(sp)
   302e8:	df000504 	addi	fp,sp,20
   302ec:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   302f0:	0005303a 	rdctl	r2,status
   302f4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   302f8:	e0fffc17 	ldw	r3,-16(fp)
   302fc:	00bfff84 	movi	r2,-2
   30300:	1884703a 	and	r2,r3,r2
   30304:	1001703a 	wrctl	status,r2
  
  return context;
   30308:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   3030c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   30310:	e0bfff17 	ldw	r2,-4(fp)
   30314:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   30318:	e0bffd17 	ldw	r2,-12(fp)
   3031c:	10800017 	ldw	r2,0(r2)
   30320:	e0fffd17 	ldw	r3,-12(fp)
   30324:	18c00117 	ldw	r3,4(r3)
   30328:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   3032c:	e0bffd17 	ldw	r2,-12(fp)
   30330:	10800117 	ldw	r2,4(r2)
   30334:	e0fffd17 	ldw	r3,-12(fp)
   30338:	18c00017 	ldw	r3,0(r3)
   3033c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   30340:	e0bffd17 	ldw	r2,-12(fp)
   30344:	e0fffd17 	ldw	r3,-12(fp)
   30348:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   3034c:	e0bffd17 	ldw	r2,-12(fp)
   30350:	e0fffd17 	ldw	r3,-12(fp)
   30354:	10c00015 	stw	r3,0(r2)
   30358:	e0bffb17 	ldw	r2,-20(fp)
   3035c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30360:	e0bffe17 	ldw	r2,-8(fp)
   30364:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   30368:	0001883a 	nop
   3036c:	e037883a 	mov	sp,fp
   30370:	df000017 	ldw	fp,0(sp)
   30374:	dec00104 	addi	sp,sp,4
   30378:	f800283a 	ret

0003037c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   3037c:	defffb04 	addi	sp,sp,-20
   30380:	dfc00415 	stw	ra,16(sp)
   30384:	df000315 	stw	fp,12(sp)
   30388:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   3038c:	d0a00e17 	ldw	r2,-32712(gp)
   30390:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   30394:	d0a73e17 	ldw	r2,-25352(gp)
   30398:	10800044 	addi	r2,r2,1
   3039c:	d0a73e15 	stw	r2,-25352(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   303a0:	00002e06 	br	3045c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   303a4:	e0bffd17 	ldw	r2,-12(fp)
   303a8:	10800017 	ldw	r2,0(r2)
   303ac:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   303b0:	e0bffd17 	ldw	r2,-12(fp)
   303b4:	10800403 	ldbu	r2,16(r2)
   303b8:	10803fcc 	andi	r2,r2,255
   303bc:	10000426 	beq	r2,zero,303d0 <alt_tick+0x54>
   303c0:	d0a73e17 	ldw	r2,-25352(gp)
   303c4:	1000021e 	bne	r2,zero,303d0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   303c8:	e0bffd17 	ldw	r2,-12(fp)
   303cc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   303d0:	e0bffd17 	ldw	r2,-12(fp)
   303d4:	10800217 	ldw	r2,8(r2)
   303d8:	d0e73e17 	ldw	r3,-25352(gp)
   303dc:	18801d36 	bltu	r3,r2,30454 <alt_tick+0xd8>
   303e0:	e0bffd17 	ldw	r2,-12(fp)
   303e4:	10800403 	ldbu	r2,16(r2)
   303e8:	10803fcc 	andi	r2,r2,255
   303ec:	1000191e 	bne	r2,zero,30454 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   303f0:	e0bffd17 	ldw	r2,-12(fp)
   303f4:	10800317 	ldw	r2,12(r2)
   303f8:	e0fffd17 	ldw	r3,-12(fp)
   303fc:	18c00517 	ldw	r3,20(r3)
   30400:	1809883a 	mov	r4,r3
   30404:	103ee83a 	callr	r2
   30408:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   3040c:	e0bfff17 	ldw	r2,-4(fp)
   30410:	1000031e 	bne	r2,zero,30420 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   30414:	e13ffd17 	ldw	r4,-12(fp)
   30418:	00302e00 	call	302e0 <alt_alarm_stop>
   3041c:	00000d06 	br	30454 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   30420:	e0bffd17 	ldw	r2,-12(fp)
   30424:	10c00217 	ldw	r3,8(r2)
   30428:	e0bfff17 	ldw	r2,-4(fp)
   3042c:	1887883a 	add	r3,r3,r2
   30430:	e0bffd17 	ldw	r2,-12(fp)
   30434:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   30438:	e0bffd17 	ldw	r2,-12(fp)
   3043c:	10c00217 	ldw	r3,8(r2)
   30440:	d0a73e17 	ldw	r2,-25352(gp)
   30444:	1880032e 	bgeu	r3,r2,30454 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   30448:	e0bffd17 	ldw	r2,-12(fp)
   3044c:	00c00044 	movi	r3,1
   30450:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   30454:	e0bffe17 	ldw	r2,-8(fp)
   30458:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   3045c:	e0fffd17 	ldw	r3,-12(fp)
   30460:	d0a00e04 	addi	r2,gp,-32712
   30464:	18bfcf1e 	bne	r3,r2,303a4 <__alt_data_end+0xffff03a4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   30468:	0001883a 	nop
}
   3046c:	0001883a 	nop
   30470:	e037883a 	mov	sp,fp
   30474:	dfc00117 	ldw	ra,4(sp)
   30478:	df000017 	ldw	fp,0(sp)
   3047c:	dec00204 	addi	sp,sp,8
   30480:	f800283a 	ret

00030484 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   30484:	deffff04 	addi	sp,sp,-4
   30488:	df000015 	stw	fp,0(sp)
   3048c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   30490:	000170fa 	wrctl	ienable,zero
}
   30494:	0001883a 	nop
   30498:	e037883a 	mov	sp,fp
   3049c:	df000017 	ldw	fp,0(sp)
   304a0:	dec00104 	addi	sp,sp,4
   304a4:	f800283a 	ret

000304a8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   304a8:	defffa04 	addi	sp,sp,-24
   304ac:	dfc00515 	stw	ra,20(sp)
   304b0:	df000415 	stw	fp,16(sp)
   304b4:	df000404 	addi	fp,sp,16
   304b8:	e13ffe15 	stw	r4,-8(fp)
   304bc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   304c0:	e0bfff17 	ldw	r2,-4(fp)
   304c4:	10800017 	ldw	r2,0(r2)
   304c8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   304cc:	e13ffe17 	ldw	r4,-8(fp)
   304d0:	0020d180 	call	20d18 <strlen>
   304d4:	10800044 	addi	r2,r2,1
   304d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   304dc:	00000d06 	br	30514 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   304e0:	e0bffc17 	ldw	r2,-16(fp)
   304e4:	10800217 	ldw	r2,8(r2)
   304e8:	e0fffd17 	ldw	r3,-12(fp)
   304ec:	180d883a 	mov	r6,r3
   304f0:	e17ffe17 	ldw	r5,-8(fp)
   304f4:	1009883a 	mov	r4,r2
   304f8:	00307500 	call	30750 <memcmp>
   304fc:	1000021e 	bne	r2,zero,30508 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   30500:	e0bffc17 	ldw	r2,-16(fp)
   30504:	00000706 	br	30524 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   30508:	e0bffc17 	ldw	r2,-16(fp)
   3050c:	10800017 	ldw	r2,0(r2)
   30510:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   30514:	e0fffc17 	ldw	r3,-16(fp)
   30518:	e0bfff17 	ldw	r2,-4(fp)
   3051c:	18bff01e 	bne	r3,r2,304e0 <__alt_data_end+0xffff04e0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   30520:	0005883a 	mov	r2,zero
}
   30524:	e037883a 	mov	sp,fp
   30528:	dfc00117 	ldw	ra,4(sp)
   3052c:	df000017 	ldw	fp,0(sp)
   30530:	dec00204 	addi	sp,sp,8
   30534:	f800283a 	ret

00030538 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   30538:	defffb04 	addi	sp,sp,-20
   3053c:	dfc00415 	stw	ra,16(sp)
   30540:	df000315 	stw	fp,12(sp)
   30544:	df000304 	addi	fp,sp,12
   30548:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   3054c:	d0a00617 	ldw	r2,-32744(gp)
   30550:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   30554:	00003106 	br	3061c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   30558:	e0bffd17 	ldw	r2,-12(fp)
   3055c:	10800217 	ldw	r2,8(r2)
   30560:	1009883a 	mov	r4,r2
   30564:	0020d180 	call	20d18 <strlen>
   30568:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   3056c:	e0bffd17 	ldw	r2,-12(fp)
   30570:	10c00217 	ldw	r3,8(r2)
   30574:	e0bffe17 	ldw	r2,-8(fp)
   30578:	10bfffc4 	addi	r2,r2,-1
   3057c:	1885883a 	add	r2,r3,r2
   30580:	10800003 	ldbu	r2,0(r2)
   30584:	10803fcc 	andi	r2,r2,255
   30588:	1080201c 	xori	r2,r2,128
   3058c:	10bfe004 	addi	r2,r2,-128
   30590:	10800bd8 	cmpnei	r2,r2,47
   30594:	1000031e 	bne	r2,zero,305a4 <alt_find_file+0x6c>
    {
      len -= 1;
   30598:	e0bffe17 	ldw	r2,-8(fp)
   3059c:	10bfffc4 	addi	r2,r2,-1
   305a0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   305a4:	e0bffe17 	ldw	r2,-8(fp)
   305a8:	e0ffff17 	ldw	r3,-4(fp)
   305ac:	1885883a 	add	r2,r3,r2
   305b0:	10800003 	ldbu	r2,0(r2)
   305b4:	10803fcc 	andi	r2,r2,255
   305b8:	1080201c 	xori	r2,r2,128
   305bc:	10bfe004 	addi	r2,r2,-128
   305c0:	10800be0 	cmpeqi	r2,r2,47
   305c4:	1000081e 	bne	r2,zero,305e8 <alt_find_file+0xb0>
   305c8:	e0bffe17 	ldw	r2,-8(fp)
   305cc:	e0ffff17 	ldw	r3,-4(fp)
   305d0:	1885883a 	add	r2,r3,r2
   305d4:	10800003 	ldbu	r2,0(r2)
   305d8:	10803fcc 	andi	r2,r2,255
   305dc:	1080201c 	xori	r2,r2,128
   305e0:	10bfe004 	addi	r2,r2,-128
   305e4:	10000a1e 	bne	r2,zero,30610 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   305e8:	e0bffd17 	ldw	r2,-12(fp)
   305ec:	10800217 	ldw	r2,8(r2)
   305f0:	e0fffe17 	ldw	r3,-8(fp)
   305f4:	180d883a 	mov	r6,r3
   305f8:	e17fff17 	ldw	r5,-4(fp)
   305fc:	1009883a 	mov	r4,r2
   30600:	00307500 	call	30750 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   30604:	1000021e 	bne	r2,zero,30610 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   30608:	e0bffd17 	ldw	r2,-12(fp)
   3060c:	00000706 	br	3062c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   30610:	e0bffd17 	ldw	r2,-12(fp)
   30614:	10800017 	ldw	r2,0(r2)
   30618:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   3061c:	e0fffd17 	ldw	r3,-12(fp)
   30620:	d0a00604 	addi	r2,gp,-32744
   30624:	18bfcc1e 	bne	r3,r2,30558 <__alt_data_end+0xffff0558>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   30628:	0005883a 	mov	r2,zero
}
   3062c:	e037883a 	mov	sp,fp
   30630:	dfc00117 	ldw	ra,4(sp)
   30634:	df000017 	ldw	fp,0(sp)
   30638:	dec00204 	addi	sp,sp,8
   3063c:	f800283a 	ret

00030640 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   30640:	defffa04 	addi	sp,sp,-24
   30644:	dfc00515 	stw	ra,20(sp)
   30648:	df000415 	stw	fp,16(sp)
   3064c:	dc000315 	stw	r16,12(sp)
   30650:	df000404 	addi	fp,sp,16
   30654:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   30658:	00bffa04 	movi	r2,-24
   3065c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   30660:	e03ffc15 	stw	zero,-16(fp)
   30664:	00001d06 	br	306dc <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   30668:	040000f4 	movhi	r16,3
   3066c:	8405af04 	addi	r16,r16,5820
   30670:	e0bffc17 	ldw	r2,-16(fp)
   30674:	01400304 	movi	r5,12
   30678:	1009883a 	mov	r4,r2
   3067c:	002b0980 	call	2b098 <__mulsi3>
   30680:	8085883a 	add	r2,r16,r2
   30684:	10800017 	ldw	r2,0(r2)
   30688:	1000111e 	bne	r2,zero,306d0 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   3068c:	040000f4 	movhi	r16,3
   30690:	8405af04 	addi	r16,r16,5820
   30694:	e0bffc17 	ldw	r2,-16(fp)
   30698:	01400304 	movi	r5,12
   3069c:	1009883a 	mov	r4,r2
   306a0:	002b0980 	call	2b098 <__mulsi3>
   306a4:	8085883a 	add	r2,r16,r2
   306a8:	e0fffe17 	ldw	r3,-8(fp)
   306ac:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   306b0:	d0e00a17 	ldw	r3,-32728(gp)
   306b4:	e0bffc17 	ldw	r2,-16(fp)
   306b8:	1880020e 	bge	r3,r2,306c4 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   306bc:	e0bffc17 	ldw	r2,-16(fp)
   306c0:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   306c4:	e0bffc17 	ldw	r2,-16(fp)
   306c8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   306cc:	00000606 	br	306e8 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   306d0:	e0bffc17 	ldw	r2,-16(fp)
   306d4:	10800044 	addi	r2,r2,1
   306d8:	e0bffc15 	stw	r2,-16(fp)
   306dc:	e0bffc17 	ldw	r2,-16(fp)
   306e0:	10800810 	cmplti	r2,r2,32
   306e4:	103fe01e 	bne	r2,zero,30668 <__alt_data_end+0xffff0668>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   306e8:	e0bffd17 	ldw	r2,-12(fp)
}
   306ec:	e6ffff04 	addi	sp,fp,-4
   306f0:	dfc00217 	ldw	ra,8(sp)
   306f4:	df000117 	ldw	fp,4(sp)
   306f8:	dc000017 	ldw	r16,0(sp)
   306fc:	dec00304 	addi	sp,sp,12
   30700:	f800283a 	ret

00030704 <atexit>:
   30704:	200b883a 	mov	r5,r4
   30708:	000f883a 	mov	r7,zero
   3070c:	000d883a 	mov	r6,zero
   30710:	0009883a 	mov	r4,zero
   30714:	00307cc1 	jmpi	307cc <__register_exitproc>

00030718 <exit>:
   30718:	defffe04 	addi	sp,sp,-8
   3071c:	000b883a 	mov	r5,zero
   30720:	dc000015 	stw	r16,0(sp)
   30724:	dfc00115 	stw	ra,4(sp)
   30728:	2021883a 	mov	r16,r4
   3072c:	00308e40 	call	308e4 <__call_exitprocs>
   30730:	008000f4 	movhi	r2,3
   30734:	108a8904 	addi	r2,r2,10788
   30738:	11000017 	ldw	r4,0(r2)
   3073c:	20800f17 	ldw	r2,60(r4)
   30740:	10000126 	beq	r2,zero,30748 <exit+0x30>
   30744:	103ee83a 	callr	r2
   30748:	8009883a 	mov	r4,r16
   3074c:	0030a640 	call	30a64 <_exit>

00030750 <memcmp>:
   30750:	01c000c4 	movi	r7,3
   30754:	3980192e 	bgeu	r7,r6,307bc <memcmp+0x6c>
   30758:	2144b03a 	or	r2,r4,r5
   3075c:	11c4703a 	and	r2,r2,r7
   30760:	10000f26 	beq	r2,zero,307a0 <memcmp+0x50>
   30764:	20800003 	ldbu	r2,0(r4)
   30768:	28c00003 	ldbu	r3,0(r5)
   3076c:	10c0151e 	bne	r2,r3,307c4 <memcmp+0x74>
   30770:	31bfff84 	addi	r6,r6,-2
   30774:	01ffffc4 	movi	r7,-1
   30778:	00000406 	br	3078c <memcmp+0x3c>
   3077c:	20800003 	ldbu	r2,0(r4)
   30780:	28c00003 	ldbu	r3,0(r5)
   30784:	31bfffc4 	addi	r6,r6,-1
   30788:	10c00e1e 	bne	r2,r3,307c4 <memcmp+0x74>
   3078c:	21000044 	addi	r4,r4,1
   30790:	29400044 	addi	r5,r5,1
   30794:	31fff91e 	bne	r6,r7,3077c <__alt_data_end+0xffff077c>
   30798:	0005883a 	mov	r2,zero
   3079c:	f800283a 	ret
   307a0:	20c00017 	ldw	r3,0(r4)
   307a4:	28800017 	ldw	r2,0(r5)
   307a8:	18bfee1e 	bne	r3,r2,30764 <__alt_data_end+0xffff0764>
   307ac:	31bfff04 	addi	r6,r6,-4
   307b0:	21000104 	addi	r4,r4,4
   307b4:	29400104 	addi	r5,r5,4
   307b8:	39bff936 	bltu	r7,r6,307a0 <__alt_data_end+0xffff07a0>
   307bc:	303fe91e 	bne	r6,zero,30764 <__alt_data_end+0xffff0764>
   307c0:	003ff506 	br	30798 <__alt_data_end+0xffff0798>
   307c4:	10c5c83a 	sub	r2,r2,r3
   307c8:	f800283a 	ret

000307cc <__register_exitproc>:
   307cc:	defffa04 	addi	sp,sp,-24
   307d0:	dc000315 	stw	r16,12(sp)
   307d4:	040000f4 	movhi	r16,3
   307d8:	840a8904 	addi	r16,r16,10788
   307dc:	80c00017 	ldw	r3,0(r16)
   307e0:	dc400415 	stw	r17,16(sp)
   307e4:	dfc00515 	stw	ra,20(sp)
   307e8:	18805217 	ldw	r2,328(r3)
   307ec:	2023883a 	mov	r17,r4
   307f0:	10003726 	beq	r2,zero,308d0 <__register_exitproc+0x104>
   307f4:	10c00117 	ldw	r3,4(r2)
   307f8:	010007c4 	movi	r4,31
   307fc:	20c00e16 	blt	r4,r3,30838 <__register_exitproc+0x6c>
   30800:	1a000044 	addi	r8,r3,1
   30804:	8800221e 	bne	r17,zero,30890 <__register_exitproc+0xc4>
   30808:	18c00084 	addi	r3,r3,2
   3080c:	18c7883a 	add	r3,r3,r3
   30810:	18c7883a 	add	r3,r3,r3
   30814:	12000115 	stw	r8,4(r2)
   30818:	10c7883a 	add	r3,r2,r3
   3081c:	19400015 	stw	r5,0(r3)
   30820:	0005883a 	mov	r2,zero
   30824:	dfc00517 	ldw	ra,20(sp)
   30828:	dc400417 	ldw	r17,16(sp)
   3082c:	dc000317 	ldw	r16,12(sp)
   30830:	dec00604 	addi	sp,sp,24
   30834:	f800283a 	ret
   30838:	00800034 	movhi	r2,0
   3083c:	10800004 	addi	r2,r2,0
   30840:	10002626 	beq	r2,zero,308dc <__register_exitproc+0x110>
   30844:	01006404 	movi	r4,400
   30848:	d9400015 	stw	r5,0(sp)
   3084c:	d9800115 	stw	r6,4(sp)
   30850:	d9c00215 	stw	r7,8(sp)
   30854:	00000000 	call	0 <__alt_mem_OCRAM-0x20000>
   30858:	d9400017 	ldw	r5,0(sp)
   3085c:	d9800117 	ldw	r6,4(sp)
   30860:	d9c00217 	ldw	r7,8(sp)
   30864:	10001d26 	beq	r2,zero,308dc <__register_exitproc+0x110>
   30868:	81000017 	ldw	r4,0(r16)
   3086c:	10000115 	stw	zero,4(r2)
   30870:	02000044 	movi	r8,1
   30874:	22405217 	ldw	r9,328(r4)
   30878:	0007883a 	mov	r3,zero
   3087c:	12400015 	stw	r9,0(r2)
   30880:	20805215 	stw	r2,328(r4)
   30884:	10006215 	stw	zero,392(r2)
   30888:	10006315 	stw	zero,396(r2)
   3088c:	883fde26 	beq	r17,zero,30808 <__alt_data_end+0xffff0808>
   30890:	18c9883a 	add	r4,r3,r3
   30894:	2109883a 	add	r4,r4,r4
   30898:	1109883a 	add	r4,r2,r4
   3089c:	21802215 	stw	r6,136(r4)
   308a0:	01800044 	movi	r6,1
   308a4:	12406217 	ldw	r9,392(r2)
   308a8:	30cc983a 	sll	r6,r6,r3
   308ac:	4992b03a 	or	r9,r9,r6
   308b0:	12406215 	stw	r9,392(r2)
   308b4:	21c04215 	stw	r7,264(r4)
   308b8:	01000084 	movi	r4,2
   308bc:	893fd21e 	bne	r17,r4,30808 <__alt_data_end+0xffff0808>
   308c0:	11006317 	ldw	r4,396(r2)
   308c4:	218cb03a 	or	r6,r4,r6
   308c8:	11806315 	stw	r6,396(r2)
   308cc:	003fce06 	br	30808 <__alt_data_end+0xffff0808>
   308d0:	18805304 	addi	r2,r3,332
   308d4:	18805215 	stw	r2,328(r3)
   308d8:	003fc606 	br	307f4 <__alt_data_end+0xffff07f4>
   308dc:	00bfffc4 	movi	r2,-1
   308e0:	003fd006 	br	30824 <__alt_data_end+0xffff0824>

000308e4 <__call_exitprocs>:
   308e4:	defff504 	addi	sp,sp,-44
   308e8:	df000915 	stw	fp,36(sp)
   308ec:	dd400615 	stw	r21,24(sp)
   308f0:	dc800315 	stw	r18,12(sp)
   308f4:	dfc00a15 	stw	ra,40(sp)
   308f8:	ddc00815 	stw	r23,32(sp)
   308fc:	dd800715 	stw	r22,28(sp)
   30900:	dd000515 	stw	r20,20(sp)
   30904:	dcc00415 	stw	r19,16(sp)
   30908:	dc400215 	stw	r17,8(sp)
   3090c:	dc000115 	stw	r16,4(sp)
   30910:	d9000015 	stw	r4,0(sp)
   30914:	2839883a 	mov	fp,r5
   30918:	04800044 	movi	r18,1
   3091c:	057fffc4 	movi	r21,-1
   30920:	008000f4 	movhi	r2,3
   30924:	108a8904 	addi	r2,r2,10788
   30928:	12000017 	ldw	r8,0(r2)
   3092c:	45005217 	ldw	r20,328(r8)
   30930:	44c05204 	addi	r19,r8,328
   30934:	a0001c26 	beq	r20,zero,309a8 <__call_exitprocs+0xc4>
   30938:	a0800117 	ldw	r2,4(r20)
   3093c:	15ffffc4 	addi	r23,r2,-1
   30940:	b8000d16 	blt	r23,zero,30978 <__call_exitprocs+0x94>
   30944:	14000044 	addi	r16,r2,1
   30948:	8421883a 	add	r16,r16,r16
   3094c:	8421883a 	add	r16,r16,r16
   30950:	84402004 	addi	r17,r16,128
   30954:	a463883a 	add	r17,r20,r17
   30958:	a421883a 	add	r16,r20,r16
   3095c:	e0001e26 	beq	fp,zero,309d8 <__call_exitprocs+0xf4>
   30960:	80804017 	ldw	r2,256(r16)
   30964:	e0801c26 	beq	fp,r2,309d8 <__call_exitprocs+0xf4>
   30968:	bdffffc4 	addi	r23,r23,-1
   3096c:	843fff04 	addi	r16,r16,-4
   30970:	8c7fff04 	addi	r17,r17,-4
   30974:	bd7ff91e 	bne	r23,r21,3095c <__alt_data_end+0xffff095c>
   30978:	00800034 	movhi	r2,0
   3097c:	10800004 	addi	r2,r2,0
   30980:	10000926 	beq	r2,zero,309a8 <__call_exitprocs+0xc4>
   30984:	a0800117 	ldw	r2,4(r20)
   30988:	1000301e 	bne	r2,zero,30a4c <__call_exitprocs+0x168>
   3098c:	a0800017 	ldw	r2,0(r20)
   30990:	10003226 	beq	r2,zero,30a5c <__call_exitprocs+0x178>
   30994:	a009883a 	mov	r4,r20
   30998:	98800015 	stw	r2,0(r19)
   3099c:	00000000 	call	0 <__alt_mem_OCRAM-0x20000>
   309a0:	9d000017 	ldw	r20,0(r19)
   309a4:	a03fe41e 	bne	r20,zero,30938 <__alt_data_end+0xffff0938>
   309a8:	dfc00a17 	ldw	ra,40(sp)
   309ac:	df000917 	ldw	fp,36(sp)
   309b0:	ddc00817 	ldw	r23,32(sp)
   309b4:	dd800717 	ldw	r22,28(sp)
   309b8:	dd400617 	ldw	r21,24(sp)
   309bc:	dd000517 	ldw	r20,20(sp)
   309c0:	dcc00417 	ldw	r19,16(sp)
   309c4:	dc800317 	ldw	r18,12(sp)
   309c8:	dc400217 	ldw	r17,8(sp)
   309cc:	dc000117 	ldw	r16,4(sp)
   309d0:	dec00b04 	addi	sp,sp,44
   309d4:	f800283a 	ret
   309d8:	a0800117 	ldw	r2,4(r20)
   309dc:	80c00017 	ldw	r3,0(r16)
   309e0:	10bfffc4 	addi	r2,r2,-1
   309e4:	15c01426 	beq	r2,r23,30a38 <__call_exitprocs+0x154>
   309e8:	80000015 	stw	zero,0(r16)
   309ec:	183fde26 	beq	r3,zero,30968 <__alt_data_end+0xffff0968>
   309f0:	95c8983a 	sll	r4,r18,r23
   309f4:	a0806217 	ldw	r2,392(r20)
   309f8:	a5800117 	ldw	r22,4(r20)
   309fc:	2084703a 	and	r2,r4,r2
   30a00:	10000b26 	beq	r2,zero,30a30 <__call_exitprocs+0x14c>
   30a04:	a0806317 	ldw	r2,396(r20)
   30a08:	2088703a 	and	r4,r4,r2
   30a0c:	20000c1e 	bne	r4,zero,30a40 <__call_exitprocs+0x15c>
   30a10:	89400017 	ldw	r5,0(r17)
   30a14:	d9000017 	ldw	r4,0(sp)
   30a18:	183ee83a 	callr	r3
   30a1c:	a0800117 	ldw	r2,4(r20)
   30a20:	15bfbf1e 	bne	r2,r22,30920 <__alt_data_end+0xffff0920>
   30a24:	98800017 	ldw	r2,0(r19)
   30a28:	153fcf26 	beq	r2,r20,30968 <__alt_data_end+0xffff0968>
   30a2c:	003fbc06 	br	30920 <__alt_data_end+0xffff0920>
   30a30:	183ee83a 	callr	r3
   30a34:	003ff906 	br	30a1c <__alt_data_end+0xffff0a1c>
   30a38:	a5c00115 	stw	r23,4(r20)
   30a3c:	003feb06 	br	309ec <__alt_data_end+0xffff09ec>
   30a40:	89000017 	ldw	r4,0(r17)
   30a44:	183ee83a 	callr	r3
   30a48:	003ff406 	br	30a1c <__alt_data_end+0xffff0a1c>
   30a4c:	a0800017 	ldw	r2,0(r20)
   30a50:	a027883a 	mov	r19,r20
   30a54:	1029883a 	mov	r20,r2
   30a58:	003fb606 	br	30934 <__alt_data_end+0xffff0934>
   30a5c:	0005883a 	mov	r2,zero
   30a60:	003ffb06 	br	30a50 <__alt_data_end+0xffff0a50>

00030a64 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   30a64:	defffd04 	addi	sp,sp,-12
   30a68:	df000215 	stw	fp,8(sp)
   30a6c:	df000204 	addi	fp,sp,8
   30a70:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   30a74:	0001883a 	nop
   30a78:	e0bfff17 	ldw	r2,-4(fp)
   30a7c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   30a80:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   30a84:	10000226 	beq	r2,zero,30a90 <_exit+0x2c>
    ALT_SIM_FAIL();
   30a88:	002af070 	cmpltui	zero,zero,43969
   30a8c:	00000106 	br	30a94 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   30a90:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   30a94:	003fff06 	br	30a94 <__alt_data_end+0xffff0a94>
